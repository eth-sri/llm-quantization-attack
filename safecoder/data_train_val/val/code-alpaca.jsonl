{"instruction": "Assign ``num = 5`` to the ``num`` variable using the Python assignment operator.", "input": "", "output": "num = 5"}
{"instruction": "Generate C++ code that compares two strings and returns 1 if they are equal, 0 if they are not.", "input": "", "output": "bool compareStrings(string str1, string str2)\n{\n    if(str1.compare(str2) == 0)\n        return 1;\n    else\n        return 0;\n}"}
{"instruction": "Create a list of strings from a given string.", "input": "let str = \"hello world!\"", "output": "let strArray = str.split(' ');"}
{"instruction": "Create an SQL table with three columns called id (int type), name (text type), and age (int type).", "input": "", "output": "CREATE TABLE people (\n    id INT PRIMARY KEY, \n    name TEXT,\n    age INT\n);"}
{"instruction": "Given a string variable, write a function to convert it to uppercase using Javascript.", "input": "", "output": "function toUpperCase(str) {\n  return str.toUpperCase();\n}"}
{"instruction": "Write an SQL query to find the total number of books in the library.", "input": "", "output": "SELECT COUNT(*) FROM books;"}
{"instruction": "Create a class in C++ that can produce the result of an arithmetic expression with two numbers as input.", "input": "num1 = 5, num2 = 10", "output": "class ArithmeticExpression {\n    public: \n        int CalculateExpression(int num1, int num2) {\n            return num1 + num2;\n        }\n};"}
{"instruction": "Count the number of occurrences of a given number in a list of numbers.", "input": "numbers = [1,1,2,3,4,4,4,5]\nnumber = 4", "output": "\"\"\"\nCount the number of occurrences of a given number in a list of numbers.\n\"\"\"\n\nnumbers = [1,1,2,3,4,4,4,5]\nnumber = 4\n\ndef count_occurrences(numbers, number):\n    count = 0\n    for num in numbers:\n        if num == number:\n            count += 1\n    return count\n\nprint(count_occurrences(numbers, number))"}
{"instruction": "Create a program that reads a string input and replaces all instances of a word with a given replacement", "input": "Original string = \"Merry Christmas everyone, what a lovely day!\" Replacement word = \"Happy\"", "output": "def replace_word(originalString, replacementWord): \n    return originalString.replace('Christmas', replacementWord)\n# Output: \"Merry Happy everyone, what a lovely day!\""}
{"instruction": "Extract the value of the given key from the given XML structure.", "input": "<score>\n    <name>Alice</name>\n    <points>15</points>\n</score>\n\nKey: points", "output": "15"}
{"instruction": "Create a program that prompts the user to enter their name and prints it out.", "input": "", "output": "# Get user input\nname = input('Enter your name: ')\n\n# Print out the user's name\nprint('Hello ' + name + '!')"}
{"instruction": "Code a function in Python to calculate the nth value of the Fibonacci sequence.", "input": "", "output": "def fibonacci(n): \n    if n <= 0: \n        return 0 \n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2)"}
{"instruction": "Calculate the area of the triangle.", "input": "Base: 8cm\nHeight: 5cm", "output": "The area of the triangle is 20 square centimeters."}
{"instruction": "Create a function to calculate the sum of all the even numbers between 20 and 100.", "input": "", "output": "const calculateSum = (start, end) => {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) sum += i\n  }\n  return sum;\n}\n\ncalculateSum(20, 100); // 1890"}
{"instruction": "Convert this CSV data into a Pandas DataFrame.", "input": "name,age\nJohn,20\nJames,31", "output": "import pandas as pd\n\ndata = pd.read_csv('data.csv')\n\ndf = pd.DataFrame(data)"}
{"instruction": "Generate CNN-LSTM model in Keras.", "input": "", "output": "# define CNN model\nmodel_cnn = Sequential([\n    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    MaxPool2D(),\n    Flatten(),\n    Dense(100, activation='relu'),\n    Dense(10, activation='softmax')\n])\n\n# define RNN model\nmodel_lstm = Sequential()\nmodel_lstm.add(LSTM(128, input_shape=(28, 28, 32)))\nmodel_lstm.add(Dense(100, activation='relu'))\nmodel_lstm.add(Dense(10, activation='softmax'))\n\n# define the model\nmodel = Sequential()\nmodel.add(Convolution2D(32, 3, 3, input_shape=(28, 28, 1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(LSTM(128))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(10, activation='softmax'))"}
{"instruction": "Write an SQL query to find the names and scores of the top 5 students in a class.", "input": "Table Name: students\nTable Schema: id INT, name VARCHAR(20), score INT", "output": "SELECT name, score FROM students ORDER BY score DESC LIMIT 5;"}
{"instruction": "We want to display a random number between 1 and 10 using Python. Write a program for that.", "input": "", "output": "import random\nrandomNumber = random.randint(1, 10)\nprint(randomNumber)"}
{"instruction": "Write HTML code to generate a table of 5 rows and 4 columns.", "input": "", "output": "<table> \n  <tr> \n    <th>Col1</th> \n    <th>Col2</th> \n    <th>Col3</th> \n    <th>Col4</th> \n  </tr> \n  <tr> \n    <td>Row1</td> \n    <td>Row1</td> \n    <td>Row1</td> \n    <td>Row1</td> \n  </tr> \n  <tr> \n    <td>Row2</td> \n    <td>Row2</td> \n    <td>Row2</td> \n    <td>Row2</td> \n  </tr> \n  <tr> \n    <td>Row3</td> \n    <td>Row3</td> \n    <td>Row3</td> \n    <td>Row3</td> \n  </tr> \n  <tr> \n    <td>Row4</td> \n    <td>Row4</td> \n    <td>Row4</td> \n    <td>Row4</td> \n  </tr> \n  <tr> \n    <td>Row5</td> \n    <td>Row5</td> \n    <td>Row5</td> \n    <td>Row5</td> \n  </tr> \n</table>"}
{"instruction": "Identify which type of triangle the 3 sides of length a, b, and c form.", "input": "a = 4, b = 4, c = 6", "output": "The triangle is an isosceles triangle as two of its side are of equal length."}
{"instruction": "What is the data type returned by the following code snippet?", "input": "value = 2**8", "output": "The data type returned by the following code snippet is an integer."}
{"instruction": "How many continuous substrings are there in the string \"Geeks\"?", "input": "", "output": "15"}
{"instruction": "Describe what an else clause does in an if statement.", "input": "", "output": "An else clause is used in an if statement as a way to define an alternative block of code that will be executed when the condition of the if statement is not met."}
{"instruction": "Create a function that filters a list of strings based on their length.", "input": "List = [\"Carrot\", \"Apple\", \"Orange\", \"Banana\", \"Pear\"]", "output": "def filter_string_length(strings):\n    \"\"\"\n    This function takes in a list of strings and filters out those\n    that are not longer than 5 characters.\n    \"\"\"\n    return [s for s in strings if len(s) > 5]\n\nlist_strings = [\"Carrot\", \"Apple\", \"Orange\", \"Banana\", \"Pear\"]\nfiltered_list = filter_string_length(list_strings)\nprint(filtered_list)\n\n# Output: [\"Carrot\", \"Orange\", \"Banana\"]"}
{"instruction": "Create a class in python with three functions, two of which must be called `add` and `subtract`.", "input": "", "output": "class MathOperations:\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b"}
{"instruction": "Given the following array of dictionaries, write a function in Python to find and return the longest common prefix in the keys of dictionaries.", "input": "arr_of_dictionaries = [\n    {\n        \"name\": \"John Doe\",\n        \"country\": \"United States\"\n    },\n    {\n        \"name\": \"Jane Doe\",\n        \"state\": \"New York\"\n    }\n]", "output": "def longest_common_prefix(arr_of_dictionaries):\n    prefix = ''\n    if len(arr_of_dictionaries) == 0:\n        return prefix\n    first_dict_keys = arr_of_dictionaries[0].keys()\n    for i in range(len(list(first_dict_keys)[0])):\n        char = list(first_dict_keys)[0][i]\n        for dict in arr_of_dictionaries:\n            if list(dict.keys())[0][i] != char:\n                return prefix\n        prefix += char\n    return prefix"}
{"instruction": "Create a new array containing the numbers from 10 to 100 in increments of 5.", "input": "[10, 15, 20, 25, 30, ..., 95, 100]", "output": "int[] array = new int[19];\nint num = 10;\nfor (int i=0; i<19; i++){\n    array[i] = num;\n    num += 5;\n}"}
{"instruction": "Suggest a few input parameters for a Machine Learning model", "input": "", "output": "Some potential input parameters for a Machine Learning model include numeric features, categorical features, text features, external features, and data derived from benchmark datasets."}
{"instruction": "Extract the URL from the given text.", "input": "The website can be accessed at https://www.website.com", "output": "https://www.website.com"}
{"instruction": "Edit the Python code to reverse a linked list.", "input": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None", "output": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef reverse_list(head):\n    prev = None\n    while head != None:\n        next = head.next\n        head.next = prev\n        prev = head\n        head = next\n    return prev"}
{"instruction": "Define a function to collect unique values from a list of dictionaries based on the \"key\" field.", "input": "list = [{'name': 'Apple', 'price': 100}, {'name': 'Mango', 'price': 90}, {'name': 'Apple', 'price': 200}]", "output": "def collect_unique(dic_list, key):\n    unique_values = set()\n    for item in dic_list:\n        val = item.get(key)\n        if val is not None:\n            unique_values.add(val)\n    return list(unique_values)"}
{"instruction": "Replace words with corresponding synonyms in the given text", "input": "text: \"The cat is lazy and likes to sleep.\"\nword: \"sleep\"\nsynonym: \"nap\"", "output": "# Replace words with corresponding synonyms in the given text\n\ntext = \"The cat is lazy and likes to sleep.\"\n\n# Replace the word\ntext = text.replace(\"sleep\", \"nap\")\n\nprint(text) # \"The cat is lazy and likes to nap.\""}
{"instruction": "Write a SQL query to get the names of all customers who have placed orders from a given store in the last week.", "input": "Given store name:  \"ABC Store\"", "output": "SELECT DISTINCT c.name \nFROM customer c \nINNER JOIN order o \nON c.customer_id = o.customer_id\nWHERE o.store_name = \"ABC Store\"\nAND o.date_ordered >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"instruction": "Write a JavaScript code snippet for validating an email address.", "input": "", "output": "function validateEmail(email) {\n  var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}"}
{"instruction": "Rewrite the following C program so that it prints the frequency of each character in a given string.", "input": "string = \"abcabcabc\"", "output": "#include <stdio.h>\n#include <string.h>\n\n// Fills frequency array with zero \nvoid clear(int count[], int n) \n{ \n\tint i; \n\tfor (i = 0; i < n; i++) \n\tcount[i] = 0; \n}\n\n// Calculate frequency of each character \n// in a string \nvoid calculateFrequency(char *str, int count[], int len) \n{ \n\tint i; \n\tfor (i = 0; i < len; i++) \n\t\tcount[str[i] - 'a']++;\t\n}\n\nint main() \n{ \n\tchar str[] = \"abcabcabc\"; \n\tint len = strlen(str); \n\t// Initialize frequency array \n\tint count[26] = { 0 }; \n\t\n\t// Clear the frequency array \n\tclear(count, 26); \n\t\n\t// Calculate frequency \n\tcalculateFrequency(str, count, len); \n\t\n\t// Print the frequency of each character \n\tfor (int i = 0; i < 26; i++) \n\t\tif(count[i] != 0) \n\t\t\tprintf(\"%c occurs %d times in the string \\n\", i + 'a', count[i]); \n\treturn 0; \n}"}
{"instruction": "Rewrite this piece of HTML using Semantic Elements.", "input": "<div id=\"header\"> <h1>Welcome</h1> </div>", "output": "<header> <h1>Welcome</h1> </header>"}
{"instruction": "Create a Python script to fetch the weather data of a given city", "input": "Bangalore", "output": "import requests\n\ncity = \"Bangalore\"\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid=your_api_key\"\n\n# Fetching the JSON data\nresponse = requests.get(url)\ndata = response.json()\n \n# Get the main weather data\nweather_data = data[\"main\"]\n \n# Obtain the current temperature \ntemp = weather_data[\"temp\"]\n \nprint(f\"The current temperature in {city} is {temp} degrees Celsius.\")"}
{"instruction": "Which programming language syntax is used in the following code snippet?", "input": "#define some_function() {\n    // do something\n}", "output": "The programming language syntax used in the given code snippet is C."}
{"instruction": "Change the code using decorator to log how long the function runs.", "input": "def sum_function(a, b):\n    return a + b", "output": "import time\n\ndef log_time(func):\n    def inner(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n\n        print(f'Function {func.__name__} took {end-start} sec to run')\n\n        return result\n    return inner\n\n@log_time\ndef sum_function(a, b):\n    return a + b"}
{"instruction": "Insert a breakpoint just before the return statement.", "input": "def calculate_the_total(fruit_list):\n   total = 0\n   for item in fruit_list:\n      total += item\n   \n   return total", "output": "def calculate_the_total(fruit_list):\n   total = 0\n   for item in fruit_list:\n      total += item\n   import pdb; pdb.set_trace()\n   \n   return total"}
{"instruction": "Construct an HTML form to get user input for first name, last name, phone number and email address.", "input": "", "output": "<form action=\"\">\n    First Name: <input type=\"text\" name=\"first_name\" required><br>\n    Last Name: <input type=\"text\" name=\"last_name\" required><br>\n    Phone Number: <input type=\"text\" name=\"phone_number\" required><br>\n    Email Address: <input type=\"email\" name=\"email_address\" required><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>"}
{"instruction": "Write a MySQL query to calculate the average temperature for each user, given a table of log data.", "input": "", "output": "SELECT user_id, AVG(temperature) \nFROM logs \nGROUP BY user_id;"}
{"instruction": "Write a Java method that accepts two integers and returns their least common multiple.", "input": "", "output": "public static int lcm(int a, int b) {\n    int gcd = 1;\n    for(int i = 1; i <= a && i <= b; ++i)\n    {\n        // Checks if i is factor of both integers\n        if(a % i == 0 && b % i == 0)\n            gcd = i;\n    }\n\n    int lcm = (a*b) / gcd;\n    return lcm;\n}"}
{"instruction": "Edit this HTML form to make sure that the input data is validated.", "input": "<form action=\"/submit\">\n  <input type=\"text\" name=\"name\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>", "output": "<form action=\"/submit\" onsubmit=\"return validateForm()\" >\n  <input type=\"text\" name=\"name\" required/>\n  <input type=\"submit\" value=\"Submit\"/>\n</form>\n<script>\n  function validateForm() {\n    let name = document.forms[\"myForm\"][\"name\"].value;\n    if (name == \"\") {\n        alert(\"Name is required\");\n        return false;\n    }\n  }\n</script>"}
{"instruction": "What is a multithreaded program?", "input": "", "output": "A multithreaded program is a software program or application that uses multiple threads to execute different parts of its code simultaneously. This allows for faster execution of the program by using more than one processor core at the same time."}
{"instruction": "Write a CSS page to center align a given paragraph element.", "input": "", "output": "p {\n  text-align: center;\n}"}
{"instruction": "Design a function in Python that returns the median of an array of integers.", "input": "", "output": "def median(arr):\n  sortedArr = sorted(arr)\n  length = len(arr)\n  if length % 2 == 0:\n    return ((sortedArr[length//2-1] + sortedArr[length//2])/2)\n  else:\n    return sortedArr[length//2]"}
{"instruction": "Write a PHP program to find the largest number from an array.", "input": "array = [10, 25, 2, 39]", "output": "<?php\n$arr = array(10, 25, 2, 39);\n$max = $arr[0];\n \nforeach ($arr as $value) {\n   if ($value > $max) {\n      $max = $value;\n   }\n}\n \necho $max; // Output: 39\n?>"}
{"instruction": "Construct a C++ program to find the maximum value in an array of integers.", "input": "int array[] = {1, -2, 3, 4, 7, 5}", "output": "#include <iostream> \nusing namespace std; \n\nint findMax(int array[], int array_size)\n{\n    int max_value = array[0];\n    for (int i = 1; i < array_size; i++) \n        if (array[i] > max_value) \n            max_value = array[i];\n    return max_value;\n}\n\nint main() \n{ \n    int array[] = {1, -2, 3, 4, 7, 5}; \n    int array_size = sizeof(array)/sizeof(array[0]); \n    cout << \"Max: \" << findMax(array, array_size); \n    return 0; \n}"}
{"instruction": "Write an Apache VTL code to check if the user is logged in or not.", "input": "", "output": "#if(${user.loggedIn})\n  You are logged in.\n#else\n  You are not logged in.\n#end"}
{"instruction": "Which Boolean value is returned by == when two operands are equal?", "input": "", "output": "The Boolean value returned by == when two operands are equal is True."}
{"instruction": "Produce a SELECT query in PostgreSQL to search for all existing entries with a specified ID.", "input": "Property ID: 15", "output": "SELECT * FROM TableName WHERE PropertyID='15';"}
{"instruction": "Create a Ruby program to check if a number is even or odd.", "input": "", "output": "def is_even(number)\n  number % 2 == 0\nend"}
{"instruction": "Calculate the sum of all odd numbers from 1 to 10.", "input": "", "output": "25"}
{"instruction": "How can you replace a specific element from an array in JavaScript?", "input": "", "output": "The element can be replaced in JavaScript by using the Array.prototype.fill() method. \n\nFor example:\narr.fill(value, start, end); \n// start is the index of the first element to be replaced, end is the index of the last element to be replaced."}
{"instruction": "Modify a given program to replace each element in an array with the sum of all elements before it.", "input": "[1,2,3,4]", "output": "def pref_sum(a):\n    output = [a[0]]\n    for i in range(1, len(a)):\n        output.append(a[i] + output[i-1])\n    return output"}
{"instruction": "Edit the following code to take in a list of numbers and output the sum of all numbers in the list.", "input": "my_list = [5, 10, 15, 20]", "output": "my_list = [5, 10, 15, 20]\ntotal = 0\nfor num in my_list:\n    total += num\nprint(total) #50"}
{"instruction": "Create an array of strings, containing exactly three elements.", "input": "", "output": "string_array = [\"element1\", \"element2\", \"element3\"]"}
{"instruction": "FOr a given list, create a program that prints out the standard deviation of the elements in the list.", "input": "list = [1, 4, 9, 16]", "output": "def std_dev(list):\n    \"\"\"Print the standard deviation of elements in a given list.\"\"\"\n    numerator = 0\n    mean = sum(list) / len(list)\n    for num in list:\n        numerator += (num - mean) ** 2\n    sd = (numerator / (len(list) - 1)) ** 0.5\n    return sd"}
{"instruction": "Suggest a suitable language for developing iOS mobile applications.", "input": "", "output": "A suitable language for developing iOS mobile applications is Swift. Swift is an Apple-developed language which is optimized for performance, and is capable of providing a great user experience on iOS devices."}
{"instruction": "Generate a C program to print the ASCII value of a given character", "input": "Input character: A", "output": "#include <stdio.h> \nint main() \n{ \n    char c = 'A'; \n  \n    // Typecast to integer \n    int x = c; \n  \n    printf(\"ASCII value of %c = %d\", c, x); \n    return 0; \n}"}
{"instruction": "Edit the following HTML code snippet to change the color of the heading to blue.", "input": "<h1>Heading</h1>", "output": "<h1 style=\"color: blue;\">Heading</h1>"}
{"instruction": "Create a C program to print the numbers from 1 to 100, except for any number divisible by 3.", "input": "", "output": "#include <stdio.h>\n\nint main() \n{ \n    for (int i = 1; i <= 100; i++) { \n        if (i % 3 != 0) \n            printf(\"%d\\n\", i); \n    } \n    return 0; \n}"}
{"instruction": "Construct an if/else statement in Python to print \"Welcome new user\" if the value of variable \"userID\" is greater than 0.", "input": "userID = 5", "output": "if userID > 0:\n    print(\"Welcome new user\")\nelse:\n    print(\"User ID is invalid\")"}
{"instruction": "Write a CSS rule to set the background color to pink and the text color to white.", "input": "", "output": "body {\n  background-color: pink;\n  color: white;\n}"}
{"instruction": "Implement a Class in Java that creates a new array of two integers and allows the user to set and get the values of the array.", "input": "", "output": "public class TwoIntegers {\n    private int[] twoIntegers;\n    \n    public TwoIntegers() {\n        twoIntegers = new int[2];\n    }\n    \n    public int getFirst() {\n        return twoIntegers[0];\n    }\n    \n    public int getSecond() {\n        return twoIntegers[1];\n    }\n    \n    public void setFirst(int first) {\n        twoIntegers[0] = first;\n    }\n    \n    public void setSecond(int second) {\n        twoIntegers[1] = second;\n    }\n}"}
{"instruction": "Create an array of 15 random floats in Python between 0 and 1.", "input": "", "output": "import random\n\nrandom_floats = [random.uniform(0, 1) for _ in range(15)]"}
{"instruction": "Write code to create a list of tuples that contains all the possible combinations of two elements taken from two different lists.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 8]", "output": "def combo(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            result.append((i, j))\n    return result\n\ncombos = combo(list1, list2) # [(1, 5), (1, 6), (1, 7), (1, 8), (2, 5), (2, 6), (2, 7), (2, 8), (3, 5), (3, 6), (3, 7), (3, 8), (4, 5), (4, 6), (4, 7), (4, 8)]"}
{"instruction": "Design an HTML form with 2 input fields: name and email and submit button.", "input": "", "output": "<form action=\"\" method=\"post\">\n  Name: <input type=\"text\" name=\"name\" required><br>\n  Email: <input type=\"text\" name=\"email\" required><br>\n  <input type=\"submit\" name=\"submit\" value=\"Submit\">\n</form>"}
{"instruction": "Make a Perl program to detect whether a given string is numerical.", "input": "", "output": "sub is_numerical {  \n    $input = $_[0];\n    \n    if ($input =~ /^[0-9]+$/) {  \n        return 1;\n    } else {\n        return 0;     \n    }\n}"}
{"instruction": "Create a function in Java that takes two strings and returns an integer that describes the number of characters they share in common.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "public static int countCommonChars(String s1, String s2){\n    int count = 0;\n    int maxLen = Math.min(s1.length(), s2.length());\n    for(int i=0; i<maxLen; i++){\n        if(s1.charAt(i) == s2.charAt(i)) count++;\n    }\n    return count;\n}"}
{"instruction": "Write a formula in Excel to calculate the total cost of a trip given the cost and quantity.", "input": "Cost of hotel: $50\nQuantity of rooms: 2", "output": "=50*2"}
{"instruction": "Give a function name in JavaScript that takes in two integer numbers as parameters and returns the remainder of the first parameter divided by the second.", "input": "", "output": "function remainder(a, b) {\n    return a % b;\n}"}
{"instruction": "Merge two arrays using the given lists.", "input": "arr1 = [1, 2, 3]\narr2 = [\"a\", \"b\", \"c\"]", "output": "arr = arr1 + arr2\n#Merge two arrays\narr = arr1 + arr2"}
{"instruction": "Write a function to convert an RGB color to HEX.", "input": "", "output": "def rgb_to_hex(red, green, blue):\n    return '#%02x%02x%02x' % (red, green, blue)"}
{"instruction": "Output the last two words in the following string", "input": "I only have one wish.", "output": "wish."}
{"instruction": "What is the difference between int and float data types?", "input": "", "output": "The main difference between int and float data types is that an int is a data type used to represent whole numbers, while a float is a data type used to represent numbers with decimal points. An int has a greater range of values than a float, but a float is more precise."}
{"instruction": "Find the maximum value of an array without using any built-in functions", "input": "[7, 9, -2, 15, 3]", "output": "def find_max(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\narr = [7, 9, -2, 15, 3]\nprint(find_max(arr))"}
{"instruction": "Create a function that returns the nth Fibonacci number.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)"}
{"instruction": "Write a function to create a retail price tag given a cost, taxes and discounts.", "input": "cost = 5\ntax = 0.08\ndiscount = 0.2", "output": "def price_tag(cost, tax, discount):\n  tax_amount = cost * tax \n  discounted_price = cost + tax_amount - (discount * cost)\n  return \"Retail Price: $\" + str(round(discounted_price, 2))\n\nprice_tag(cost, tax, discount) # returns \"Retail Price: $7.20\""}
{"instruction": "Determine the type of the given variable.", "input": "var age = 20", "output": "Number."}
{"instruction": "Explain what the \"continue\" statement does.", "input": "", "output": "The \"continue\" statement is used to skip the current iteration of a loop and continue with the next iteration. It is commonly used to ignore certain items in a list or when the program should take a different action based on a particular condition."}
{"instruction": "Create a Visual Studio Code extension that provides auto-complete features for a specific language.", "input": "", "output": "This Visual Studio Code extension will create an Auto-Complete Provider for a specific language (e.g. JavaScript, Python, etc.). It will analyze the syntax of a given language and provide word suggestions while typing in the source code. The extension should be able to detect the language type from the file extension and then provide the auto-complete suggestions accordingly."}
{"instruction": "Create a function to determine whether one string is a substring of another.", "input": "string_1 = \"abcdefgh\"\nstring_2 = \"efg\"", "output": "def is_substring(string_1, string_2):\n    '''This function takes two strings and returns a boolean indicating whether\n    string_2 is a substring of string_1.'''\n    return string_2 in string_1"}
{"instruction": "Create a function in R for converting a string into uppercase.", "input": "", "output": "upperCase <- function(string){\n  return(toupper(string))\n}"}
{"instruction": "Develop a full-stack web application to display a list of items.", "input": "", "output": "The full-stack web application will include a client, server and database component. The client component will be responsible for rendering the list of items in a visually appealing format. The server component will be responsible for establishing an API endpoint for GET, POST, PUT and DELETE operations for interacting with the list of items. The database component will store the list of items and the associated data for each item."}
{"instruction": "Write a Python code to initialize a 10 x 10 matrix with random values.", "input": "", "output": "import random\n\ndef init_matrix():\n    matrix = [[0 for _ in range(10)] for _ in range(10)]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] = random.randint(0,100)\n    return matrix"}
{"instruction": "Write a function that takes two strings as parameters and returns whether they are an anagram of each other or not.", "input": "string1 = \"abcde\"\n\nstring2 = \"edcba\"", "output": "def is_anagram(string1, string2):\n    if sorted(string1) == sorted(string2):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    string1 = \"abcde\"\n    string2 = \"edcba\"\n\n    result = is_anagram(string1, string2)\n    print(result)"}
{"instruction": "Print out the sum of even numbers from the following range.", "input": "range(1,10)", "output": "sum = 0\nfor num in range(1,10):\n    if num % 2 == 0:\n        sum += num\nprint(sum) // Output: 20"}
{"instruction": "Generate code to display a progress bar in HTML.", "input": "", "output": "<div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 25%;\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n</div>"}
{"instruction": "You need to develop a code that takes two strings and returns a boolean if the substrings are anagrams.", "input": "Strings: \"computer\" and \"computer\"", "output": "def isAnagram (str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\nprint (isAnagram(\"computer\", \"computer\"))"}
{"instruction": "Create a C++ program that finds the most common element in the given input array.", "input": "Given array = [2, 4, 8, 3, 4, 4, 6, 2, 4, 9]", "output": "#include <bits/stdc++.h>\n \nusing namespace std;\n \nint most_common(int arr[], int n) \n{ \n   unordered_map<int, int> hash; \n \n   // store the counts of all elements \n   for (int i = 0; i < n; i++) \n     hash[arr[i]]++; \n \n   // traverse through the map and \n   // find out the maximum frequency \n   int max = 0, res = -1; \n   for (auto i : hash) { \n     if (max < i.second) { \n       res = i.first; \n       max = i.second; \n     } \n   } \n \n   return res; \n}  \n \nint main() \n{ \n   int arr[] = { 2, 4, 8, 3, 4, 4, 6, 2, 4, 9 }; \n   int n = sizeof(arr) / sizeof(arr[0]); \n   cout << most_common(arr, n) << endl; \n   return 0;   \n}"}
{"instruction": "Create a loop to print \"I love Python\" five times", "input": "", "output": "for i in range(5):\n    print(\"I love Python\")"}
{"instruction": "Create a Python class to represent a 3 x 3 matrix with variable values.", "input": "", "output": "class Matrix:\n    def __init__(self, a00=0, a01=0, a02=0, a10=0, a11=0, a12=0, a20=0, a21=0, a22=0):\n        self.matrix = [[a00, a01, a02],\n                        [a10, a11, a12],\n                        [a20, a21, a22]]\n    \n    def __str__(self):\n        return str(self.matrix)"}
{"instruction": "Write an SQL query and to output an ordered list of employees with their highest salaries.", "input": "", "output": "SELECT e.name, MAX(s.salary) AS Highest_Salary\nFROM employee e INNER JOIN salary s\nON e.id = s.employee_id\nGROUP BY e.name\nORDER BY Highest_Salary DESC;"}
{"instruction": "Write a SQL query to get the title and year of the oldest movie in a database.", "input": "", "output": "SELECT title, year \nFROM movies\nORDER BY year ASC \nLIMIT 1;"}
{"instruction": "Create a Java class for representing a student object.", "input": "", "output": "public class Student {\n    private String id;\n    private String name;\n    private int age;\n    \n    public Student(String id, String name, int age) {\n        this.id = id;\n        this.name = name;\n        this.age = age;\n    }\n\n     public String getId() {\n         return id;\n     }\n\n     public void setId(String id) {\n        this.id = id;\n     }\n\n     public String getName() {\n        return name;\n     }\n\n     public void setName(String name) {\n        this.name = name;\n     }\n\n     public int getAge() {\n        return age;\n     }\n\n     public void setAge(int age) {\n        this.age = age;\n     }\n }"}
{"instruction": "Invert the given dictionary.", "input": "Dictionary: {'a': 1, 'b': 2, 'c':3}", "output": "Inverted dictionary: {1: 'a', 2: 'b', 3: 'c'}"}
{"instruction": "Create a function that takes an array as an argument and returns the sum of all the elements in the array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def arraySum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"instruction": "Sum the numbers in the following array and print the result.", "input": "array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "total = 0\nfor row in array:\n    for element in row:\n        total += element\nprint(total)"}
{"instruction": "Write a bash command to view the amount of free disk space on your computer.", "input": "", "output": "df -h"}
{"instruction": "Create code to extract the middle character of a given string.", "input": "string = \"middle\"", "output": "def get_middle_char(string):\n    \"\"\"Returns the middle character of a given string.\"\"\"\n    middle_index = int(len(string) / 2)\n    return string[middle_index]\n\nif __name__ == '__main__':\n    string = \"middle\"\n    print(get_middle_char(string))"}
{"instruction": "Compress the following string using a Huffman algorithm.", "input": "\"aaaaaaaaabccddddee\"", "output": "import heapq\n\ndef huffman_encode(string):\n    freq = {}\n    for c in string:\n        freq[c] = freq.get(c, 0) + 1\n    \n    heap = [[weight, [char, \"\"]] for char, weight in freq.items()]\n    heapq.heapify(heap)\n\n    while len(heap) > 1:\n        low = heapq.heappop(heap)\n        high = heapq.heappop(heap)\n        for pair in low[1:]:\n            pair[1] = '0' + pair[1]\n        for pair in high[1:]:\n            pair[1] = '1' + pair[1]\n        heapq.heappush(heap, [low[0] + high[0]] + low[1:] + high[1:])\n    \n    encoded = \"\"\n    codes = dict()\n    for char, code in heap[0][1:]:    \n        codes[char] = code\n        encoded += code\n\n    return codes, encoded\n\nif __name__ == '__main__':\n    string = \"aaaaaaaaabccddddee\"\n    codes, encoded = huffman_encode(string)\n    print(encoded)"}
{"instruction": "Create an HTML form with one text field and one submit button.", "input": "", "output": "<form>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" name=\"name\" id=\"name\">\n  <input type=\"submit\" value=\"Submit\">\n</form>"}
{"instruction": "Compare two objects and return 0 if the objects are equal, greater than 0 if the first object is larger, \nand less than 0 if the second object is larger.", "input": "Object 1 - [name: John, age: 30]\nObject 2 - [name: Jane, age: 28]", "output": "int compareObjects(Object obj1, Object obj2) {\n    if (obj1.name == obj2.name) {\n        return obj1.age - obj2.age;\n    } \n    else {\n        return obj1.name.compareTo(obj2.name);\n    }\n}"}
{"instruction": "You need to build a function that take a given tree and returns a list containing the data stored at each level.", "input": "1\n        /   \\\n       2     3\n      / \\    /\n     4   5  6", "output": "def traverseTree(node):\n    result = []\n    if node is None:\n        return []\n    else:\n        result.append(node.data)\n        result += traverseTree(node.left)\n        result += traverseTree(node.right)\n    return result"}
{"instruction": "Which CSS style would you use to center align a <div> element?", "input": "", "output": "div {\n  margin: 0 auto;\n}"}
{"instruction": "Use TensorFlow to build a machine learning model for predicting continuous values given a data set of temperature vs electricity consumption.", "input": "", "output": "import tensorflow as tf\nimport matplotlib.pyplot as plt\n\n#Import the dataset\nx = tf.placeholder(tf.float32)\ny = tf.placeholder(tf.float32)\n  \n# Create our model\nmodel = tf.keras.Sequential([tf.keras.layers.Dense(1, input_shape=[1])])\n\n# Compile the model\nmodel.compile(loss='mean_squared_error', optimizer='sgd')\n\n# Fit the model\nmodel.fit(x, y, epochs=10)\n\n# Plot the result\nplt.plot(x, y, 'ro', label='original data')\nplt.plot(x, model.predict(x), label='predicted')\nplt.xlabel('Temperature')\nplt.ylabel('Electricity Consumption')\nplt.legend()\nplt.show()"}
{"instruction": "Access the data present in the given dictionary.", "input": "dictionary = {\n  'name': 'John',\n  'age': 25\n}", "output": "name = dictionary['name'] \nage = dictionary['age']"}
{"instruction": "Demonstrate how to use an if-else block to control the execution sequence of a program.", "input": "", "output": "Using an if-else block to control execution sequence involves using if-else statements to check a given condition. If the condition is true, the code inside the if statement is executed, otherwise, the code inside the else statement is executed. For example, if a variable called \"x\" is declared with a value of 3, the following if-else block will print \"X is 3\": \n\nif(x == 3) {\n   System.out.println(\"X is 3\");\n} else {\n   System.out.println(\"X is not 3\");\n}"}
{"instruction": "Sort the list in reverse order using insertion sort.", "input": "[4, 2, 0, 6, 1, 7, 3]", "output": "def insertion_sort_reverse(arr):\n    \"\"\" Sort the list in reverse order using insertion sort. \"\"\"\n    # Iterate over the list\n    for i in range(1, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n            # Move position back\n            position = position - 1\n        # Insert current value at the position\n        arr[position] = current_value\n    return arr\n\ninsertion_sort_reverse([4, 2, 0, 6, 1, 7, 3]) # Outputs[7, 6, 4, 3, 2, 1, 0]"}
{"instruction": "Develop a function that converts an array of real numbers to its nearest integer values.", "input": "Array: [3.5, 4.7, 7.9]", "output": "def to_nearest_int(real_num_list):\n    return [round(x) for x in real_num_list] \n\nto_nearest_int([3.5,4.7,7.9])\n\nResult: [4, 5, 8]"}
{"instruction": "Create an algorithm to calculate the Fibonacci series up to n numbers where n is a given number.", "input": "", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b"}
{"instruction": "Generate a function in Java to calculate the minimum of two values", "input": "", "output": "public int minValue(int a, int b) { \n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n}"}
{"instruction": "Find all the string literals in a given C++ program.", "input": "#include <iostream>\nint main(){\n std::cout << \"Hello World!\" << std::endl;\n return 0;\n}", "output": "\"Hello World!\""}
{"instruction": "Write a line of code to input 10 numbers from the user.", "input": "", "output": "a = list(map(int, input(\"Enter 10 numbers: \").split()))"}
{"instruction": "Write a Regex expression to match a string containing the words \"hello\" and \"world\".", "input": "", "output": "\\bhello\\b.*\\bworld\\b"}
{"instruction": "Create an endpoint in Express.js which prints out the request path when hit by a POST request.", "input": "", "output": "app.post(\"/\", (req, res) => {\n    console.log(\"Request path: \" + req.path);\n    res.send(\"\");\n});"}
{"instruction": "Find the number at the given index in an array.", "input": "array = [1,2,3,4,5], index = 3", "output": "def find_number(arr, index):\n  return arr[index]"}
{"instruction": "Create a Flask application to redirect the user to a given URL when the user input is valid.", "input": "", "output": "from flask import Flask, redirect, request\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        if request.form['userInput']:\n            url = 'https://www.example.com'\n            return redirect(url)\n    return '''\n    <form method=\"POST\">\n        <input type=\"text\" name=\"userInput\" placeholder=\"Type something..\" />\n        <input type=\"submit\" value=\"Submit\" />\n    </form>\n    '''\n\nif __name__ == \"__main__\":\n    app.run()"}
{"instruction": "Develop a program in Swift to check if three sides form a valid triangle", "input": "", "output": "import Foundation\n\nfunc isTriangle(sideA: Int, sideB: Int, sideC: Int) -> Bool {\n    let sides = [sideA, sideB, sideC].sorted()\n  \n    return sides[2] < sides[1] + sides[0]\n}\n\n// Usage\nprint(isTriangle(sideA: 3, sideB: 4, sideC: 6) // Output: true\nprint(isTriangle(sideA: 3, sideB: 9, sideC: 10) // Output: false"}
{"instruction": "Find the maximum among three integers.", "input": "widget_1 = 8\nwidget_2 = 4\nwidget_3 = 12", "output": "maximum = max(widget_1, widget_2, widget_3)"}
{"instruction": "Print out the 5th number of the Fibonacci sequence.", "input": "", "output": "5"}
{"instruction": "Write a shell script to create a directory with a name \"mydir\" under the home directory.", "input": "", "output": "#!/bin/sh\n\n# Create a directory with name \"mydir\"\nmkdir ~/mydir"}
{"instruction": "Read the provided code and determine whether it is using object-oriented programming or not. Output true if it is and false if it is not.", "input": "function displayName(name) {\n  console.log(name);\n}", "output": "false"}
{"instruction": "Design a function to convert Fahrenheit to Celsius in Python.", "input": "", "output": "def fahrenheit_to_celsius(f):\n    celsius = (f - 32) * 5/9\n    return celsius"}
{"instruction": "Write a function in Java to split a string into an array of substrings.", "input": "", "output": "public static String[] splitString(String s, String regex) \n{ \n    return s.split(regex); \n}"}
{"instruction": "Create a function to append a new element to a list.", "input": "", "output": "def append_list(my_list, new_element):\n    my_list.append(new_element)\n    return my_list"}
{"instruction": "Write a script for reversing the order of alphabets in a string in Python.", "input": "", "output": "def reverseAlphabets(string): \n    string = ''.join(reversed(string)) \n    return string \n \nstring = \"string\"\nprint(reverseAlphabets(string)) # Output: gnirts"}
{"instruction": "Write a SQL query to output the names of people who have visited the website more than 5 times in the last week.", "input": "", "output": "SELECT *\nFROM tbl_users\nWHERE visits > 5 \nAND create_date > DATE_SUB(NOW(), INTERVAL 1 WEEK);"}
{"instruction": "Reduce the 3-dimensional numpy array to a 2-dimensional numpy array.", "input": "", "output": "import numpy as np\n\na_3d_array = np.array([[[1,2], [3,4]], [[5,6], [7,8]]])\n\na_2d_array = a_3d_array.reshape(4,2)"}
{"instruction": "Write a sql query that takes the maximum of a particular column", "input": "Table: employees\nColumns: name, salary", "output": "SELECT MAX(salary) FROM employees;"}
{"instruction": "Create a list comprehension to extract unique characters from a string.", "input": "string = \"Hello World\"", "output": "unique_characters = [char for char in string if string.count(char) == 1]\nprint(unique_characters)"}
{"instruction": "Create a function that takes two strings as input and returns true if the characters in one of the string appear in order in the other string.", "input": "mystring isthis", "output": "\"\"\"\nCreate a function that takes two strings as input and returns true if the characters in one of the string appear in order in the other string\n\"\"\"\ndef is_substring(str1, str2):\n  i = 0\n  for char in str2:\n    if char == str1[i]:\n      i += 1\n    if i == len(str1):\n      return True\n  return False\n\nif __name__ == '__main__':\n    print(is_substring('mystring', 'isthis')) # True"}
{"instruction": "Find all instances of the given symbol in the text.", "input": "text = \"The company has a $1 billion budget\"\nsymbol = \"$\"", "output": "The symbol \"$\" occurs 1 time in the given text."}
{"instruction": "Fix the logic of the function to print out the element in the array.", "input": "let nums = [1, 2, 3, 4];", "output": "let nums = [1, 2, 3, 4];\n\nfunction printArrElement(arr){\n    for(let i = 0; i < arr.length; i++){\n        console.log(arr[i]);\n    } \n}\n\nprintArrElement(nums);"}
{"instruction": "Update the dictionary values using the same keys.", "input": "my_dict = {\"key1\": 3, \"key2\": 6}", "output": "my_dict.update({\"key1\": 4, \"key2\": 8})"}
{"instruction": "Create a SQL query to calculate the count of each type of book in a library.", "input": "Noinput", "output": "SELECT books.type, COUNT(*) AS book_count\nFROM books\nGROUP BY books.type;"}
{"instruction": "Create a shell script that prints out the day of the week based on the current day.", "input": "", "output": "#!/bin/bash\n \ntoday=$(date +\"%A\")\n \necho \"Today is $today\""}
{"instruction": "Write a Python statement to print out the common items between two lists.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6 , 8]", "output": "for i in list1:\n  if i in list2:\n    print(i)"}
{"instruction": "Generate Delphi code to count the number of times a specific character occurs in a given sentence.", "input": "sentence = \"coding is fun\" / character = 'o'", "output": "function CountCharacter(sentence: string, character : char) : integer;\nvar\n    i : integer;\n    count : integer;\nbegin\n    count := 0;\n    for i := 1 to Length(sentence) do\n\tbegin\n\t\tif sentence[i] = character then\n\t\tbegin\n\t\t\tcount := count + 1;\n\t\tend;\n\tend;\n\tresult := count;\nend;"}
{"instruction": "Write a function that takes two lists as parameters, and returns a third list, containing the elements that occur on both the given lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 5, 6]", "output": "def common_elements(lst1, lst2):\n    common = []\n    for i in range(len(lst1)):\n        if lst1[i] in lst2:\n            common.append(lst1[i])\n    return common\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [2, 3, 4, 5, 6]\n    print(common_elements(list1, list2))"}
{"instruction": "Write an SQL query to select all rows from the table \"customers\" that have the same age as the given customer.", "input": "customer = (\"John Smith\", 32)", "output": "SELECT *\nFROM customers\nWHERE age = 32"}
{"instruction": "Create a for loop in Python to print all elements in a given numpy array.", "input": "import numpy as np \nmyArray = np.array([1, 2, 3, 4])", "output": "for element in myArray:\n print(element)"}
{"instruction": "How would you use Recursion to solve the Fibonacci Sequence in Python?", "input": "", "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n    \nprint(fibonacci(10))"}
{"instruction": "Modify the code so that it will print out \"Hello World!\"", "input": "print(\"Hello\")", "output": "print(\"Hello World!\")"}
{"instruction": "Create a JavaScript code to accept a number and check if it is a prime number.", "input": "", "output": "function is_prime(num) {\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"instruction": "Formulate a SQL query to determine the name of the product with the highest price.", "input": "", "output": "SELECT product_name \nFROM product_table \nWHERE price = (SELECT MAX(price) FROM product_table);"}
{"instruction": "Preprocess a natural language text for text classification.", "input": "Text: \u201cThe food I ate yesterday was really amazing. I loved the entire experience.\u201d", "output": "text = \"The food I ate yesterday was really amazing. I loved the entire experience.\"\n \n# lowercase \ntext = text.lower() \n\n# remove punctuation \ntext = re.sub(r'[^\\w\\s]','',text) \n\n# remove digits \ntext = re.sub(r'\\d+','',text) \n\n# Tokenization \ntokens = word_tokenize(text) \n\n# Stopword removal \nfiltered_words = [word for word in tokens if word not in stopwords.words('english')] \n\n# Lemmatization\nlemmatizer = WordNetLemmatizer() \nlemmatized_word = [lemmatizer.lemmatize(word) for word in filtered_words] \n\nprint(lemmatized_word)"}
{"instruction": "Given two strings, find the longest common substring between them.", "input": "s1 = \"Hello, world!\"\ns2 = \"world, goodbye!\"", "output": "def longest_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ns1 = \"Hello, world!\"\ns2 = \"world, goodbye!\"\nprint(longest_substring(s1, s2))\n\n# Output: world"}
{"instruction": "Explain the process of linear search in a few sentences.", "input": "", "output": "Linear search is a technique for searching for an element in a list by repeatedly checking every element until a match is found or the end of the list is reached. It is typically implemented as a loop, where each element is compared to the search key until a match is found, or until all the elements have been searched."}
{"instruction": "Convert the string \"Hello World\" to all uppercase in JAVA.", "input": "String str = \"Hello World\";", "output": "String strUpper = str.toUpperCase();\n\nSystem.out.println(strUpper); // Prints: HELLO WORLD"}
{"instruction": "Create a basic HTML structure with a table to display a list of cities and their population.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Cities and Population</title>\n</head>\n<body>\n <h1>Cities and Population</h1>\n <table>\n  <thead>\n    <tr>\n      <th>City</th>\n      <th>Population</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Insert City Name</td>\n      <td>Insert Population</td>\n    </tr>\n  </tbody>\n </table>\n</body>\n</html>"}
{"instruction": "Output the name of the variable type in the following expression.", "input": "Expression: 5 + 6j", "output": "complex"}
{"instruction": "Create a Java program that takes a list of integers as an argument and computes the longest increasing subsequence.", "input": "[8, 10, 1, 4, 15, 6, 7]", "output": "public class LongestIncreasingSubsequence {\n  \n    public static int longestSubsequence (int[] nums) {\n        // Base case\n        if (nums.length == 0) {\n            return 0;\n        }\n \n        int[] dp = new int[nums.length];\n        dp[0] = 1;\n        int maxLength = 1;\n \n        for (int i=1; i < nums.length; i++) {\n            int temp = 0;\n            for (int j=0; j < i; j++) {\n                if (nums[j] < nums[i]) {\n                    temp = Math.max(dp[j], temp);\n                }\n            }\n \n            dp[i] = temp + 1;\n            maxLength = Math.max(dp[i], maxLength);\n        }\n \n        return maxLength;\n    }\n}"}
{"instruction": "Design an algorithm to compute the number of trailing zeroes in a factorial number.", "input": "", "output": "def count_trailing_zeroes(factorial_number):\n    \n\u00a0 \u00a0 # Initialize count \n\u00a0 \u00a0 count = 0\n\n\u00a0 \u00a0 # Keep dividing n by powers of 5 and update count\n\u00a0 \u00a0 i = 5\n\u00a0 \u00a0 while (factorial_number/i>=1):\n\u00a0 \u00a0 \u00a0 \u00a0 count += int(factorial_number/i)\n\u00a0 \u00a0 \u00a0 \u00a0 i *= 5\n\u00a0 \u00a0 \u00a0 \u00a0 \n\u00a0 \u00a0 return int(count)\n\nif __name__ == \"__main__\":\n    factorial_number = 12\n    print(count_trailing_zeroes(factorial_number))"}
{"instruction": "Build a function to identify a duplicate element in a list", "input": "list = [2,4,8,7,2,5]", "output": "def find_duplicate(list):\n\tvisited = set()\n\tfor num in list:\n\t\tif num in visited:\n\t\t\treturn num\n\t\telse:\n\t\t\tvisited.add(num)\n\treturn None\n\nlist = [2,4,8,7,2,5]\nprint(find_duplicate(list)) # Output: 2"}
{"instruction": "Create a C# class named \"Car\" that models a car.", "input": "", "output": "class Car {\n    private string make;\n    private string model;\n    private int year;\n\n    public Car(string make, string model, int year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n    }\n\n    public string getMake() {\n        return this.make;\n    }\n\n    public string getModel() {\n        return this.model;\n    }\n\n    public int getYear() {\n        return this.year;\n    }\n\n    public void setMake(string make) {\n        this.make = make;\n    }\n\n    public void setModel(string model) {\n        this.model = model;\n    }\n\n    public void setYear(int year) {\n        this.year = year;\n    }\n\n}"}
{"instruction": "Suggest a way of sorting an array of integers A in descending order.", "input": "A = [4, 7, 2, 9, 6];", "output": "A.sort(reverse=True);"}
{"instruction": "Write a JavaScript code snippet to limit the maximum length a user can enter in an input field.", "input": "", "output": "document.getElementById('inputField').maxLength = \"20\";"}
{"instruction": "Explain the purpose of the following CSS selector.", "input": ".main a", "output": "The purpose of the CSS selector \".main a\" is to select all links (anchor tags, \"a\") that are descendants of the element with class name \"main\"."}
{"instruction": "Using the input, write a function that prints out the Nth Fibonacci number.", "input": "", "output": "def Fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n == 0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n == 1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)"}
{"instruction": "Write a regular expression pattern to match a string starting with 'hello' and with two numbers after it.", "input": "", "output": "^hello[0-9]{2}$"}
{"instruction": "Write a python program to convert a number from base 10 to base 8.", "input": "", "output": "def convert_base_10_to_base_8(number):\n   binary_number = bin(number)[2:]\n   octal_number = oct(int(binary_number, 2))[2:]\n   return octal_number"}
{"instruction": "Write a function to calculate the largest possible number from the given list of integers.", "input": "[1, 8, 4, 12, 7]", "output": "84127"}
{"instruction": "Edit the code so that it can run in JavaScript async/await instead of Promise", "input": "const myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"Success!\");\n  }, 1000);\n});\n\nmyPromise.then(data => {\n  console.log(data);\n});", "output": "async function myAsync() {\n  const response = await new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(\"Success!\");\n    }, 1000);\n  });\n  console.log(response);\n}\n\nmyAsync(); // Success!"}
{"instruction": "Create a function to print a table using a given dictionary.", "input": "example_dict = {\n    'Name': ['John', 'Stella', 'Daniel'], \n    'Age': [20, 23, 19]\n}", "output": "def print_table(dictionary):\n    \"\"\"Prints a table from a dictionary of lists.\"\"\"\n    # retrieve the lists\n    names = dictionary['Name']\n    ages = dictionary['Age']\n\n    # print the table\n    print('\\tName\\tAge')\n    print('-' * 20)\n    for i, name in enumerate(names):\n        age = ages[i]\n        print(f'\\t{name}\\t{age}')"}
{"instruction": "Write a function which takes a list of integers and returns an integer which is the product of all the integers in the list.", "input": "", "output": "def product_of_list(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product"}
{"instruction": "Create a TensorFlow 2.0 program that takes a 3D array and normalizes the values by dividing each element by the sum of all elements in the array.", "input": "", "output": "import numpy as np \nimport tensorflow as tf\n\n# Function to normalize a 3D array  \n# by dividing each element by the sum of all elements \ndef normalize3d(arr): \n   \n    # Shape of the array \n    m, n, o = arr.shape\n   \n    # Calculating sum \n    sum_ = np.sum(arr) \n      \n    # Initializing the output array \n    output = np.empty_like(arr) \n      \n    # calculating the normalized value \n    # and storing in output array \n    for i in range(m): \n        for j in range(n): \n            for k in range(o): \n                    output[i][j][k] = arr[i][j][k]/sum_ \n                      \n    # returning the normalized array \n    return output \n\n# Initializing the array\narr = np.random.randint(1, 10, (2, 2, 4))\n\n# Using tensorflow method\noutput = tf.expand_dims(tf.constant(arr, dtype=tf.float32), axis=-1) / tf.math.reduce_sum(tf.constant(arr))\n\n# Printing the normalized array using both methods\nprint(normalize3d(arr))\nprint(output)"}
{"instruction": "Write a SQL query to list all unique departments from the employee table.", "input": "", "output": "SELECT DISTINCT department\nFROM employee"}
{"instruction": "Print all powers of 2 less than or equal to n.", "input": "n = 10", "output": "def power_of_2(n): \n    res = []\n    for i in range(n+1):\n        if i & (i-1) == 0:\n            res.append(i)\n        \n    return res"}
{"instruction": "Create a function in JavaScript to sum two numbers.", "input": "", "output": "function addNumbers(a, b) {\n  return a + b;\n}"}
{"instruction": "Write a CSS rule to set a blue color for all text elements.", "input": "", "output": "* {\n  color: #0000ff;\n}"}
{"instruction": "Define a command line application that prints \u201cHello, world.\u201d", "input": "", "output": "import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--print_hello\", help=\"print hello, world\", action=\"store_true\")\n\nif __name__ == \"__main__\":\n    args = parser.parse_args()\n    \n    if args.print_hello:\n       print(\"Hello, world.\")"}
{"instruction": "Generate a correct C# code to randomly generate a 5 letter string", "input": "", "output": "string chs = \"abcdefghijklmnopqrstuvwxyz\";\nstring RandomString = \"\";\nRandom rd = new Random();\nfor (int i = 0; i < 5; i++)\n{\nRandomString += chs[rd.Next(0,26)];\n}\nConsole.WriteLine(RandomString);"}
{"instruction": "Create a while loop that prints all the letters of the alphabet.", "input": "", "output": "a = 'a'\nwhile a <= 'z':\n    print(a)\n    a = chr(ord(a)+1)"}
{"instruction": "Write a PHP function to describe a variable type given the value.", "input": "value: \"Hello\"", "output": "function describe_variable_type($value) \n{ \n    if(is_int($value)) \n        return 'integer'; \n    elseif(is_float($value)) \n        return 'float'; \n    elseif(is_bool($value)) \n        return 'boolean'; \n    elseif(is_string($value)) \n        return 'string'; \n    else \n        return 'unknown'; \n}"}
{"instruction": "Use HTML and CSS to format a page with three columns, two of which contain two paragraphs each and the last containing a list of 10 items.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>3 Column Layout</title>\n  <style>\n    body {\n      width: 1000px;\n      margin: 0 auto;\n    }\n    .column-left {\n      float: left;\n      width: 33%;\n    }\n    .column-center {\n      float: left;\n      width: 33%;\n    }\n    .column-right {\n      float: left;\n      width: 33%;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"column-left\">\n    <p>Paragraph 1</p>\n    <p>Paragraph 2</p>\n  </div>\n  <div class=\"column-center\">\n    <p>Paragraph 3</p>\n    <p>Paragraph 4</p>\n  </div>\n  <div class=\"column-right\">\n    <ul>\n      <li>Item 1</li>\n      <li>Item 2</li>\n      <li>Item 3</li>\n      <li>Item 4</li>\n      <li>Item 5</li>\n      <li>Item 6</li>\n      <li>Item 7</li>\n      <li>Item 8</li>\n      <li>Item 9</li>\n      <li>Item 10</li>\n    </ul>\n  </div>\n</body>\n</html>"}
{"instruction": "Write a function in JavaScript that takes the two given arrays, A and B, and merges them into a single array.", "input": "let A = [1, 2, 3];\nlet B = [4, 5, 6];", "output": "function mergeArrays(A, B) {\n  let merged = [];\n  let indexA = 0;\n  let indexB = 0;\n  while (indexA < A.length && indexB < B.length) {\n    merged.push(A[indexA], B[indexB]);\n    indexA++;\n    indexB++;\n  }\n  if (indexA < A.length) {\n    for (let i=indexA; i < A.length; i++) {\n      merged.push(A[i]);\n    }\n  }\n  if (indexB < B.length) {\n    for (let i=indexB; i < B.length; i++) {\n      merged.push(B[i]);\n    }\n  }\n  return merged;\n}"}
{"instruction": "Write a code in SQL to create a database table tbl_Users which contains two columns 'name' and 'age'.", "input": "", "output": "CREATE TABLE tbl_Users(\n    name VARCHAR(255),\n    age INTEGER\n);"}
{"instruction": "Create a Python loop that iterates for 10 times.", "input": "", "output": "for i in range(10):\n    ..."}
{"instruction": "Write a Python program to read a list of numbers and print them as a single string without any space.", "input": "[34, 32, 67, 85]", "output": "my_list = [34, 32, 67, 85] \n  \n# using join() \nprint(''.join(str(n) for n in my_list))"}
{"instruction": "Write a Python code that takes a string and replace all the non-alphanumeric characters with a given character.", "input": "string = 'Hello, world!'\ncharacter = '#'", "output": "import re\n\ndef replace_non_alphanum(string, character):\n    return re.sub(r'\\W', character, string)\n\nstring = 'Hello, world!'\ncharacter = '#'\n\nprint(replace_non_alphanum(string, character))"}
{"instruction": "Find the intersection of two sorted arrays in Java.", "input": "arr1=[1, 2, 4, 5, 6]\narr2=[2, 3, 5, 7]", "output": "public static int[] intersection(int[] arr1, int[] arr2) \n{ \n    // Initialise array to store intersection \n    int[] result = new int[arr1.length]; \n  \n    // Initialise two index in both array \n    int i = 0, j = 0; \n  \n    // Initially set intersection index \n    int k = 0; \n  \n    // Sort both array \n    Arrays.sort(arr1); \n    Arrays.sort(arr2); \n  \n    // Iterate over both array and store intersection \n    // in array result \n    while (i < arr1.length && j < arr2.length)  \n    { \n        // If both current element are same \n        if (arr1[i] == arr2[j])  \n        { \n            // Store it in result array \n            result[k++] = arr1[i++]; \n            j++; \n        } \n        // If first array current element is smaller \n        else if (arr1[i] < arr2[j]) \n            i++; \n        // If second array current element is smaller \n        else\n            j++; \n    } \n  \n    // return the result array \n    return Arrays.copyOfRange(result, 0, k); \n}"}
{"instruction": "Append a string \"Welcome to the party\" at the end of the provided array.", "input": "words = [\"Hello\", \"there\"]", "output": "words = [\"Hello\", \"there\", \"Welcome to the party\"]"}
{"instruction": "Write an R function that determines the average value of an integer array.", "input": "", "output": "average <- function(numbers) {\n  sum <- 0\n  for (i in numbers) {\n    sum <- sum + i\n  }\n  return(sum/length(numbers))\n}"}
{"instruction": "Edit the following HTML code to add an additional radio button with the label \"orange\".", "input": "<input type=\"radio\" name=\"fruit\" value=\"apple\"> Apple<br>\n<input type=\"radio\" name=\"fruit\" value=\"banana\"> Banana", "output": "<input type=\"radio\" name=\"fruit\" value=\"apple\"> Apple<br>\n<input type=\"radio\" name=\"fruit\" value=\"banana\"> Banana<br>\n<input type=\"radio\" name=\"fruit\" value=\"orange\"> Orange"}
{"instruction": "Create an HTML structure that mimics the mockup given below.\n\nMockup: \n\nheader\n| ____ \n|     |\n|     |\n|     |\n|     |\n|-----|", "input": "", "output": "<header>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n</header>"}
{"instruction": "Create a class that can be used to filter a given list of numbers using a given condition.", "input": "nums = [3,6,7,2,1,12,14]\ncondition = lambda x: x>5", "output": "class FilterList:\n    def __init__(self, nums, condition):\n        self.nums = nums\n        self.condition = condition\n       \n    def __iter__(self):\n        for num in self.nums:\n            if self.condition(num):\n                yield num"}
{"instruction": "Construct an expression in javascript to reverse a string.", "input": "", "output": "let reverseString = (str) => str.split('').reverse().join('');"}
{"instruction": "Write a SQL query for selecting all the people who were born after January 1st, 1960.", "input": "", "output": "SELECT * FROM People WHERE BirthDate > '1960-01-01';"}
{"instruction": "Create a variable to store the text \"Python is a programming language\" and then print it.", "input": "", "output": "text = \"Python is a programming language\"\nprint(text)"}
{"instruction": "Write a JavaScript function to greet a user, given the user's name.", "input": "name = 'John'", "output": "function greetUser(name){\n  return \"Hello, \" + name + \"!\";\n}"}
{"instruction": "Write CSS code to make the background of the page purple with a font style of italicized.", "input": "", "output": "body {\n  background-color: purple;\n  font-style: italic;\n}"}
{"instruction": "Create an HTML layout for a website. Make sure the layout has a header, a navigation menu, and a footer.", "input": "", "output": "<!DOCTYPE html> \n<html> \n   <head> \n      <title>Webpage Layout</title> \n   </head> \n  \n   <body> \n   \n      <header> \n         <h1>Header</h1> \n      </header> \n      \n      <nav> \n         <ul> \n            <li>Home</li> \n            <li>About</li> \n            <li>Contact</li> \n            <li>FAQ</li> \n         </ul> \n      </nav> \n      \n      <footer> \n         <p>Footer</p> \n      </footer> \n   \n   </body> \n</html>"}
{"instruction": "Rewrite the following function so that it returns a tuple instead of two separate values.", "input": "def random_arr(arr):\n    idx = random.randint(0,len(arr)-1)\n    return arr[idx], idx", "output": "def random_arr(arr):\n    idx = random.randint(0, len(arr)-1)\n    return (arr[idx], idx)"}
{"instruction": "Add styling to the HTML anchor tag.", "input": "<a href=\"index.html\">Home</a>", "output": "<a style=\"color: blue; font-weight: bold\" href=\"index.html\">Home</a>"}
{"instruction": "Using JavaScript, create an algorithm to check if an array of numbers is sorted in ascending order.", "input": "", "output": "function isSortedAscending(arr) {\n    for (let i = 0; i < (arr.length - 1); i++) {\n        if (arr[i] > arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"instruction": "Develop a C# function to check if a given number is Armstrong or not. An Armstrong number is one which is equal to the sum of its digits raised to the power of the number of digits.", "input": "", "output": "static bool IsArmstrong(int num)\n{\n  int origNum = num;\n  int sum = 0;\n  int digits = 0;\n\n  while (num != 0)\n  {\n    digits++;\n    num /= 10;\n  }\n  num = origNum;\n  while (num != 0)\n  {\n    sum +=Math.Pow(num % 10, digits);\n    num /= 10;\n  }\n\n  if (sum== origNum)\n     return true;\n\n  return false;\n}"}
{"instruction": "What are the benefits of abstract classes in Java?", "input": "", "output": "Abstract classes in Java provide a way to define and enforce common behavior that is shared between derived classes. They also allow for code reuse as the shared code can be reused by other classes. Furthermore, with the help of abstract classes, one can create a structure for developers to follow and provide a standard for them to write code. This can lead to improved code quality by enforcing certain rules and standards."}
{"instruction": "Suggest a design pattern to solve the following problem", "input": "A system needs to access different types of data from multiple data sources.", "output": "A good design pattern for solving this problem is the Adapter Pattern. This pattern allows the adapter to abstract away the different types of data sources and provide an interface for accessing the data from a single source. With this pattern, the system can easily access different types of data from multiple sources without having to handle the different data sources directly."}
{"instruction": "Create a function in Python that takes as arguments two strings and returns a boolean if both strings are equal or not.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "def is_equal(str1, str2):\n    if str1 == str2:\n        return True\n    else:\n        return False"}
{"instruction": "Write a SQL clause to get all the records from a table if the value in each column is greater than 5.", "input": "", "output": "SELECT * FROM table_name WHERE col1 > 5 AND col2 > 5 AND col3 > 5 AND ...;"}
{"instruction": "Create an HTML form with 3 input boxes to get user name, email, and phone number.", "input": "", "output": "<form action=\"\" method=\"post\">\n  <div>\n    <label>Name:</label>\n    <input type=\"text\" name=\"name\" />\n  </div>\n  <div>\n    <label>Email:</label>\n    <input type=\"email\" name=\"email\" />\n  </div>\n  <div>\n    <label>Phone Number:</label>\n    <input type=\"text\" name=\"phone\" />\n  </div>\n  <div>\n    <button type=\"submit\">Submit</button>\n  </div>\n</form>"}
{"instruction": "Modify the code below to make it a one-liner", "input": "# Initialize a variable\nsum = 0\n\n# Iterate over numbers from 1 to 10\nfor i in range(1, 11):\n    # Add number to sum\n    sum = sum + i\n\n# Print sum\nprint(sum)", "output": "print(sum([i for i in range(1, 11)]))"}
{"instruction": "Convert the following SQL query into a Java code using JDBC.", "input": "SELECT Employees.Name FROM Employees WHERE Employees.Salary > 50000", "output": "String queryString = \"SELECT Employees.Name FROM Employees WHERE Employees.Salary > ?\";\nPreparedStatement pstmt = conn.prepareStatement(queryString);\npstmt.setDouble(1, 50000);\nResultSet rs = pstmt.executeQuery();\nwhile (rs.next()) {\n    String name = rs.getString(1);\n    // Process the name\n}"}
{"instruction": "Describe how a bubble sort algorithm works.", "input": "", "output": "Bubble sort is a sorting algorithm in which adjacent elements in an array are compared and swapped if they are not in the correct order. The algorithm steps through the array multiple times, comparing adjacent elements and swapping them if the elements are not in the correct order. This process is repeated until all elements in the array are sorted."}
{"instruction": "Design a C++ program that prints out a Fibonacci series of numbers up to 20 elements.", "input": "", "output": "#include <iostream> \nusing namespace std; \n\nint main() \n{ \n\tint ele, i, number[20]; \n\n\t//create the fibonacci series\n\tnumber[0] = 0; \n\tnumber[1] = 1; \n\n\tfor (i = 2; i < 20; i++) \n\t{\n\t\tnumber[i] = number[i-1] + number[i-2]; \n\t} \n\n\t//print the fibonacci series\n\tfor (i = 0; i < 20; i++) \n\t{\n\t\tcout << number[i] << \" \"; \n\t} \n\n\treturn 0; \n}"}
{"instruction": "Create a CSS stylesheet to turn all the h1 tags to a deep purple color.", "input": "", "output": "h1 {\n    color: #4B0082;\n}"}
{"instruction": "Write pseudocode to implement a sorting algorithm using recursion.", "input": "", "output": "Function sort(array, leftIndex, rightIndex):\n  // If leftIndex is greater than or equal to rightIndex, do nothing. \n  If (leftIndex >= rightIndex) : \n      return \n  \n  // Get the middle index\n  middleIndex = (rightIndex + leftIndex) / 2\n  \n  // Sort the left side  \n  sort(array, leftIndex, middleIndex) \n  \n  // Sort the right side \n  sort(array, middleIndex+1, rightIndex) \n  \n  // Merge the sides\n  merge (array, leftIndex, middleIndex, rightIndex)\n  \nFunction merge(array, leftIndex, middleIndex, rightIndex):\n  // Create two temporary arrays;\n  leftArray = [middleIndex - leftIndex + 1] \n  rightArray = [rightIndex - middleIndex]\n  \n  // Copy data from array to the respective arrays  \n  for (i = 0 to middleIndex - leftIndex) : \n      leftArray[i] = array[leftIndex + i] \n  for (j = 0 to rightIndex-middleIndex: j++) \n      rightArray[j] = array[middleIndex + 1 + j] \n  \n  // sort the leftArray \n  sortLeftArray(leftArray) \n  \n  // sort the rightArray \n  sortRightArray(rightArray) \n  \n  // merge the sorted halves \n  i = 0     \n  j = 0    \n  k = leftIndex     \n  while (i < sizeof(leftArray) //&& j < sizeof(rightArray)) \n  { \n      if (leftArray[i] <= rightArray[j]) \n      { \n          array[k] = leftArray[i]; \n          i++; \n      } \n      else\n      { \n          array[k] = rightArray[j]; \n          j++; \n      } \n      k++; \n  } \n  \n  // Copy the remaining elements  \n  while (i < sizeof(leftArray)) : \n  { \n      array[k] = leftArray[i]; \n      i++; \n      k++; \n  } \n  \n  while (j < sizeof(rightArray)) \n  { \n      array[k] = rightArray[j]; \n      j++; \n      k++; \n  }"}
{"instruction": "How to generate a random number between two given numbers in Python?", "input": "", "output": "import random \n\ndef random_number(minimum, maximum): \n    return random.randint(minimum, maximum)"}
{"instruction": "Find the smallest element in a given array.", "input": "[6, 8, 1, 4, 5]", "output": "1"}
{"instruction": "Write an SQL query to find the third highest salary in a table.", "input": "", "output": "SELECT salary \nFROM employee \nORDER BY salary DESC \nLIMIT 2,1;"}
{"instruction": "Create an algorithm for finding the factorial of a number using a for loop.", "input": "", "output": "def factorial(num):\n    final_factorial = 1\n    for i in range(1, num + 1):\n        final_factorial *= i\n    return final_factorial"}
{"instruction": "Create a web page that uses CSS to style a given piece of text.", "input": "", "output": "<html>\n  <head>\n    <style>\n      p {\n        font-size: 16px;\n        font-family: Arial, sans-serif;\n        color: #333;\n      }\n\n      .bold {\n        font-weight: bold;\n      }\n    </style>\n  </head>\n  <body>\n    <p class=\"bold\">Hello World!</p>\n  </body>\n</html>"}
{"instruction": "Create a Javascript object that can generate a random list of numbers between 1 and 10.", "input": "", "output": "let randomGenerator = {\n    getRandomList : function(length) {\n        let randomList = [];\n        for (let i = 0; i < length; i++) {\n            randomList.push(Math.floor(Math.random() * 10) + 1);\n        }\n        return randomList;\n    }\n};"}
{"instruction": "What is an object in object-oriented programming?", "input": "", "output": "In object-oriented programming, an object is a self-contained entity that contains both data and code, which together define and control its behavior. Objects can communicate with one another by sending messages and receiving data in response. Objects are used to represent real-world concepts, such as people, places, and things."}
{"instruction": "Write a JavaScript code to list each item of a given array into a new array in reverse order.", "input": "arr = [1, 2, 3, 4, 5]", "output": "newArr = arr.reverse()\nconsole.log(newArr)"}
{"instruction": "Create a python class called \"Employee\" that contains 3 instance variables.", "input": "", "output": "class Employee:\n    \"\"\"A class for representing an employee\"\"\"\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary"}
{"instruction": "Find the longest common substring between two strings.", "input": "s1 = \"Tangible\"\ns2 = \"Non-Tangible\"", "output": "\"\"\"\nFind the longest common substring between two strings\n\"\"\"\n\ndef longest_common_substring(s1, s2):\n    \"\"\"Find the longest common substring between two strings.\n    \n    Args:\n        s1 (str): The first string.\n        s2 (str): The second string.\n        \n    Returns:\n        str: The longest common substring.\n    \"\"\"\n    max_length = 0\n    longest_substring = \"\"\n    len1, len2 = len(s1), len(s2)\n    for i in range(len1): \n        for j in range(len2):\n            length = 0\n            while i + length < len1 and j + length < len2:\n                if s1[i + length] != s2[j + length]:\n                    break \n                length += 1\n            if length > max_length:\n                max_length = length\n                longest_substring = s1[i : i + length]\n    return longest_substring\n    \nif __name__ == '__main__':\n    s1 = \"Tangible\"\n    s2 = \"Non-Tangible\"\n    print(longest_common_substring(s1, s2))"}
{"instruction": "Explain the differences between the sorting algorithms Insertion Sort and Bubble Sort", "input": "", "output": "Insertion sort and bubble sort are two of the most common sorting algorithms. Insertion sort is based on iterating and swapping through a list to find the right location for each element. Each element is compared to the previous element and swapped if it is out of order. Bubble sort is based on comparing each pair of adjacent elements and swapping them if they are out of order. Insertion sort has a time complexity of O(n^2) in average and worst-case scenarios, while bubble sort has a time complexity of O(n^2) in both. Bubble sort requires fewer comparison compared to insertion sort, however insertion sort requires fewer swaps. Therefore, insertion sort is usually more efficient when sorting a partially sorted list."}
{"instruction": "Use regex to extract the domain from a URL.", "input": "url = 'https://www.example.com/blog/post/1'", "output": "import re\n\ndef extract_domain(url):\n    \"\"\"\n    A function to extract the domain from a URL using regex.\n    Args: \n     url (str): a URL.\n    Returns:\n     domain (str): the domain of the URL.\n    \"\"\"\n    regex = r\"http[s]?://(www\\.)?([^/]+)/.*\"\n    matches = re.search(regex, url)\n    return matches.group(2)\n    \nif __name__ == '__main__':\n    url = 'https://www.example.com/blog/post/1'\n    print(extract_domain(url))"}
{"instruction": "Write a MySQL query to create a database called \"flower_shop\".", "input": "", "output": "CREATE DATABASE flower_shop;"}
{"instruction": "Create a Node.js script that logs a string.", "input": "", "output": "const fs = require('fs');\n\n// Logs the specified string\nfunction logString(str) {\n  console.log(str);\n}\n\nlogString('Log this string');"}
{"instruction": "Design a key-value database with Python for storing course information.", "input": "The database should contain the following fields: Course Name, Course ID, Course Description and Course Instructor.", "output": "import sqlite3\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create table\nc.execute('CREATE TABLE Course (course_name TEXT, course_id TEXT, course_description TEXT, course_instructor TEXT)')\n\n# Save (commit) the changes\nconn.commit()\n\n# Close the connection\nconn.close()"}
{"instruction": "Create a program to create a dictionary with words and their frequencies from a given sentence.", "input": "sentence = \"Python is an easy, powerful language with a simple syntax and high readability\"", "output": "def create_dict(sentence):\n    words = sentence.split()\n    res = {}\n    for word in words:\n        res[word] = words.count(word)\n    return res\n\n# Output\n{'Python': 1, 'is': 1, 'an': 1, 'easy,': 1, 'powerful': 1, 'language': 1, 'with': 1, 'a': 1, 'simple': 1, 'syntax': 1, 'and': 1, 'high': 1, 'readability': 1}"}
{"instruction": "Edit the following Java code snippet to increase efficiency", "input": "public class MyClass {\n    public static void main(String[] args) {\n        int i = 0;\n        while (i < 10) {\n           i++;\n           System.out.println(i);\n        }\n    }\n}", "output": "public class MyClass {\n    public static void main(String[] args) {\n        //Set the counter to 1\n        int i = 1;\n        //Use less than or equal comparison to include 10\n        while (i <= 10) {\n           //short-hand increment\n           i++;\n           System.out.println(i);\n        }\n    }\n}"}
{"instruction": "Find the closest number to given value using a binary search algorithm.", "input": "arr = [2, 4, 7, 10, 11, 12], val = 6", "output": "closest_num = 7  # 10 is the closest number to 6 in the array"}
{"instruction": "Write a JavaScript code snippet to find the sum of the even numbers in a given range using the reduce() method.", "input": "let arr = [1,2,3,4,5,6,7,8,9,10];", "output": "const sumOfEvenNumbers = arr.reduce((acc, curr) => {\n    if (curr % 2 === 0) {\n        return acc + curr;\n    } \n    return acc;\n}, 0);\nconsole.log(sumOfEvenNumbers);"}
{"instruction": "Create a program in Java to check whether the given word is a palindrome or not.", "input": "\"radar\"", "output": "public class Palindrome{ \n    public static boolean checkPalindrome(String str){ \n        int i=0,j=str.length()-1; \n        while(i<j){ \n            if(str.charAt(i) != str.charAt(j)) \n                return false; \n            i++;j--; \n        } \n        return true; \n    } \n}"}
{"instruction": "Train a Naive Bayes model in Python to classify emails into spam and non-spam classes.", "input": "", "output": "# import libraries \nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read in the data \ndata = pd.read_csv('email_data.csv')\n\n# split into training and test data\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.33, random_state=42)\n\n# create vectorizer and transform training data\ncount_vector = CountVectorizer()\ncount_train = count_vector.fit_transform(X_train)\n\n# create and train a Naive Bayes model\nNB_classifier = MultinomialNB()\nNB_classifier.fit(count_train,y_train)\n\n# transform test data\ncount_test = count_vector.transform(X_test)\n\n# predict test labels\npreds = NB_classifier.predict(count_test)"}
{"instruction": "Create a numerical sequence using Ruby code with 4 elements.", "input": "", "output": "[1, 2, 4, 8]"}
{"instruction": "Write an if-else statement in Python to print \"Grater than 10\" if a number is greater than 10, and \"Less than 10\" if a number is less than 10.", "input": "Number: 8", "output": "if 8 > 10:\n  print(\"Grater than 10\")\nelse:\n  print(\"Less than 10\")"}
{"instruction": "Given a string, convert it to upper case.", "input": "String: this string should be in upper case", "output": "THIS STRING SHOULD BE IN UPPER CASE"}
{"instruction": "Can you detect if a given number is even or odd?", "input": "", "output": "def is_even(n):\n    return n % 2 == 0"}
{"instruction": "List all properties of a JavaScript object called ``person``.", "input": "", "output": "The properties of the person object include name, age, height, weight, gender, race, and occupation."}
{"instruction": "Add a function to implement a basic calculator in C++.", "input": "", "output": "#include <iostream>\n\nusing namespace std;\n\nint addition(int a, int b){\n   return (a+b);\n}\n\n// Subtraction function\nint subtraction(int a, int b){\n   return (a-b);\n}\n\n// Multiplication function\nint multiplication(int a, int b){\n   return (a*b);\n}\n\n// Division function\nint division(int a, int b){\n   return (a/b);\n}\n\n// Function to perform basic calculator operations\nint calculate(int a, int b, char c){\n    int result;\n    switch (c){\n       case '+':\n           result = addition(a, b);\n           break;\n       case '-':\n           result = subtraction(a, b);\n           break;\n       case '*':\n           result = multiplication(a, b);\n           break;\n       case '/':\n           result = division(a, b);\n           break;\n       default:\n           break;\n    }\n    return result;\n}\n\nint main(){\n    int x, y;\n    char a;\n    \n    cout << \"Please enter two numbers: \";\n    cin >> x >> y;\n    \n    cout << \"Please enter an operator: \";\n    cin >> a;\n    \n    int result = calculate(x, y, a);\n    cout << \"The result is: \" << result;\n    \n    return 0;\n}"}
{"instruction": "Refactor the following Java code to improve readability and dynamism.", "input": "public class Movies {\n  private int movieCount = 5;\n  private String genre = \"action\";\n \n  public void printMovieDetails() {\n    System.out.println(\"The movie count is \" + movieCount);\n    System.out.println(\"The genre is \" + genre);\n  }\n}", "output": "public class Movies {\n  private int movieCount;\n  private String genre;\n \n  public Movies(int movieCount, String genre) {\n    this.movieCount = movieCount;\n    this.genre = genre;\n  }\n \n  public void printMovieDetails() {\n    System.out.println(\"The movie count is \" + movieCount);\n    System.out.println(\"The genre is \" + genre);\n  }\n}"}
{"instruction": "Write a C++ program to print out the sum of the first 100 integers.", "input": "", "output": "#include <iostream> \nusing namespace std; \n  \nint main() \n{ \n    int i, sum = 0; \n      \n    //Computes the sum \n    for (i = 1; i <= 100; i++) \n    { \n        sum += i; \n    } \n      \n    cout << \"Sum of first 100 natural numbers = \"\n         << sum << endl; \n  \n    return 0; \n}"}
{"instruction": "Write a Python function to calculate the hypotenuse of a right angled triangle given the length of the two sides.", "input": "side1 = 7\nside2 = 5", "output": "import math\ndef calculate_hypotenuse(side1, side2):\n    hypotenuse = math.sqrt(side1**2 + side2**2)\n    return hypotenuse"}
{"instruction": "In Python, create a function that takes 2 integers and returns the maximum number.", "input": "", "output": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b"}
{"instruction": "Design a program that automatically refactors a python code to improve readability and reduce complexity.", "input": "def myfunc():\nx = 1\ny = 5\nreturn x + y", "output": "def myfunc():\n    x = 1\n    y = 5\n    return x + y"}
{"instruction": "Generate a correct c++ program to compute the YTM of a bond", "input": "", "output": "#include <iostream> \n#include <cmath>\n\nusing namespace std; \n\n// Function to calculate bond yield \nfloat calculateYTM(float faceValue, float price,  \n                   int numInterestPayments,  \n                   float couponRate, float MaturityPeriod) \n{ \n    float guess = 0.1, ytm = 0; \n    float a, b; \n  \n    while (ytm != guess) \n    { \n        ytm = guess; \n        a = price; \n  \n        // Calculating the bond price \n        // using the YTM guess \n        for (int i = 0; i < MaturityPeriod; i++) \n            a = a - (faceValue * (couponRate/2) / \n                     (pow((1 + ytm/2), (numInterestPayments/2 - i)))); \n        a = a - (faceValue / (pow((1 + ytm/2),  \n                         (numInterestPayments/2)))); \n        b = MaturityPeriod * (faceValue * (couponRate/2 / \n            (pow((1 + ytm/2), (numInterestPayments/2 - MaturityPeriod)))) + (faceValue/ (pow((1 + ytm/2),  \n            (numInterestPayments/2)))); \n  \n        // calculating YTM using Newton's Method \n        guess = ytm + (a/b); \n    } \n  \n    return guess * 2; \n}"}
{"instruction": "Debug the following code to make it compile properly.", "input": "def addNumbers(num1, num2)\n  return num1 + num2", "output": "def addNumbers(num1, num2):\n  return num1 + num2"}
{"instruction": "Compress a string using Huffman coding in Python.", "input": "String: \"aaabbcc\"", "output": "def get_freq_list(s): \n      \n    # dictionaries are efficient for such a task \n    freq_list = {} \n  \n    for char in s: \n        if char in freq_list.keys(): \n            freq_list[char] += 1\n        else: \n            freq_list[char] = 1\n  \n    return freq_list \n  \ndef create_huffman_tree(freq_list): \n  \n    # create a priority queue \n    # to pop two minimum element each time \n    priority_queue = [] \n    for key in freq_list.keys(): \n        node = Node(key, freq_list[key]) \n        heapq.heappush(priority_queue, node) \n  \n    while len(priority_queue) > 1: \n        left_node = heapq.heappop(priority_queue) \n        right_node = heapq.heappop(priority_queue) \n  \n        new_node = Node(None, \n              left_node.freq + right_node.freq, \n              left_node, \n              right_node) \n        heapq.heappush(priority_queue, new_node) \n  \n    huffman_tree = heapq.heappop(priority_queue) \n    return huffman_tree \n    \ndef compress_string(huffman_tree, symbols): \n  \n    # create a character-code dict\n    code_dict = {} \n    _generate_codes(huffman_tree, '', code_dict) \n  \n    # encode the string \n    encoded_str = '' \n    for char in symbols: \n        encoded_str += code_dict[char] \n  \n    return encoded_str"}
{"instruction": "Write a regular expression to extract the city names from the following string.", "input": "address: #38 number street, new york city, san jose, CA", "output": "import re\n\naddress_string = \"#38 number street, new york city, san jose, CA\"\n\npattern = r'(?:,|^)([\\s\\w]*)(?:,|$)'\n\nresult = re.findall(pattern, address_string)\nprint(result) // ['new york city', 'san jose']"}
{"instruction": "Provide a MySQL query for selecting a record from a table called \"inventory\".", "input": "", "output": "SELECT * FROM inventory WHERE id = 1;"}
{"instruction": "Explain the purpose of the count() method.", "input": "", "output": "The count() method is used to count the number of times a particular item appears in a list. It takes the element as an argument and returns the count of the specified element in the list."}
{"instruction": "Create a Regular Expression that validates a USA phone number", "input": "", "output": "^\\+?1?\\s?\\(?\\d{3}\\)?[\\s\\-]?\\d{3}[\\s\\-]?\\d{4}$"}
{"instruction": "Using the given class, write a constructor that creates an instance with age 10.", "input": "class Person:\n    def __init__(self,age):\n        self.age = age", "output": "class Person:\n    def __init__(self,age=10):\n        self.age = age"}
{"instruction": "Explain the difference between .push(), .pop(), .shift() and .unshift() methods in JavaScript arrays.", "input": "", "output": "The .push() method adds an element to the end of an existing array. It takes a single argument, the element to be added, and returns the new length of the array.\n\nThe .pop() method removes an element from the end of an existing array. It does not take any arguments and returns the element that was removed.\n\nThe .shift() method removes an element from the beginning of an existing array. It does not take any arguments, and returns the element that was removed.\n\nThe .unshift() method adds an element to the beginning of an existing array. It takes a single argument, the element to be added, and returns the new length of the array."}
{"instruction": "Create a function to register a new user using a given username, email and password.", "input": "username: angelina \nemail: angelina@example.com\npassword: abc12345", "output": "\"\"\"\nFunction register: Registers a new user using a given username, email and password\n\"\"\"\n\ndef register(username, email, password):\n    # initialize user database\n    user_db = {}\n    # add user info to database\n    user_db[username] = {\n        'email': email,\n        'password': password\n    }\n    # return user database\n    return user_db\n\nif __name__ == '__main__':\n    username = 'angelina'\n    email = 'angelina@example.com'\n    password = 'abc12345'\n    print(register(username, email, password))"}
{"instruction": "Make a program to determine if the elements of the array are in increasing order", "input": "[3, 5, 7]", "output": "def isIncreasing(arr):\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True"}
{"instruction": "Construct a JavaScript function to reverse the characters of a string.", "input": "", "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}"}
{"instruction": "Develop a query in SQL to display all columns from a table named 'products' with a product price greater than 10.", "input": "", "output": "SELECT * FROM products WHERE price > 10;"}
{"instruction": "Find the smallest positive number which is divisible by both 5 and 7.", "input": "", "output": "The smallest positive number which is divisible by both 5 and 7 is 35."}
{"instruction": "Evaluate this code and output the result.", "input": "x = 5\ny = 7\nz = 8", "output": "x = 5\ny = 7\nz = 8\n\nresult = (x + y) * z\nprint(result)\n\n# Output: 75"}
{"instruction": "Create a class in Java and define two float variables and two float methods.", "input": "", "output": "public class FloatExample {\n    float var1, var2;\n\n    public void setVar1(float a) {\n        var1 = a;\n    }\n\n    public float getVar1() {\n        return var1;\n    }\n\n    public void setVar2(float b) {\n        var2 = b;\n    }\n\n    public float getVar2() {\n        return var2;\n    }\n}"}
{"instruction": "Write a PHP script that creates a MySQL database table with three fields: \"ID\", \"name\", and \"age\".", "input": "", "output": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// sql to create table\n$sql = \"CREATE TABLE MyTable (\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\nname VARCHAR(255) NOT NULL,\nage VARCHAR(255)\n)\";\n\nif ($conn->query($sql) === TRUE) {\n    echo \"Table MyTable created successfully\";\n} else {\n    echo \"Error creating table: \" . $conn->error;\n}\n\n$conn->close();\n?>"}
{"instruction": "How can one improve the performance of a machine learning algorithm?", "input": "", "output": "There are several ways to improve the performance of a machine learning algorithm, such as:\n\n1. Increasing the quality/quantity of training data: Using more data can increase the accuracy of the model and better handle outliers and edge cases. \n\n2. Tuning the model hyperparameters: Adjusting parameters like learning rate, regularization strength can often improve the performance of the algorithm.\n\n3. Feature engineering: You can add or modify features which can not only improve the performance of the model but also allow it to capture different types of relationships among data points.\n\n4. Using better algorithms: Experimenting with different algorithms and techniques can often improve the performance of the model."}
{"instruction": "Create a 3x3 rotation matrix with an angle of 45 degrees.", "input": "", "output": "[[0.7071, -0.7071, 0.0],\n [0.7071, 0.7071, 0.0],\n [0.0, 0.0, 1.0]]"}
{"instruction": "Create an RNN model to classify emails into spam and not spam.", "input": "", "output": "#imports\nimport tensorflow as tf \nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout \n#Model\nmodel = tf.keras.models.Sequential([\n    Embedding(vocab_size, embedding_dim, input_length = max_len),\n    LSTM(128),\n    Dense(64, activation = 'relu'),\n    Dropout(0.25),\n    Dense(1, activation = 'sigmoid')\n])"}
{"instruction": "Generate a Python script that iterates over a list and prints each item.", "input": "list = [1, 2, 3, 4]", "output": "for item in list:\n    print(item)"}
{"instruction": "You are given a string. Remove duplicated characters from the string and return the output.", "input": "string = \"Mississippi\"", "output": "def remove_duplicates(string): \n    new_string = [] \n    for i in string: \n        if i not in new_string: \n            new_string.append(i)    \n    return ''.join(new_string)"}
{"instruction": "Assign the value 2 to the variable x in Java.", "input": "", "output": "int x = 2;"}
{"instruction": "Compute the Fibonacci series up to the following number n.", "input": "", "output": "def fibonacci(n):\n  a = 0 \n  b = 1\n  arr = []\n  arr.append(a)\n  arr.append(b)\n  for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n      arr.append(c)\n  return arr"}
{"instruction": "Given an array of integers, implement insertion sort to sort the array.", "input": "[1, 4, 2, 7, 5]", "output": "def insertion_sort(nums):\n    # iterate over the array\n    for i in range(1, len(nums)):\n        j = i-1\n        # hold element to be inserted\n        temp = nums[i]\n        # shift elements right if greater than element to be inserted\n        while nums[j] > temp and j >= 0: \n            nums[j+1] = nums[j]\n            j -= 1\n        # insert element at the found position\n        nums[j+1] = temp\n    return nums\n\nnums = [1, 4, 2, 7, 5]\nprint(insertion_sort(nums))"}
{"instruction": "Write a PHP code snippet to create an array containing the numbers from 1 to 100.", "input": "", "output": "$arr = range(1, 100);"}
{"instruction": "Use a while loop to iterate over a list of numbers and find the first even number", "input": "numbers = [7, 3, 5, 11, 13]", "output": "# while loop to iterate over list of numbers\ni = 0 \nwhile i < len(numbers):\n    if numbers[i] % 2 == 0:\n        break\n    i += 1\n\n# main program\nif i < len(numbers):\n    print(\"First even number is \", numbers[i])\nelse:\n    print(\"No even numbers found\")"}
{"instruction": "Write a C# code that implements a simple event listener.", "input": "", "output": "using System;\n \npublic class EventListener\n{\n     public delegate void EventListenerHandler(object sender, EventArgs e);\n     public event EventListenerHandler SomeEvent;\n \n     public void OnSomeEvent(EventArgs e)\n     {\n          if (SomeEvent != null)\n          {\n               SomeEvent(this, e);\n          }\n     }\n}"}
{"instruction": "Write a Python script that prints out all of the letters of the alphabet one per line.", "input": "", "output": "for letter in 'abcdefghijklmnopqrstuvwxyz':\n    print(letter)"}
{"instruction": "Use the input to generate a loop in JavaScript to print an increasing count starting from the given number.", "input": "num = 5", "output": "for (let i = num; i < num + 10; i++) {\n    console.log(i);\n}\n\n# Output\n# 5\n# 6\n# 7\n# 8\n# 9\n# 10\n# 11\n# 12\n# 13\n# 14"}
{"instruction": "Write a function to sort a list of integers in non-increasing order", "input": "[9, 6, 7, 4, 3, 5]", "output": "def sort_desc(arr):\n    \"\"\"Sort a list of integers in non-increasing order.\"\"\"\n    return sorted(arr, reverse=True)"}
{"instruction": "Create a code snippet to print the words \"hello world\" three times.", "input": "", "output": "for i in range(3):\n    print(\"hello world\")"}
{"instruction": "Write a code that takes an array of integer as argument and returns the sum of the array elements.", "input": "", "output": "function arraySum(arr) { \n    var sum = 0; \n    for (var i = 0; i < arr.length; i++) \n        sum += arr[i]; \n    return sum; \n}"}
{"instruction": "Identify the type of output for the given C++ statement.", "input": "cout<<\"Hello World\";", "output": "String output."}
{"instruction": "Generate an SQL statement to select employee Id and name from the 'Employee' table", "input": "", "output": "SELECT employee_id, name\nFROM Employee;"}
{"instruction": "Generate a graphical representation of a dataset.", "input": "The following data describes the height of students in grade 8:\n\nX: 155 cm , 159 cm , 166 cm , 165 cm, 186 cm\n\nY: 50 kg , 60 kg , 55 kg, 45 kg , 75 kg", "output": "import matplotlib.pyplot as plt\n\nx_list = [155, 159, 166, 165, 186]\ny_list = [50, 60, 55, 45, 75]\n\nplt.scatter(x_list, y_list )\n\nplt.xlabel(\"Height (cm)\")\nplt.ylabel(\"Weight (kg)\")\nplt.title(\"Height vs Weight of Grade 8 Students\")\n\nplt.show()"}
{"instruction": "Write a function to create a list with all the prime numbers in the range of 0 to 100.", "input": "", "output": "def create_prime_list(upper_limit):\n    prime_list = []\n    for num in range(2,upper_limit+1):\n        flag=0\n        for i in range(2,num):\n            if num % i == 0:\n                flag=1\n        if flag==0:\n            prime_list.append(num)\n    return prime_list"}
{"instruction": "Create a class that represents a circle", "input": "radius = 5.5", "output": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return self.radius * self.radius * 3.14\n\nc = Circle(radius) \nprint(c.area())  # Output: 95.033"}
{"instruction": "Write an SQL query to select the most recent 5 orders for each customer.", "input": "customers: \n\nid  name  city\n1    John  Paris\n2    Adam   London\n3   David  Paris\n4    Mary  Tokyo\n\norders: \n\nid  customer_id   date\n1      1           2020-02-20\n2      1           2020-03-15\n3      2           2020-02-09\n4      2           2020-02-23\n5      3           2020-01-14\n6      3           2020-04-25\n7      4           2019-11-15\n8      4           2019-12-12", "output": "SELECT o.*\nFROM orders o,\n     (SELECT customer_id, MAX(date) as last_date \n      FROM orders\n      GROUP BY customer_id) as last\nWHERE o.customer_id = last.customer_id\nAND o.date  >= (SELECT MAX(date) FROM orders WHERE customer_id = last.customer_id AND date < last.last_date)\nORDER BY o.customer_id, o.date DESC"}
{"instruction": "Write a SQL query to select the first name and last name of all employees whose salary is greater than $50,000.", "input": "", "output": "SELECT first_name, last_name\nFROM employees\nWHERE salary > 50000;"}
{"instruction": "In JavaScript construct a function to obtain the number of digits in an integer", "input": "", "output": "function getNumOfDigits(num) {\n    return num.toString().length;\n}"}
{"instruction": "Write HTML code to create a webpage that has two paragraphs and a header.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Two Paragraphs & a Header</title>\n</head>\n<body>\n  <h1>Header</h1>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n</body>\n</html>"}
{"instruction": "Filter the array based on the given condition and return a new array of elements that satisfy the condition.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [1, 2, 3, 4, 5];\n\nconst filteredArray = arr.filter(item => item % 2 === 0);\n\nconsole.log(filteredArray);\n\n# Output:\n# [2, 4]"}
{"instruction": "Edit the following code to check if the resulting output of the division is an integer.", "input": "a = 15\nb = 4\noutput = a/b", "output": "if b != 0:\n    output = a/b\n    assert output.is_integer(), \"Result of division is not an integer\""}
{"instruction": "Create a class in TypeScript that contains a method that takes two numbers, adds them, and returns the result.", "input": "", "output": "class Math {\n  add(n1: number, n2: number): number {\n    return n1 + n2;\n  }\n}"}
{"instruction": "Design a function to compute n^2-2n.", "input": "", "output": "def calculate_n_squared(n):\n    return n**2 - 2*n"}
{"instruction": "Calculate the factorial of n using a recursive function.", "input": "", "output": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)"}
{"instruction": "Preprocess a given document, removing stopwords and punctuations.", "input": "document = \"Hello! This is a test document for preprocessing\"", "output": "from nltk.corpus import stopwords\nimport string\n\ndef preprocess_document(document):\n    \"\"\"\n    Preprocess a given document, removing stopwords and punctuations.\n\n    Parameters\n    ----------\n    document : str\n        The document to preprocess\n\n    Returns\n    -------\n    clean_word_list : list\n        The preprocessed word list\n    \"\"\"\n    # Split the document into word list\n    word_list = document.split()\n    stopwords_list = stopwords.words('english')\n\n    # Remove punctuation\n    word_list = [word.strip(string.punctuation) for word in word_list]\n    \n    # Remove words with 2 or fewer characters\n    word_list = [word for word in word_list if len(word) > 2]\n\n    # Remove stopwords\n    clean_word_list = [word for word in word_list if word not in stopwords_list]\n\n    return clean_word_list\n\ndocument = \"Hello! This is a test document for preprocessing\"\nprint(preprocess_document(document)) # Outputs ['Hello', 'test', 'document', 'preprocessing']"}
{"instruction": "In Java, write a method that reverses an array of integers.", "input": "", "output": "public static int[] reverseArray(int[] arr) \n{ \n    int[] reversed = new int[arr.length]; \n  \n    int j = 0; \n    for (int i = arr.length - 1; i >= 0; i--) {\n        reversed[j++] = arr[i]; \n    }\n  \n    return reversed; \n}"}
{"instruction": "In C++, create a class called 'Point' that stores a 2D point with x and y coordinates.", "input": "", "output": "class Point {\n private:\n  int x;\n  int y;\n public:\n  Point(int x, int y) : x(x), y(y) {}\n  int getX() const { return x; }\n  int getY() const { return y; }\n};"}
{"instruction": "Compile and execute the following C++ program", "input": "#include <iostream> \nusing namespace std; \n  \nint main() \n{ \n    cout << \"Hello world\" << endl; \n    return 0; \n}", "output": "Hello world"}
{"instruction": "Create an object to store name and age.", "input": "", "output": "An object to store name and age can be created as follows:\n\nlet person = { \n    name: 'John Doe', \n    age: 45\n};"}
{"instruction": "What is the time complexity for this for loop?", "input": "nums = [1,2,3,4,5]\nfor num in nums:\n    print(num)", "output": "The time complexity for this loop is O(n) where n is the length of the list."}
{"instruction": "Print a string in reverse.", "input": "string = \"Hello World!\"", "output": "print(string[::-1])"}
{"instruction": "Create a function that prints all the prime numbers between 1 and a given number.", "input": "", "output": "def print_prime_numbers(upper_limit):\n  prime_numbers_list = []\n  for num in range(2, upper_limit+1):\n   if all(num % i != 0 for i in range(2, num)): \n    prime_numbers_list.append(num)\n  print(\"The prime numbers between 1 and\",upper_limit,\"are:\",prime_numbers_list)"}
{"instruction": "Write a Python program to get the day of week from a given date and time.", "input": "from datetime import datetime\ndate = datetime(2020, 4, 20, 19, 15, 0)", "output": "from datetime import datetime\n\ndef get_day_of_week(date):\n    return date.strftime(\"%A\")"}
{"instruction": "Create a program that takes in two strings and prints out common words", "input": "str1 = \"The quick brown fox\"\nstr2 = \"The brown rabbit\"", "output": "def common_words(str1, str2):\n    l1 = str1.split()\n    l2 = str2.split()\n    result = list(set(l1) & set(l2))\n    return result"}
{"instruction": "Parse the following HTML content and retrieve the values from the key elements.", "input": "<li><a href=\"/home\">Home</a></li>\n<li><a href=\"/about\">About</a></li>", "output": "from bs4 import BeautifulSoup\n\nhtml_data = '''\n<li><a href=\"/home\">Home</a></li>\n<li><a href=\"/about\">About</a></li>\n'''\n\nsoup = BeautifulSoup(html_data, 'lxml')\n\n# Get content from <a> tags \nlinks = soup.find_all('a') \n\n# Retrieve the values from each link\nfor link in links:\n    print(link.get('href'))"}
{"instruction": "What is Naive Bayes classification?", "input": "", "output": "Naive Bayes classification is a supervised machine learning technique used for classification tasks which is based on the Bayes Theorem. It assumes that each input feature is independent of each other, which is called the assumption of \"naive\" Bayes. The algorithm uses prior knowledge of the data set and determines the probability of each class, given the data. Based on these probabilities it then assigns a class to the input, using a decision rule (usually the maximum a posteriori likelihood), to maximize the overall accuracy of the model."}
{"instruction": "Given a list of emails and corresponding info, write a code to keep only the emails and transform the list into a dictionary of emails and corresponding info.", "input": "my_list = [('john@example.com', 'John Smith', '27'), \n           ('sarah@example.com', 'Sarah Jane', '31'), \n           ('paul@example.com', 'Paul Walker', '45')]", "output": "# Create a dictionary of emails and corresponding info \nemail_dict = {email[0]: email[1:] for email in my_list}\n\n# Print the dictionary\nprint(email_dict)"}
{"instruction": "How can you select the first element with class \"test\" using CSS?", "input": "", "output": ".test:first-of-type {\n  // styles here\n}"}
{"instruction": "Change the first character of a given string to uppercase.", "input": "String: \"python\"", "output": "String: \"Python\""}
{"instruction": "Design a program to generate prime numbers between 1 and 50.", "input": "", "output": "# Program to print the prime numbers between 1 and 50\n \nfor num in range(1, 51):\n\n   # prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:  \n           print(num)"}
{"instruction": "For the given HTML page, create an array of all the h2 elements on the page.", "input": "<html>\n    <body>\n        <h1>This is a Heading</h1>\n        <h2>This is a Sub Heading</h2>\n        <h2>This is another Sub Heading</h2>\n    </body>\n</html>", "output": "\"\"\"\nGet an array of all the h2 elements on a page\n\"\"\"\n\nfrom bs4 import BeautifulSoup\n\n# Input HTML\nhtml = \"\"\"\n<html>\n    <body>\n        <h1>This is a Heading</h1>\n        <h2>This is a Sub Heading</h2>\n        <h2>This is another Sub Heading</h2>\n    </body>\n</html>\n\"\"\"\n\n# Parse the HTML and create a beautiful soup document\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Get all h2 elements on the page\nh2_elements = soup.find_all('h2')\n\n# Create an array of h2 elements\nh2_elements_array = [element.text for element in h2_elements]\n\nprint(h2_elements_array)\n\n\"\"\"\nOutput: ['This is a Sub Heading', 'This is another Sub Heading']\n\"\"\""}
{"instruction": "Write a code snipplet that computes the sum of numbers between 1 and 100.", "input": "", "output": "let sum = 0;\nfor(let i = 1; i <= 100; i++) {\n  sum += i;\n}"}
{"instruction": "Write a function in Java to calculate the sum of the even numbers in a given range of integers.", "input": "Start: 10 \nEnd: 20", "output": "// Java Program to calculate the sum of all even \n// numbers in a given range \n\npublic static int sumOfEvenInRange(int n1, int n2) { \n    int sum = 0; \n      \n    // calculating the sum of all even numbers in given range \n    for (int i = n1; i <= n2; i++) { \n        // if num is even then add it \n        if (i % 2 == 0) { \n            sum += i; \n        } \n    } \n    return sum; \n}"}
{"instruction": "Compare two strings and return \"bigger\", \"smaller\" or \"equal\" depending on the lexicographical order.", "input": "string1 = \"zebra\"\nstring2 = \"zeal\"", "output": "def compare_strings(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\n    while i < length:\n        if string1[i] < string2[i]:\n            return 'smaller'\n        elif string1[i] > string2[i]:\n            return 'bigger'\n        i += 1\n    \n    if len(string1) > len(string2):\n        return 'bigger'\n    else:\n        return 'equal'"}
{"instruction": "Create a program to print out all prime numbers below 100.", "input": "", "output": "# Function to print prime numbers \ndef prime_numbers_below_100(): \n    for num in range(2, 100): \n        prime = True\n        for i in range(2, num//2 + 1): \n            if num % i == 0: \n                prime = False\n                break\n        if prime: \n            print(num, end=\" \") \n  \nprint(\"Prime numbers below 100 are:\") \nprime_numbers_below_100()"}
{"instruction": "Create a 2D array with n columns and m rows and fill it with random numbers.", "input": "Rows: 6, Columns: 8", "output": "import random\n\ndef create2DArray(row, col):\n  arr = [[random.randint(1,100) for j in range(col)] for i in range(row)]\n  return arr"}
{"instruction": "Train a classification model to classify the sentiment of the given sentence.", "input": "Sentence: I love this new book!", "output": "\"\"\"\nTrain a classification model to classify the sentiment of the given sentence.\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf\n\n# Create the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim)),\n    tf.keras.layers.Dense(embedding_dim, activation='relu'),\n    tf.keras.layers.Dense(2, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_input_data, train_labels, epochs=num_epochs)\n\n# Make prediction\npred = model.predict([np.array([sentence])])\n\n# Print prediction result\nif pred[0][0] > pred[0][1]:\n  print(\"Negative sentiment\")\nelse:\n  print(\"Positive sentiment\")"}
{"instruction": "Write a script for swapping two variables in Ruby.", "input": "", "output": "x, y = y, x"}
{"instruction": "Write a SQL query to display all products in the database which have not been sold yet.", "input": "", "output": "SELECT * FROM Products WHERE product_id NOT IN (SELECT product_id FROM Sales);"}
{"instruction": "Which keyword is used to define a function in Python?", "input": "", "output": "The keyword used to define a function in Python is \"def\"."}
{"instruction": "Write pseudocode to sort a given list of integers using bubble sort.", "input": "", "output": "# Set a swap flag to true\nswap = true \n# While the flag is true\nwhile swap \n  # Set the swap flag to false\n  swap = false\n  # Iterate through the list\n  for i in range(len(list) - 1):\n    # Swap adjacent element if they are out of order\n    if list[i] > list[i + 1]:\n      temp = list[i]\n      list[i] = list[i + 1]\n      list[i + 1] = temp\n      # Set the flag back to true\n      swap = true"}
{"instruction": "Given a string, write a Python program to remove all special characters from it.", "input": "", "output": "def remove_special_characters(string): \n    final_string = \"\" \n    for character in string: \n        if character.isalnum(): \n            final_string += character \n    return final_string"}
{"instruction": "Convert the following code from imperative style to functional style.", "input": "list = [1,2,3,4,5]\nfor x in list:\n    if x % 2 == 0:\n        print(x)", "output": "list = [1,2,3,4,5]\nevens = list(filter(lambda x: x % 2 == 0, list))\nprint(evens)"}
{"instruction": "Write an HTML page with a header that displays your name.", "input": "", "output": "<html>\n  <head>\n    <title>My webpage</title>\n  </head>\n  <body>\n    <h1>My name is John Smith</h1>\n  </body>\n</html>"}
{"instruction": "Calculate the square root of a number using bisection search.", "input": "number = 9", "output": "low = 0\nhigh = number\nanswer = (high + low) / 2\n#Store the difference between the answer and the number\ndiff = (answer ** 2) - number\n#Loop until the difference is within a very small tolerance\nwhile abs(diff) > 0.00001:\n    if diff > 0:\n        #the answer is too high\n        high = answer\n    else:\n        #the answer is too low\n        low = answer\n    #compute a new answer\n    answer = (high + low) /2\n    #and compute a new diff\n    diff = (answer ** 2) - number\nprint(answer)"}
{"instruction": "Create a MySQL query that returns a list of states in the United States with populations greater than 10 million.", "input": "", "output": "SELECT state\nFROM population_data \nWHERE population > 10000000;"}
{"instruction": "Construct a JSON object to represent the following shoes array.", "input": "[\n    {\n        \"name\": \"Nike Air Zoom\",\n        \"color\": \"Black\",\n        \"size\": 10.5\n    },\n    {\n        \"name\": \"Skechers GoWalk\",\n        \"color\": \"Grey\",\n        \"size\": 11\n    }\n]", "output": "{\n  \"shoes\": [\n    {\n      \"name\": \"Nike Air Zoom\",\n      \"color\": \"Black\",\n      \"size\": 10.5\n    },\n    {\n      \"name\": \"Skechers GoWalk\",\n      \"color\": \"Grey\",\n      \"size\": 11\n    }\n  ]\n}"}
{"instruction": "Construct a network to recognize handwritten digits using a convolutional neural network in TensorFlow.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow import keras \n\n# create a model\nmodel = keras.Sequential()\n\n# add a convolutional layer\nmodel.add(keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)))\n\n# add a max pooling layer\nmodel.add(keras.layers.MaxPool2D((2,2)))\n\n# add a flatten layer\nmodel.add(keras.layers.Flatten())\n\n# add a Dense layer\nmodel.add(keras.layers.Dense(128, activation='relu'))\n\n# add second Dense layer\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\n# compile the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"}
{"instruction": "Edit the program below to print out the square root of a number.", "input": "#include <iostream> \n \nint main() \n{ \n    int number; \n  \n    std::cout << \"Enter an integer: \"; \n    std::cin >> number; \n  \n    // Add code to print square root of the number \n  \n    return 0;\n}", "output": "#include <iostream> \n#include <cmath>\n \nint main() \n{ \n    int number; \n  \n    std::cout << \"Enter an integer: \"; \n    std::cin >> number; \n  \n    // Add code to print square root of the number \n    std::cout << \"Square root of \" << number << \" is: \" << sqrt(number) << std::endl;\n  \n    return 0;\n}"}
{"instruction": "Initialize a new array to 0 of size 10.", "input": "", "output": "arr = [0] * 10"}
{"instruction": "Modify the existing code so it prints out the numbers from 0 to 10 in reverser order.", "input": "for (let i = 0; i < 10; i++) {\n\tconsole.log(i);\n}", "output": "for (let i = 10; i >= 0; i--) {\n\tconsole.log(i);\n}"}
{"instruction": "Write the definition of function to calculate the perimeter of a triangle.", "input": "", "output": "def perimeter(a, b, c):\n    return a + b + c"}
{"instruction": "Code a function that prints out the characters of a string one by one.", "input": "str = \"Hello World!\"", "output": "function printCharByChar(str) {\n    for (let i=0; i<str.length; i++) { \n        console.log(str.charAt(i)); \n    } \n} \nprintCharByChar(str);"}
{"instruction": "Create an array from a given string and sort it in ascending order.", "input": "string = \"cbaefd\"", "output": "string = \"cbaefd\"\narray = list(string)\narray.sort()\nprint(array)"}
{"instruction": "Write a function to remove all duplicate elements in an array.", "input": "data = [1, 2, 3, 2, 4, 5]", "output": "def remove_duplicates(data):\n    \"\"\"Remove all duplicate elements in an array\"\"\"\n    \n    # Initialize an empty list\n    unique_data = []\n\n    # Iterate over the data\n    for i in data:\n        # Check if element is not already in list\n        if i not in unique_data:\n            # If not, then add to list\n            unique_data.append(i)\n    \n    return unique_data\n\nprint(remove_duplicates(data)) # prints [1, 2, 3, 4, 5]"}
{"instruction": "Write a function in C that swaps the first and last value of a given array.", "input": "[1, 2, 3, 4]", "output": "void swapFirstLast(int arr[], int n)\n{\n    int temp = arr[0];\n    arr[0] = arr[n - 1];\n    arr[n - 1] = temp; \n}"}
{"instruction": "Split a given sentence into a list of words.", "input": "\"My favorite color is red\"", "output": "sentence = \"My favorite color is red\"\nwords = sentence.split()"}
{"instruction": "Create a function to sum all the numbers in an array.", "input": "arr = [1, 2, 3, 4]", "output": "def sumList(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nprint(sumList(arr))"}
{"instruction": "Using JavaScript, create an interactive web page that displays a list of strings taken from the user's inputs.", "input": "", "output": "// JavaScript Code\nlet list = [];\nconst addToList = (str) => {\n list.push(str);\n}\n\nconst createList = () => {\nlet html = \"<ul>\\n\";\n for(let i = 0; i < list.length; i++) {\n html += `<li>${list[i]}</li>\\n`;\n }\nhtml += \"</ul>\";\n document.getElementById('list').innerHTML = html;\n}"}
{"instruction": "Create a JavaScript object with two keys \"firstName\" and \"lastName\".", "input": "Ahsan", "output": "let person = {\n    \"firstName\": \"Ahsan\",\n    \"lastName\": \"\"\n}"}
{"instruction": "Create a program in Python which takes any string as an input and prints the number of each of its characters", "input": "hello", "output": "character_count = {'h':1, 'e':1, 'l':2, 'o':1}"}
{"instruction": "Describe the meaning of the variable name \u2018arraySize\u2019 in JavaScript", "input": "", "output": "The variable name arraySize in JavaScript is used to describe the size of an array, that is, the number of elements in the array."}
{"instruction": "Write a Java method to find the index of a given string in an array of strings.", "input": "", "output": "public int findIndexOfString(String[] array, String s) {\n    for (int i=0; i<array.length; i++) {\n        if(array[i].equals(s)) \n            return i;\n    }\n    return -1;\n}"}
{"instruction": "Edit the following Java code to round a number to two decimal places.", "input": "double num = 3.14159;", "output": "double num = 3.14159;\nnum = Math.round(num * 100.0) / 100.0;\nSystem.out.println(num);\n// Output: 3.14"}
{"instruction": "Create a new class named 'Book' with the following fields", "input": "Title, Author, Publisher, ISBN, Price", "output": "public class Book {\n    public string Title { get; set; }\n    public string Author { get; set; }\n    public string Publisher { get; set; }\n    public string ISBN { get; set; }\n    public double Price { get; set; }\n}"}
{"instruction": "Create an AJAX request in JavaScript to retrieve data from the following URL: http://www.example.com/data.", "input": "", "output": "var xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n        //Action to be performed when the document is read;\n    }\n};\nxhttp.open(\"GET\", \"http://www.example.com/data\", true);\nxhttp.send();"}
{"instruction": "Build a TensorFlow model for classification of a 2-D dataset.", "input": "X = [[1, 2], [3, 4], [5, 6]]\nY = [0, 1, 1]", "output": "\"\"\"\nBuild a TensorFlow model for classification of a 2-D dataset.\n\nInput:\nX = [[1, 2], [3, 4], [5, 6]]\nY = [0, 1, 1]\n\nOutput:\nimport tensorflow as tf\n\n# data\nX = tf.constant([[1, 2], [3, 4], [5, 6]], dtype=tf.float32)\nY = tf.constant([0, 1, 1], dtype=tf.float32)\n\n# model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(2, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X, Y, epochs=50, batch_size=3)\n\"\"\""}
{"instruction": "Suggest a Python code to filter a list of numbers so that all even numbers are removed.", "input": "", "output": "numbers = [1, 2, 3, 4, 5, 6, 7, 8]\nnew_list = [num for num in numbers if num % 2 != 0]\nprint(new_list)"}
{"instruction": "Write a css code to put a shadow on all the paragraphs", "input": "", "output": "p {\n    box-shadow: 5px 5px 10px 0 rgba(0,0,0,0.75);\n}"}
{"instruction": "Write a function to extract the digits of a number in an array.", "input": "Number = 4396", "output": "def extract_digits(number): \n   return [int(x) for x in str(number)] \n# Returns [4, 3, 9, 6]"}
{"instruction": "Generate code to create a Numpy array with 3 rows and 4 columns.", "input": "", "output": "import numpy as np \narr = np.array([[0, 1, 2, 3], \n                [4, 5, 6, 7],\n                [8, 9, 10, 11]])"}
{"instruction": "Create a database table to store real estate records.", "input": "", "output": "CREATE TABLE real_estate_records(\n     id INT NOT NULL AUTO_INCREMENT, \n     name VARCHAR(50), \n     address VARCHAR(250), \n     bedrooms INT, \n     bathrooms INT, \n     price DECIMAL(10,2), \n     area INT,\n     PRIMARY KEY(id)\n);"}
{"instruction": "Read the given JSON data and return a list of all the keys.", "input": "{\n  \"name\": \"John\",\n  \"age\": 21,\n  \"isActive\": true\n}", "output": "def get_keys(data): \n  keys = []\n  for key in data:\n    keys.append(key)\n  return keys"}
{"instruction": "Design a response that matches the following JSON format.", "input": "{\n\"response\": \n  { \n    \"data\": \"hello\"\n  }\n}", "output": "{\n\"response\": {\n\"data\": \"hello\",\n\"status\": \"ok\"\n  }\n}"}
{"instruction": "Print a list of numbers from 1 to 10 except for 5 and 6.", "input": "", "output": "for num in range(1, 11):\n    if num != 5 and num != 6:\n        print(num)"}
{"instruction": "Write a JavaScript function that takes a number as an argument and finds the sum of all the numbers in a given range (based on the given number).", "input": "", "output": "function sumOfNumInRange(n) {\n  let total = 0\n  for (let i=1; i<=n; i++) {\n    total += i;\n  }\n  return total;\n}"}
{"instruction": "Given a list of numbers, return the first number that appears an odd number of times.", "input": "arr = [2,4,4,4,2,2,8,4]", "output": "def find_odd_occurrence_num(arr):\n    seen = {}\n    for item in arr:\n        if item not in seen:\n            seen[item] = 1\n        else:\n            seen[item] += 1\n    for item, count in seen.items():\n        if count % 2 != 0:\n            return item\n    return None\n\nfind_odd_occurrence_num(arr) # Returns 8"}
{"instruction": "Write a CSS class that will make the font size of all elements 2 times larger.", "input": "", "output": ".increase-font-size {\n    font-size: 2rem;\n}"}
{"instruction": "Write a SQL query to get the name, age and job title of all employees who are over 35 years old.", "input": "", "output": "SELECT name, age, job_title \nFROM employees \nWHERE age > 35;"}
{"instruction": "Write an algorithm to calculate the maximum subarray sum", "input": "list_of_numbers = [-2, 3, 1, -4]", "output": "def max_subarray_sum(list_of_numbers): \n \n    max_so_far = 0\n    max_ending_here = 0\n \n    for i in range(0,len(list_of_numbers)): \n        max_ending_here = max_ending_here + list_of_numbers[i] \n        if (max_ending_here < 0): \n            max_ending_here = 0\n  \n        elif (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n              \n    return max_so_far"}
{"instruction": "Given an array of integers, write a program to find the longest consecutive sequence.", "input": "[1, 9, 3, 10, 4, 20, 2]", "output": "def longest_consecutive(numbers):\n    longest_sequence = 0\n    numbers_set = set(numbers)\n \n    for num in numbers:\n        if num - 1 not in numbers_set:\n            current_number = num\n            current_sequence = 1\n \n            while current_number + 1 in numbers_set:\n                current_sequence += 1\n                current_number += 1\n \n            longest_sequence = max(longest_sequence, current_sequence)\n \n    return longest_sequence"}
{"instruction": "Create a list of numbers in the range [0, 10) that are divisible by 3.", "input": "", "output": "# Initialize an empty list\nlist_by_3 = []\n\n# Iterate over the range\nfor i in range(0, 10):\n    # Check if the number is divisible by 3    \n    if i % 3 == 0:\n        # Append it to the list\n        list_by_3.append(i)\n\n# Print the list\nprint(list_by_3)"}
{"instruction": "You need to write a program to print out the prime numbers between a given range of numbers.", "input": "start=1 \nend=50", "output": "2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47"}
{"instruction": "What is the best way to test for memory leaks in a C++ program?", "input": "", "output": "The best way to test for memory leaks in a C++ program is to use a memory profiler. Memory profilers can help identify memory leaks by monitoring how much memory is allocated, how often it is allocated, and whether or not the same or similar memory is being allocated multiple times. They can also track how memory is being used, which can reveal potential memory leaks or help in optimizing code."}
{"instruction": "In this C++ program, there is an error. Please identify and fix the mistake.", "input": "int main()\n{\n cout << \"Hello World!\";\n return 0", "output": "int main()\n{\n std::cout << \"Hello World!\" << std::endl;\n return 0;\n}"}
{"instruction": "Discover and remove redundant code from this C++ program.", "input": "#include <iostream>\n\nint main()\n{\n  int a = 3;\n  int b = 3;\n\n  a++;\n  b++;\n  int c = 10;\n  a++;\n  b++;\n\n  std::cout << a << \" \" << b << \" \" << c << std::endl;\n  return 0;\n}", "output": "#include <iostream>\n\nint main()\n{\n  int a = 3;\n  int b = 3;\n\n  a++;\n  b++;\n  int c = 10;\n\n  std::cout << a << \" \" << b << \" \" << c << std::endl;\n  return 0;\n}"}
{"instruction": "Describe the difference between a multidimensional array and a jagged array in C#.", "input": "", "output": "A multidimensional array is an array of arrays, in which all subarrays have the same length and all elements are arranged in tabular form. A jagged array is an array of arrays, in which the subarrays can have different lengths and the elements are arranged in irregular form."}
{"instruction": "Create a program in C# to check if an input string contains a specific character or not.", "input": "input_string = \"Hello World\"\ncharacter = 'l'", "output": "public static bool CheckChar(String input_string, char character)  \n{  \n    bool found = false; \n  \n    foreach (char c in input_string)  \n    {  \n        if (c == character)  \n        {  \n            found = true;  \n            break;  \n        }  \n    }  \n    return found;  \n}  \n  \n// Driver Code \nString input_string = \"Hello World\"; \n  \nchar character = 'l'; \n  \nif (CheckChar(input_string, character)) \n    Console.WriteLine(\"Yes\"); \nelse\n    Console.WriteLine(\"No\");"}
{"instruction": "Write a function that receives an array and removes every odd element from it.", "input": "[1, 2, 3, 4, 5, 6, 7, 8]", "output": "def remove_odd(arr):\n    return [i for i in arr if i % 2 == 0]"}
{"instruction": "Modify the following Java code to reverse a given string.", "input": "public class SimpleStringReverser {\n    public static String reverse(String str) {\n        String result = \"\";", "output": "public class SimpleStringReverser {\n    public static String reverse(String str) {\n        String result = \"\";\n        for(int i = str.length() - 1; i >= 0; i--) {\n            result += str.charAt(i);\n        }\n        return result;\n    }\n}"}
{"instruction": "Edit a JavaScript program to input a number and output its factorial", "input": "let n = 5;", "output": "function factorial(n) { \n    let result = 1; \n    for (let i = 2; i <= n; i++) \n        result *= i; \n    return result; \n} \nconsole.log( factorial(n) );"}
{"instruction": "Write a SQL query to find the names of the people who are enrolled in both Physics and Math classes.", "input": "", "output": "SELECT name\nFROM students \nWHERE enrolled_in = 'Physics'\nAND enrolled_in = 'Math';"}
{"instruction": "Write a Bash script to create a directory", "input": "", "output": "mkdir directory_name"}
{"instruction": "Create a Ruby class for a customer and add attributes for name, age and address.", "input": "", "output": "class Customer\n  attr_accessor :name, :age, :address\n\n  def initialize(name, age, address)\n    @name = name\n    @age = age\n    @address = address\n  end\nend"}
{"instruction": "Write a JavaScript code snippet to display \"Hello World!\" on the webpage.", "input": "", "output": "document.write(\"Hello World!\");"}
{"instruction": "Create a HTML form with three input fields for taking a user's name, email, and address.", "input": "", "output": "<form action=\"\" method=\"post\">\n    <label for=\"name\">Name: </label><br>\n    <input type=\"text\" name=\"name\" id=\"name\"><br><br>\n\n    <label for=\"email\">Email: </label><br>\n    <input type=\"email\" name=\"email\" id=\"email\"><br><br>\n\n    <label for=\"address\">Address: </label><br>\n    <input type=\"text\" name=\"address\" id=\"address\"><br><br>\n\n    <input type=\"submit\" name=\"submit\" value=\"Submit\">\n</form>"}
{"instruction": "Using conditional statements, print out whether a given number is odd or even.", "input": "number = 7", "output": "if(number % 2 == 0){\n  console.log('`number` is even')\n} else {\n  console.log('`number` is odd')\n}"}
{"instruction": "Print out the 8-bit binary representation of the given number.", "input": "50", "output": "0b00110010"}
{"instruction": "How can the following JavaScript program be modified to include a letter grade for each student score?", "input": "let grades = [\n  {name: 'John', score: 90},\n  {name: 'Jack', score: 80},\n  {name: 'Jill', score: 85},\n]", "output": "let grades = [\n  {name: 'John', score: 90, grade: 'A'},\n  {name: 'Jack', score: 80, grade: 'B'},\n  {name: 'Jill', score: 85, grade: 'B+'},\n];\n\ngrades = grades.map(grade => {\n  let letter;\n  if (grade.score >= 90) {\n    letter = 'A';\n  } else if (grade.score >= 80) {\n    letter = 'B';\n  } else if (grade.score >= 70) {\n    letter = 'C';\n  } else if (grade.score >= 60) {\n    letter = 'D';\n  } else {\n    letter = 'F';\n  }\n  grade.grade = letter;\n  return grade;\n});"}
{"instruction": "Write a code that takes a list of strings and a string, and returns a list containing all strings from the given list that have the given string as a substring.", "input": "['Hello', 'Hello, world', 'Bonjour', 'My name is John']\nString: 'lo'", "output": "def find_substring(lst, query):\n    result = []\n    for el in lst:\n        if query in el:\n            result.append(el)\n    return result\n\nfind_substring(['Hello', 'Hello, world', 'Bonjour', 'My name is John'], 'lo')\n# output: ['Hello', 'Hello, world']"}
{"instruction": "Generate a code snippet to clone/copy a dictionary.", "input": "", "output": "import copy\n\ndef clone_dict(dict):\n    return copy.deepcopy(dict)"}
{"instruction": "Write a Node.js program to find the sum of first n natural numbers.", "input": "", "output": "const calculateSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\nconsole.log(calculateSum(5));"}
{"instruction": "Construct a Python program to print out the biggest number from a given list.", "input": "my_list = [6, 5, 9, 1, 8, 2]", "output": "def find_max(my_list):\n    max_num = my_list[0]\n    for num in my_list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(find_max(my_list))"}
{"instruction": "Write a function in JavaScript that takes an integer n and returns the nth Fibonacci number.", "input": "", "output": "function Fibonacci(n) { \n  if (n <= 1) return n; \n  return Fibonacci(n-1) + Fibonacci(n-2); \n}"}
{"instruction": "Write a Python script to find the area of a triangle with sides 18, 24, and 30.", "input": "", "output": "def triangle_area(a, b, c):\n    '''This function computes the area of a triangle given its side lengths.'''\n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\nprint(\"The area of the triangle is:\", triangle_area(18, 24, 30))"}
{"instruction": "Create a Date object containing tomorrow's date.", "input": "", "output": "var tomorrow = new Date();\ntomorrow.setDate(tomorrow.getDate() + 1);"}
{"instruction": "Write an SQL query to find the maximum salary of an employee in the same department as the given employee.", "input": "Employee name: \u2018John Doe\u2019\nDepartment: \u2018Finance\u2019", "output": "SELECT MAX(salary)\nFROM employees\nWHERE department = 'Finance'\nAND NOT employee_name = 'John Doe';"}
{"instruction": "Given a 2-D array, write a C++ code snippet to find the maximum sum of all the numbers that are strictly increasing in a diagonal pattern.", "input": "[[1, 2, 3], \n[4, 5, 6], \n[7, 8, 9]]", "output": "int maxSum = 0;\n \n// traverse elements in upper-left \n// to lower-right diagonal order \nfor (int i = 0; i < Matrix.size(); i++ )\n{\n    int sum = 0; \n    // traverse diagonal element \n    for (int j = 0; (i+j) < Matrix.size() && j < Matrix.size(); j++ )\n        sum += Matrix[i+j][j]; \n    // update max sum \n    maxSum = max(maxSum, sum); \n} \n\n// traverse elements in upper-right \n// to lower-left diagonal order \nfor (int i = 1; i < Matrix.size(); i++ ) \n{ \n    int sum = 0; \n    // traverse diagonal element \n    for (int j = 0; (i+j) < Matrix.size() && j < Matrix.size(); j++ ) \n        sum += Matrix[j][i+j]; \n    // update max sum \n    maxSum = max(maxSum, sum); \n}"}
{"instruction": "Using string functions, capitalize each word in the given sentence.", "input": "sentence = \"python is a programming language\"", "output": "sentence = \"python is a programming language\"\n\n# split the sentence into individual words\nwords = sentence.split(\" \")\n\n# capitalize each word in the sentence\ncapitalized_words = [word.capitalize() for word in words]\n\n# join the words back together\ncapitalized_sentence = \" \".join(capitalized_words)\n\nprint(capitalized_sentence) # prints \"Python Is A Programming Language\""}
{"instruction": "Parse this HTML code and extract the text.", "input": "<p>This is a pararaph of text<p>", "output": "String text = doc.select(\"p\").text(); // text = \"This is a pararaph of text\""}
{"instruction": "Based on the following input array, return the largest two numbers in the array.", "input": "numbers = [10, 9, 8, 7, 6, 5]", "output": "# return the two largest numbers in the array\nlargestOne = max(numbers)\nnumbers.remove(largestOne)\nlargestTwo = max(numbers)\n \nprint(largestOne, largestTwo)\n10 9"}
{"instruction": "How would you create a table in a database using SQL commands?", "input": "", "output": "To create a table in a database using SQL commands, you would use the following SQL statement: CREATE TABLE <table_name>(column_name datatype);"}
{"instruction": "Create an algorithm to compute the greatest common divisor between two numbers.", "input": "m = 8, n = 20", "output": "def gcd(m, n):\n    # base case \n    if m == 0:\n        return n\n    \n    # recursive case\n    return gcd(n % m, m)\n\nprint(gcd(8, 20)) # Output: 4"}
{"instruction": "Make a program that takes in a non-empty string and finds its longest palindrome.", "input": "", "output": "def longest_palindrome(text):\n  longest_palindrome = \"\"\n  for i in range(len(text)):\n    for j in range(len(text), i, -1):\n      substring = text[i:j]\n      if substring == substring[::-1] and len(substring) > len(longest_palindrome):\n        longest_palindrome = substring\n  return longest_palindrome"}
{"instruction": "What is the Python function for swapping two variables' values?", "input": "", "output": "The Python function for swapping two variables' values is \"*a, b = b, a*\". This is a simple one-line expression that swaps the values of the two variables."}
{"instruction": "Create a CSS selector to target the second and third <div> element with the class 'container'.", "input": "", "output": "div.container:nth-child(2), div.container:nth-child(3) { ... }"}
{"instruction": "Write a function to square a given number and return its result.", "input": "number = 5", "output": "def square_number(number): \n    return number**2\n\nprint(square_number(number))"}
{"instruction": "Write an R script to compute the sum of all the elements of a given list.", "input": "list = c(1, 2, 3, 4, 5)", "output": "sum <- 0\n\nfor(i in list){\n  sum <- sum + i\n}\n\nprint(sum)\n\n# Output: 15"}
{"instruction": "Develop a SQL query to display the employees who work in the Sales department.", "input": "", "output": "SELECT * \nFROM Employees \nWHERE Department = 'Sales';"}
{"instruction": "What language do we use to write HTML?", "input": "", "output": "HTML is written in a markup language known as HyperText Markup Language (HTML). HTML is a language for describing web pages. It is used for structuring and presenting content for the web. It is written in the form of HTML elements consisting of tags enclosed in angle brackets."}
{"instruction": "Given a list of strings, create a Python3 program that counts the number of strings that start with the letter 'a'.", "input": "example_list = [\"Apple\", \"Cat\", \"Ant\", \"Table\"]", "output": "def count_str_starts_a(l):\n    count = 0\n    for word in l:\n        if word[0].lower() == 'a':\n            count += 1\n    return count"}
{"instruction": "What data structure should you use to store the result of Q11 so that you can efficiently retrieve the desired result?", "input": "", "output": "The best data structure to store the result of Q11 is a 2D array or matrix. This data structure can be used to efficiently retrieve the longest common subsequence of two strings."}
{"instruction": "Create a function to search a given string for the first vowel.", "input": "", "output": "def first_vowel(string): \n    index = 0\n    for char in string:\n        if char in [\"a\", \"e\", \"i\", \"o\", \"u\"]: \n            return index\n        else: \n            index+= 1 \n    return -1"}
{"instruction": "Create a HTML page that takes two text strings as inputs and outputs the longest one.", "input": "", "output": "<html>\n  <head>\n    <title>Input and Compare Strings</title>\n  </head>\n  <body>\n    Enter two strings:\n    <input type=\"text\" id=\"str1\" />\n    <input type=\"text\" id=\"str2\" />\n    <input type=\"button\" value=\"Submit\" onclick=\"compareStrings()\" />\n    <div id=\"result\"/>\n    <script>\n      function compareStrings() {\n          let str1 = document.getElementById(\"str1\").value;\n          let str2 = document.getElementById(\"str2\").value;\n          let longest = (str1.length > str2.length) ? str1 : str2; \n          document.getElementById(\"result\").innerHTML = \"The longest string is: \" + longest;\n      }\n   </script>\n  </body>\n</html>"}
{"instruction": "Write a Python program that takes two numbers as input and outputs the greatest common divisor (GCD) between them.", "input": "18 9", "output": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nx = int(input(\"Enter the first number: \"))\ny = int(input(\"Enter the second number: \"))\n\nprint(\"The GCD of {} and {} is {}\".format(x, y, gcd(x, y)))"}
{"instruction": "Create an HTML form with two dropdowns to select from different countries and cities.", "input": "", "output": "<form action=\"\">\n  <label>Country:</label>\n  <select id=\"country\">\n    <option value=\"\">-- Select Country --</option>\n    <option value=\"us\">USA</option>\n    <option value=\"uk\">UK</option>\n  </select>\n  <label>City:</label>\n  <select id=\"city\">\n    <option value=\"\">-- Select City --</option>\n    <option value=\"ny\" class=\"us\">New York</option>\n    <option value=\"la\" class=\"us\">Los Angeles</option>\n    <option value=\"london\" class=\"uk\">London</option>\n    <option value=\"oxford\" class=\"uk\">Oxford</option>\n  </select>\n</form>\n\n<script>\n  const countrySelect = document.querySelector('#country');\n  const citySelect = document.querySelector('#city');\n\n  countrySelect.addEventListener('change', (e) => {\n    const selectedOption = e.target.value;\n    citySelect.innerHTML = '<option value=\"\">-- Select City --</option>';\n    document.querySelectorAll('.${selectedOption}').forEach((option) => {\n      citySelect.innerHTML += option.outerHTML;\n    });\n  });\n</script>"}
{"instruction": "Write a C program to find the sum of all digits of a given number", "input": "", "output": "#include <stdio.h>\n\nint getSumOfDigits(int num) {\n    // Initialize sum\n    int sum = 0;\n\n    // Find the sum of digits\n    while(num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n\n    return sum;\n}\n\nint main() {\n    int num;\n    scanf(\"%d\", &num);\n\n    printf(\"Sum of digits of %d is %d\\n\", num, getSumOfDigits(num));\n\n    return 0;\n}"}
{"instruction": "Write a PHP program to print a Christmas tree on the console.", "input": "", "output": "<?php \n    //Printing the christmas tree\n    $height = 5; \n  \n    // Looping through rows \n    for ($i = 1; $i <= $height; $i++) \n    { \n        // Print Spaces \n        for ($k = $height; $k > $i; $k--) \n        { \n            echo \" \"; \n        } \n  \n        // Print Stars \n        for ($j = 1; $j <= (2 * $i - 1); $j++) \n        { \n            echo \"*\"; \n        } \n          \n        // Move to the next row \n        echo \"\\n\"; \n    } \n    // Printing the stand\n    // Print Spaces \n    for ($i = 1; $i <= $height - 1; $i++) \n    { \n        echo \" \";\n    } \n  \n    // Printing the stand \n    echo \"*\\n\"; \n?>"}
{"instruction": "Use the following JSON data and write a JavaScript function to parse it.", "input": "{\n \"employees\": [\n  {\n   \"firstName\": \"John\",\n   \"lastName\": \"Doe\"\n  },\n  {\n   \"firstName\": \"Anna\",\n   \"lastName\": \"Smith\"\n  },\n  {\n   \"firstName\": \"Peter\",\n   \"lastName\": \"Jones\"\n  }\n ]\n}", "output": "function parseJSON(jsonString) {\n let employeeData = JSON.parse(jsonString);\n let employees = employeeData.employees;\n let parsedData = [];\n for (let i = 0; i < employees.length; i++){\n  let employee = employees[i];\n  let parsedEmployee = {};\n  parsedEmployee.firstName = employee.firstName;\n  parsedEmployee.lastName = employee.lastName;\n  parsedData.push(parsedEmployee);\n }\n return parsedData;\n};"}
{"instruction": "Rewrite the following code snippet to use the arcpy module.", "input": "import os\n\nfile_paths = [os.path.join('data', f) for f in os.listdir('data') if f.endswith('.tif')]", "output": "import os\nimport arcpy\n\nfile_paths = [os.path.join('data', f) for f in arcpy.ListRasters('*.tif')]"}
{"instruction": "Create a script to count the number of alphabets, digits and special characters in a string.", "input": "String = \"Hello World 123$%^&\"", "output": "string = \"Hello World 123$%^&\"\nalphabets = 0\ndigits = 0\nspecial_characters = 0\n \nfor i in range(0, len(string)): \n    if ((string[i] >= 'a' and string[i] <= 'z') or (string[i] >= 'A' and string[i] <= 'Z')): \n        alphabets = alphabets + 1\n    elif (string[i] >= '0' and string[i] <= '9'): \n        digits = digits + 1\n    else: \n        special_characters = special_characters + 1\n \nprint(\"Alphabets:\", alphabets) \nprint(\"Digits:\", digits) \nprint(\"Special Characters:\", special_characters)"}
{"instruction": "Create a PHP program to find the maximum of two numbers without using if...else or a comparison operator.", "input": "", "output": "<?php \n  \n// Function to return the maximum of two numbers without using if...else or a comparison operator\nfunction maximum($x, $y) \n{ \n    // Calculate the sum of two numbers\n    $sum = $x + $y; \n  \n    // Calculate the difference between two numbers\n    $diff = $x - $y; \n  \n    // Set sign of the difference\n    $s = $diff >> 31 & 0x1; \n  \n    // Return maximum of two numbers  \n    return ($x * $s + $y * (1-$s)); \n} \n  \n// Driver code \necho \"Maximum of 45 and 68 is \", maximum(45, 68); \n?>"}
{"instruction": "Write a C# class that allows a user to enter a set of numbers and add them up.", "input": "", "output": "public class NumberAdder {\n\n    int sum = 0; \n  \n    // Method to add the given numbers\n    public void addNumbers(int[] numbers) {\n        for (int i = 0; i < numbers.Length; i++){\n            this.sum += numbers[i]; \n        }\n    }\n\n}"}
{"instruction": "Write a PHP script that prints out \"Hello, World!\" on the web page.", "input": "", "output": "<?php\n  echo \"Hello, World!\";\n?>"}
{"instruction": "Analyze an object-oriented program written in Python and suggest changes to improve its technical quality.", "input": "def main():\n  my_list = [1,2,3,4] \n\n  for element in my_list:\n    print(element)\n\nif __name__== \"__main__\"\n  main()", "output": "The program can be improved to make use of better data structure, such as a list comprehension. This would allow faster iteration over the list and reduce duplicate lines of code.\n\ndef main():\n  my_list = [1,2,3,4] \n\n  my_list = [element for element in my_list] \n\n  for element in my_list:\n    print(element)\n\nif __name__== \"__main__\"\n  main()"}
{"instruction": "What are the differences between a Java applet and a Java application?", "input": "", "output": "The main difference between a Java applet and a Java application is that an applet is a client-side application that is downloaded from server and is run in a web browser, while a Java application is a stand-alone program which runs directly on the included JVM. Applet code is able to access resources from the server, like databases and other back-end services, while a Java application runs within its own sandbox. Additionally, a Java applet requires a web browser plug-in in order to run, while a Java application does not.   Another important difference between a Java applet and a Java application is that the code for a Java applet is visible to the end user, while the code for a Java application is hidden from the user. Thus, Java applets cannot be used to secure confidential information or data.  Finally, Java applets are limited by the client system due to the fact that they are displayed and executed in the web browser, while Java applications are platform-independent and can be executed on any operating system."}
{"instruction": "Using list comprehension, write a Python code to get a list of all possible subsets of the list [1, 2, 3]", "input": "[1, 2, 3]", "output": "subsets = [[x for x in [1, 2, 3]] for y in range(0, 2**len([1, 2, 3]))]"}
{"instruction": "Convert the following line of HTML code to lowercase.", "input": "<P>", "output": "<p>"}
{"instruction": "Write a function that takes an integer as an argument and prints its least significant digit.", "input": "", "output": "def print_lsc(x):\n   print(x%10)"}
{"instruction": "Make a POST request to the same server and download the response content", "input": "", "output": "import requests\n \nurl = 'http://example.com/'\ndata = {'key': 'value'}\n \nresponse = requests.post(url, data=data)\n \n#Download response content\nwith open('response_content.txt', 'wb') as f:\n    f.write(response.content)"}
{"instruction": "Modify the code below to use regular expressions to validate a phone number in the format \"123-456-7890\".", "input": "", "output": "if (phone.match(/^\\d{3}-\\d{3}-\\d{4}$/)) {\n    console.log(\"Valid phone number\");\n} else {\n    console.log(\"Invalid phone number\");\n}"}
{"instruction": "What is the best approach to solve this problem?", "input": "Given an array of integers, find the longest continuous increasing subarray within the array.", "output": "The best approach to solve this problem is to use the sliding window technique. This involves iterating through the array and keeping track of the start and end points of a window. We check to see if the elements of the window are increasing and update the start and end points accordingly. When the window becomes longer than the longest subarray found so far, we update the longest subarray. The time complexity of this approach is O(n)."}
{"instruction": "Use a regular expression to replace URLs with \"URL\" in a given text in Python.", "input": "This is a text with a link http://example.com", "output": "import re\n\ntext = \"This is a text with a link http://example.com\"\ntext = re.sub(r'http\\S+', 'URL', text)\nprint(text)\n# Prints: This is a text with a link URL"}
{"instruction": "Generate a unique ID string of length 12 using a Python function.", "input": "", "output": "import string, random\ndef generate_unique_id(stringLength=12):\n  lettersAndDigits = string.ascii_letters + string.digits\n  return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\nunique_string = generate_unique_id()\nprint(\"unique string: \",unique_string)"}
{"instruction": "Write a JavaScript method to return the sum of array elements.", "input": "", "output": "function sumArray (arr) {\n    var sum = 0;\n    for (var i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}"}
{"instruction": "Write a Python program to print the multiplication table of a number.", "input": "", "output": "def print_mult_table(n):\n    for i in range(1, 11):\n        print('{} x {} = {}'.format(n, i, n*i))"}
{"instruction": "Convert this expression in to postfix notation.", "input": "A + B * C", "output": "ABC*+"}
{"instruction": "Design an algorithm to delete all occurrences of a given key k in a singly linked list.", "input": "", "output": "//recursive approach\nNode *deleteKey(Node *head, int k) \n{ \n    Node *curr = head; \n    if (curr == NULL) \n        return NULL; \n\n    // check for head node \n    if (curr->key == k) { \n        Node *temp = curr; \n        head = curr->next; \n        free(temp); \n        return deleteKey(head, k); \n    } \n\n    // check for other nodes \n    while (curr->next != NULL) { \n        if (curr->next->key == k) { \n            Node *temp = curr->next; \n            curr->next = curr->next->next; \n            free(temp); \n        } \n        curr = curr->next; \n    } \n    return head; \n}"}
{"instruction": "Generate a code that prints out all the perfect squares between 1 and 500.", "input": "", "output": "for i in range(1,501):\n    num = i**2\n    if num < 501:\n        print(num)"}
{"instruction": "Change the variable \"str\" below to upper case.", "input": "let str = 'hello world!';", "output": "let str = 'HELLO WORLD!';"}
{"instruction": "Write a SQL query to delete a row from the \"CITY\" table where the city is \"Frankfurt\".", "input": "", "output": "DELETE FROM CITY WHERE CITY = 'Frankfurt';"}
{"instruction": "Create a Python program to extract all unique words from a given sentence.", "input": "This sentence contains multiple words.", "output": "sentence_words = set(sentence.split())\nunique_words = set(word for word in sentence_words if word not in visited_words)\nprint(unique_words)\n# Output: {'contains', 'words', 'multiple', 'This'}"}
{"instruction": "Suggeste a completion of the following code:", "input": "def flatten(nested_list):", "output": "def flatten(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten(item))\n        else:\n            flat_list.append(item)\n    return flat_list"}
{"instruction": "Develop a logistic regression model using Python to predict the outcome of a binary classification dataset.", "input": "", "output": "import pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n \n# Load the dataset\ndf = pd.read_csv(\"data.csv\")\n \n# Split the data into features (X) and targets (y)\nX= df.drop(\"target\",axis=1)\ny = df[\"target\"]\n \n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\n \n# Initialize and fit the logistic regression model\nclf = LogisticRegression().fit(X_train, y_train)\n \n# Make predictions on the test set\npredictions = clf.predict(X_test)"}
{"instruction": "Create a function in JavaScript that takes in a number and a power, and returns the result of the power operation on the number.", "input": "num = 2, pow = 5", "output": "function power(num, pow) {\n    let result = 1;\n    for (let i = 1; i <= pow; i++) {\n        result *= num;\n    }\n    return result;\n}"}
{"instruction": "You are given a list of numbers. Construct a for loop to filter out the odd numbers from the list.", "input": "arr = [1,2,3,4,5]", "output": "odds = []\nfor num in arr:\n  if num % 2 == 1:\n    odds.append(num)\nprint(odds)"}
{"instruction": "Edit the following code in Python to swap two elements in a list.", "input": "list1 = [1, 2, 4]\n\nlist1[0], list1[1] = list1[1], list1[0]", "output": "list1 = [1, 2, 4]\n\nlist1[0], list1[2] = list1[2], list1[0]"}
{"instruction": "Edit the following HTML page to add a new heading and a link.", "input": "<html>\n <head>\n  <title>Example Site</title>\n </head>\n <body>\n  <h1>Hello World!</h1>\n  <p>This is a Sample Page.</p>\n </body>\n</html>\nLink: http://example.com\nHeading: Sample Page", "output": "<html>\n <head>\n  <title>Example Site</title>\n </head>\n <body>\n  <h1>Hello World!</h1>\n  <h2>Sample Page</h2>\n  <p>This is a Sample Page</p>\n  <a href=\"http://example.com\">Link</a>\n </body>\n</html>"}
{"instruction": "Write an efficient Python program to reverse a string.", "input": "testString = \"Hello World\"", "output": "def reverseString(testString): \n    reversedString = \"\"\n    for char in testString: \n        reversedString = char + reversedString\n    return reversedString\n\nprint(reverseString(testString))"}
{"instruction": "Create a SQL statement to select all rows of the \"students\" table with a GPA higher than 3.0.", "input": "", "output": "SELECT * FROM students WHERE GPA > 3.0;"}
{"instruction": "Given the following code, find the output.", "input": "def f(x):\n        if x == 0 or x == 1:\n            return 1\n        return f(x-1) + f(x-2)\n\nprint(f(4))", "output": "The output of the following code is 3."}
{"instruction": "Create a class that has 3 methods. The first method should multiply two numbers, the second should add two numbers, and the third should calculate the modulus of two numbers.", "input": "", "output": "class Calculator:\n    def multiply(self, num1, num2):\n        return num1 * num2\n        \n    def add(self, num1, num2):\n        return num1 + num2\n        \n    def modulus(self, num1, num2):\n        return num1 % num2"}
{"instruction": "Create a program to calculate the mean of the following list.", "input": "myList = [4, 8, 10, 15]", "output": "def mean(myList):\n    sum = 0\n    for num in myList:\n        sum += num\n    average = round(sum/len(myList), 2)\n    return average\n\nmean_result = mean(myList)"}
{"instruction": "Convert the binary input to its decimal value.", "input": "binary = \"1101\"", "output": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n\nprint(binary_to_decimal(\"1101\"))\n\n# Output:\n13"}
{"instruction": "Design a function in Python to split a sentence into words", "input": "", "output": "def split_sentence(sentence):\n    return sentence.split(' ')"}
{"instruction": "Write a Python program to create a copy of a given set.", "input": "my_set = {1, 2, 3, 4, 5}", "output": "def clone_set(my_set):\n    new_set = set()\n    for item in my_set:\n        new_set.add(item)\n    return new_set"}
{"instruction": "Create an array in Ruby that contains the following strings: \"cat\",  \"dog\", \"fish\".", "input": "", "output": "arr = [\"cat\", \"dog\", \"fish\"]"}
{"instruction": "Convert the below JSON data into an equivalent XML format.", "input": "{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"address\": {\n    \"street\": \"1 Main Street\",\n    \"city\": \"London\",\n    \"country\": \"UK\"\n  }\n}", "output": "<?xml version=\"1.0\"?>\n<data>\n  <name>John</name>\n  <age>30</age>\n  <address>\n    <street>1 Main Street</street>\n    <city>London</city>\n    <country>UK</country>\n  </address>\n</data>"}
{"instruction": "Describe the purpose of using an Array in programming.", "input": "", "output": "An array is a data structure used in programming to store a collection of elements of the same type in a contiguous block of memory. Arrays are used to hold items such as numbers, strings, objects, etc. and to perform operations such as searching, sorting, and manipulation on the elements of the array. Arrays are also used to implement other data structures such as stacks, queues, and linked lists."}
{"instruction": "Create an HTML form for entering a user's age.", "input": "", "output": "<form>\n    <label for=\"age\">Age: </label>\n    <input type=\"number\" name=\"age\" id=\"age\"/>\n</form>"}
{"instruction": "Write a method to find duplicate elements in an array of integers.", "input": "", "output": "We can solve this problem using a HashSet. We traverse the array and insert the elements in the HashSet. If the element already exists in the HashSet, then it is a duplicate.\n\npublic static boolean findDuplicate(int[] arr) {\n    Set<Integer> set = new HashSet<Integer>();\n    \n    for(int i = 0; i < arr.length; i++) {\n        if(set.contains(arr[i])) {\n            return true;\n        }\n        set.add(arr[i]);\n    }\n    return false;\n}"}
{"instruction": "Complete the missing parts of the code to sort an array in ascending order.", "input": "int[] arr = {3, 5, 2, 7, 1};\nint temp;\nfor (int i = 0; i < arr.length; i++){\n  // TODO: complete the code\n}", "output": "int[] arr = {3, 5, 2, 7, 1};\nint temp;\nfor (int i = 0; i < arr.length; i++){\n  for (int j = i+1; j < arr.length; j++){\n    if (arr[i] > arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n}"}
{"instruction": "Generate a Java code to display the multiplication table from 1 to 10.", "input": "", "output": "public static void main(String args[])\n{\n    for (int i=1; i<=10; i++)\n    {\n        for (int j=1; j<=10; j++)             \n            System.out.print(i+\"*\"+j+\"=\"+(i*j)+\"  \");\n \n        System.out.println();\n    }\n}"}
{"instruction": "Write a SQL query to fetch the name of employees and the sum of their salaries from the database.", "input": "", "output": "SELECT name, \n    SUM(salary) \nFROM employees \nGROUP BY name;"}
{"instruction": "Provide an example for each of the following data types.", "input": "", "output": "Strings: \"Hello World!\"\n\nIntegers: 15\n\nFloats: 3.14\n\nDictionaries: {\"name\": \"John\", \"age\": 32} \n\nLists: [1, 2, 3, 4, 5]\n\nTuples: (\"Apple\", \"Banana\", \"Orange\")\n\nSets: {1, 2, 4, 8, 16}"}
{"instruction": "Write a JavaScript code snippet that will add two numbers.", "input": "", "output": "let num1 = 5;\nlet num2 = 8; \nlet sum = num1 + num2;\nconsole.log(sum);"}
{"instruction": "Design an approach in Python to retrieve a record from a database.", "input": "", "output": "import sqlite3\n\ndef retrieve_record(db_name, table_name, id):\n    try:  \n        con = sqlite3.connect(db_name)\n        cur = con.cursor()\n        cur.execute(\"SELECT * FROM {} where id={};\".format(table_name, id))\n        record = cur.fetchone()\n    except:\n        record = None\n    finally:    \n        cur.close()\n        con.close()\n    return record"}
{"instruction": "Derive the formula for calculating the circumference of a circle.", "input": "", "output": "The formula for calculating the circumference of a circle is C = 2*\u03c0*r, where r is the radius of the circle."}
{"instruction": "Describe the purpose and syntax of the 'forEach' method in Javascript.", "input": "", "output": "The forEach() method in Javascript is used to iterate over each element in an array. It takes a callback function as an argument which is executed for each element of the array. The syntax of the forEach() method is as follows:\narray.forEach(function(element, index, array) {\n  // code to be executed;\n});"}
{"instruction": "Write a CSS rule to make all p elements have a font size of 16px.", "input": "", "output": "p {\n font-size: 16px;\n}"}
{"instruction": "Write code in PHP for capitalizing the first letter of each word in a given string.", "input": "Quick brown fox", "output": "<?php\n$str = 'Quick brown fox';\n\necho ucwords($str);\n?>"}
{"instruction": "Extract the first 4 characters from the string \"Hello World\".", "input": "string = \"Hello World\"", "output": "Substring = \"Hell\"."}
{"instruction": "Create a PHP script that prints out the sum of all even numbers", "input": "", "output": "<?php \n \n$start_num = 3; \n$end_num = 8; \n \n$sum = 0; \n \nfor($i = $start_num; $i <= $end_num; $i++) \n{ \n\tif($i % 2 == 0) \n\t\t$sum = $sum + $i; \n \n\t$i++; \n} \n \necho \"Sum of all even numbers between $start_num to $end_num = $sum\"; \n?>"}
{"instruction": "Identify the type of the following variables in C++", "input": "int a;\nchar b;\nfloat c;", "output": "a is an integer, \nb is a character, \nc is a floating point number."}
{"instruction": "Edit the following code to output Hello World", "input": "<ar>print(\"Hello\")</ar>", "output": "print(\"Hello World\")"}
{"instruction": "How to generate all permutations of a given list of items?", "input": "", "output": "def permutation(lst):\n \n if len(lst) == 0:\n return []\n \n if len(lst) == 1:\n return [lst]\n \n l = []\n \n for i in range(len(lst)):\n m = lst[i]\n remLst = lst[:i] + lst[i+1:]\n \n for p in permutation(remLst):\n l.append([m] + p)\n \n return l"}
{"instruction": "Design a simple HTML page using standard HTML tags which contains an input box, a button and an output section", "input": "", "output": "<html>\n    <head>\n        <title>Example</title>\n    </head>\n    <body>\n        <div>\n            <input type=\"text\" id=\"input\">\n            <button type=\"submit\" onclick=\"output()\">Submit</button>\n        </div>\n        <div id=\"output\"></div>\n        <script>\n            function output() {\n               output.innerHTML = inp.value;\n            }\n        </script>\n    </body>\n</html>"}
{"instruction": "How is an exception handled in a C# program?", "input": "", "output": "An exception is handled in a C# program by using the try/catch statement. The statement provides a way to handle any potential errors that may occur while executing the program. It allows you to define a section of code that can execute even if an exception or error is encountered."}
{"instruction": "Write a Python program that adds two numbers and multiplies them.", "input": "4, 6", "output": "num1 = 4\nnum2 = 6\n\nresult = (num1 + num2) * num2\n\nprint(result)"}
{"instruction": "Write a method in Java that takes a string as input and returns its length.", "input": "", "output": "public static int getStringLength(String str) \n{ \n    // Return the length of the string\n    return str.length(); \n}"}
{"instruction": "Create a Java program to print the value of the mathematical expression sin(60)", "input": "", "output": "public class PrintSinValue {\n    public static void main(String[] args) {\n      double angleInDegrees = 60;\n      double result = Math.sin(Math.toRadians(angleInDegrees));\n      System.out.println(result);\n    }\n}"}
{"instruction": "Given a word, remove all the vowels from it in C.", "input": "", "output": "void remove_vowels(char *s) \n{ \n    for (int i = 0; s[i] != '\\0'; i++) \n    { \n        if (s[i] == 'a' || s[i] == 'A' || s[i] == 'e' || s[i] == 'E' || s[i] == 'i' || s[i] == 'I' || s[i] == 'o' || s[i] == 'O' || s[i] == 'u' || s[i] == 'U') \n        { \n            for (int j = i; s[j] != '\\0'; ++j) {\n                s[j] = s[j+1]; \n            } \n        } \n    } \n}"}
{"instruction": "Explain what a linked list data structure is in one sentence.", "input": "", "output": "A linked list is a linear data structure where each node is connected to the next node by a pointer."}
{"instruction": "Write a JavaScript function that takes an array and returns its first item.", "input": "", "output": "function getFirst(arr) {\n return arr[0];\n}"}
{"instruction": "Convert this NumPy array to a list.", "input": "import numpy as np \nmy_array = np.array([[1,2,3], [4,5,6], [7,8,9]])", "output": "def convert_array(array):\n    \"\"\"\n    This function takes a NumPy array and\n    converts it to a list.\n    \"\"\"\n    return array.tolist()"}
{"instruction": "Create a program in Python that takes two numbers as input and prints the result of the multiplication of those numbers.", "input": "num_1 = 10\nnum_2 = 15", "output": "num_1 = 10\nnum_2 = 15\nprint(num_1 * num_2)"}
{"instruction": "Get the sum of the first 100 even numbers.", "input": "", "output": "The sum of the first 100 even numbers is 10,200."}
{"instruction": "Write a SQL query that will select all the records that match a given date.", "input": "Table T:\nColumns: [x, y, z, date]\nRows: [1, 2, 3, 4]", "output": "SELECT * from T WHERE date = 'YYYY-MM-DD';"}
{"instruction": "You need to build an API endpoint to support role-based authentication.", "input": "User roles: 'admin', 'manager', 'employee'", "output": "def authentication(role):\n    if role == 'admin':\n        return 'Admin privileges granted.'\n    elif role == 'manager':\n        return 'Manager privileges granted.'\n    elif role == 'employee':\n        return 'Employee privileges granted.'\n    else:\n        return 'Login failed. Invalid role.'"}
{"instruction": "Use HTML to create a webpage with a text input field and a button.", "input": "", "output": "<html>\n  <body>\n    <input type=\"text\" id=\"text_input\" />\n    <button onclick=\"handleInput()\">Submit</button>\n  </body>\n</html>"}
{"instruction": "Create a program in C that outputs all perfect square numbers between 1 and 100.", "input": "", "output": "#include <stdio.h>\nint main()\n{\n    for (int i = 1; i <= 100; i++)\n    {\n        int sq = i * i;\n        if (sq <= 100)\n            printf(\"%d \", sq);\n    }\n    return 0;\n}"}
{"instruction": "Write a Python function to find the intersection between two lists.", "input": "list1 = [1, 2, 3, 5, 7]\nlist2 = [3, 4, 5, 6]", "output": "def intersection(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            if i==j:\n                result.append(i)\n    return result"}
{"instruction": "Update the following JavaScript code to add a new item to the end of an array using the push() method.", "input": "let myArr = ['a', 'b', 'c']", "output": "let myArr = ['a', 'b', 'c'];\nmyArr.push('d');"}
{"instruction": "Convert the following hex color to RGB.", "input": "Hex Color: #4286f4", "output": "RGB(66, 134, 244)"}
{"instruction": "Generate a List Comprehension that returns a list containing the first 5 prime numbers", "input": "", "output": "[x for x in range(2, 11) if all(x % y != 0 for y in range(2,x))][:5]"}
{"instruction": "Explain how inheritance works in programming.", "input": "", "output": "Inheritance is a feature of object-oriented programming (OOP) that allows one class, known as the \"parent class\" or \"base class\", to pass its properties and methods to another class, known as the \"child class\" or \"inherited class\". This relationship between the classes allows for code reuse, as the child class can access the data and functionality of the parent class. Additionally, the child class is allowed to modify and add onto the parent class's features, allowing for even more code reuse between classes and creating more efficient developer workflows."}
{"instruction": "Write a C program to print out the Fibonacci series upto the nth number.", "input": "", "output": "#include <stdio.h>\n \nint fibonacci(int n)\n{\n  if (n == 0)\n    return 0;\n  else if (n == 1)\n    return 1;\n  else\n    return (fibonacci(n-1) + fibonacci(n-2));\n}\n \nint main()\n{\n  int i, n;\n \n  printf(\"Enter the number of terms: \");\n  scanf(\"%d\", &n);\n \n  printf(\"Fibonacci Series: \");\n \n  for (i = 0; i < n; i++)\n  {\n    printf(\"%d \", fibonacci(i));\n  }\n \n  return 0;\n}"}
{"instruction": "Generate a new class from the given prototype.", "input": "class Prototype {\n\tpublic String name;\n\tpublic int age;\n\tpublic String gender;\n\t\n\tpublic Prototype(String name, int age, String gender) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.gender = gender;\n\t}\n}", "output": "class Person extends Prototype {\n\tpublic String address;\n\tpublic String phone;\n\t\n\tpublic Person(String name, int age, String gender, String address, String phone) {\n\t\tsuper(name, age, gender);\n\t\tthis.address = address;\n\t\tthis.phone = phone;\n\t}\n}"}
{"instruction": "EDIT this JavaScript function to return a list of the square roots of all numbers in a given input array.", "input": "function squareRoots(arr) {\n  // EDIT THIS\n}", "output": "function squareRoots(arr) {\n  const result = [];\n  for (let ele of arr) {\n    result.push(Math.sqrt(ele));\n  }\n  return result;\n}"}
{"instruction": "Write a script to calculate the sum of two numbers stored in variables.", "input": "var x = 4; \nvar y = 10;", "output": "function sum(x,y) {\n  return x + y;\n}\n\nconsole.log(sum(x,y));"}
{"instruction": "Create a switch statement that prints \"Yay!\" if input is 1 and \"Nay!\" if input is 2.", "input": "", "output": "switch(input){\n  case 1:\n    console.log(\"Yay!\");\n    break;\n  case 2:\n    console.log(\"Nay!\");\n    break;\n  default:\n    console.log(\"Invalid Input\")\n    break;\n}"}
{"instruction": "You need to write a program that takes a given string and checks if it is a valid IP address.", "input": "string1=\"255.255.0.10\"", "output": "true"}
{"instruction": "What is the maximum number of parameters that a function can take in Python?", "input": "", "output": "A function in Python can take up to 255 parameters."}
{"instruction": "Generate a syntax correct program which reverses a given linked list", "input": "", "output": "def reverse_list(head): \n    curr = head \n    prev = None\n\n    while curr is not None: \n        next_ = curr.next\n        curr.next = prev \n        prev = curr \n        curr = next_\n\n    head = prev \n    return head"}
{"instruction": "Fix any code errors in the given function.", "input": "def addToList list: num\n  list.append(num)\n  return list", "output": "def addToList(List, num):\n  List.append(num);\n  return List"}
{"instruction": "Write a regular expression to search for a string in a text.", "input": "The given text is: \"Yahoo! is a popular search engine.\"\n\nTo search for \"Yahoo\":", "output": "/Yahoo/"}
{"instruction": "Fix the following Java code by adding a missing semicolon.\npublic static void main(String[] args) {\nSystem.out.println(\"Hello World\")", "input": "", "output": "public static void main(String[] args) {\nSystem.out.println(\"Hello World\");\n}"}
{"instruction": "You are given the following code. Write an 'assert' statement that checks if the email address is all lowercase or not.", "input": "email = \"THIS_IS_TEST@EMAIL.COM\"", "output": "assert email.lower() == email, \"Email address should be all lowercase\""}
{"instruction": "Calculate the maximum element in the given list.", "input": "my_list = [2, 1, 7, 5, 3]", "output": "def max_element(my_list): \n    max_num = my_list[0] \n    for num in my_list: \n        if num > max_num: \n            max_num = num\n    return max_num"}
{"instruction": "Write a Python function to print a string of given length n filled with asterisks.", "input": "", "output": "def print_asterisks(n):\n    for i in range(n):\n        print(\"*\", end=\"\")\n    print(\"\")"}
{"instruction": "Write a CSS code to apply padding to the left side of an element with class name \"element\".", "input": "", "output": ".element {\n    padding-left: 20px;\n}"}
{"instruction": "Find the number of times the element 2 appears in the following array", "input": "arr = [2, 3, 5, 7, 2, 6, 2]", "output": "count = 0\nfor num in arr:\n    if num == 2:\n        count += 1\nprint(count)"}
{"instruction": "Explain why the following code snippet produces the output it does", "input": "lst = [[1, 2], [1, 2], [3, 4]]\n[x for i in lst for x in i]", "output": "The code snippet is using a nested list comprehension to flatten the list ``lst``. The outer loop iterates over each sublist in the list while the inner loop iterates over each element of the sublist. As a result, the output is a flattened list containing all the elements in the original list. In this case, the output is [1, 2, 1, 2, 3, 4]."}
{"instruction": "How to write a jQuery code to hide a HTML element?", "input": "", "output": "$(document).ready(function(){\n    $(\"#element_id\").hide();\n});"}
{"instruction": "Create a function to perform recursive binary search in a sorted array", "input": "", "output": "#returns the index of the target, if it is found\ndef binary_search(arr,left,right,target):\n    # Check base case \n    if right >= left:\n        mid = left + (right - left) // 2 \n  \n        # If element is present at the middle itself \n        if arr[mid] == target:\n            return mid \n          \n        # If element is smaller than mid, then it  \n        # can only be present in left subarray\n        elif arr[mid] > target:\n            return binary_search(arr, left, mid-1,target)\n       \n        # Else the element can only be present  \n        # in right subarray\n        else:\n            return binary_search(arr, mid + 1, right,target) \n\n    else: \n        # Element is not present in the array \n        return -1"}
{"instruction": "Write an HTML code snippet to make the text bold.", "input": "", "output": "<strong>Bold Text</strong>"}
{"instruction": "Write a function, which given an array and a number, returns the array with the number added.", "input": "arr = [1, 2, 3, 4]\nnum = 10", "output": "def add_num(arr, num):\n    return [x + num for x in arr]"}
{"instruction": "Create a program that reads a sentence, replaces all spaces with hyphens, and prints the modified sentence.", "input": "sentence = \"This is a sentence\"", "output": "def replace_space_with_hyphen(sentence):\n   return sentence.replace(\" \", \"-\")\n\nprint(replace_space_with_hyphen(sentence))"}
{"instruction": "Parse an XML document using Python.", "input": "", "output": "import xml.etree.ElementTree as ET\n\ntree = ET.parse(\"file.xml\")\nroot = tree.getroot()\n\nfor child in root:\n    print(f\"{child.tag}: {child.text}\")"}
{"instruction": "Print the longest palindrome from the given string", "input": "s = \"abbaba\"", "output": "def longestPalindrome(s):\n    \"\"\"\n    This function prints the longest palindrome from the given string.\n    \"\"\"\n    longest_str = \"\"\n    n = len(s) \n  \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 0 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n            left -= 1\n            right += 1\n  \n        longest_str = middle if len(middle) > len(longest_str) else longest_str\n        # check for even conditions\n        middle = ''\n        left = i \n        right = i+1\n        while (left >= 0 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n            left -= 1\n            right += 1\n  \n        longest_str = middle if len(middle) > len(longest_str) else longest_str\n  \n    return longest_str"}
{"instruction": "Produce a JavaScript code snippet for opening a new browser window.", "input": "", "output": "window.open(\"\", \"_blank\");"}
{"instruction": "Create a vector in R to count the occurrences of a given number in an array", "input": "arr = c(1,1,2,2,2,2,3,3,4,4,4)", "output": "vector <- c()\nfor (i in arr) {\n  count <- length(which(arr == i))\n  vector <- c(vector, count)\n}"}
{"instruction": "Write a SQL query to assess the average order value in the past two weeks.", "input": "", "output": "SELECT AVG(order_value) FROM orders WHERE order_date BETWEEN CURDATE() - INTERVAL 2 WEEK AND CURDATE();"}
{"instruction": "Construct a Python program to print the numbers from 1 to 10 on a single line.", "input": "", "output": "for i in range(1,11):\n  print(i, end=\" \")"}
{"instruction": "What is the purpose of the `sort()` JavaScript array method?", "input": "", "output": "The sort() JavaScript array method is used to sort the elements of an array in place and returns the sorted array. The default sort order is ascending according to the string Unicode code points."}
{"instruction": "Identify the loop control statement used in the below program\n\nfor (i = 0; i < 10; i++) {\n    printf(\"%d \", i);\n}", "input": "", "output": "for (i = 0; i < 10; i++)"}
{"instruction": "Explain the use of a for loop in programming and when you would use it.", "input": "", "output": "A for loop is a type of loop used in programming to execute a set of code multiple times. For loops use an iterable object to iterate over a sequence of statements, such as a list or a string. For loops are typically used to traverse through a sequence of elements, perform a set of calculations or operations on each element, and once the operations are complete, move on to the next element until the list has been exhausted. For loops can also be used to execute a set of statements a certain number of times, or while a certain condition is true. One example would be iterating through a list of numbers and printing their sum to the console. Another example would be running a loop until a certain value is reached or exceeded, such as in calculating the factorial of a number."}
{"instruction": "Create a Java class that prints the Fibonacci sequence between 0 and 10.", "input": "", "output": "public class Fibonacci {\n\n  public static void main(String[] args) {\n    printFibonacci();\n  }\n\n  public static void printFibonacci() {\n    int n1 = 0;\n    int n2 = 1;\n    int n3;\n\n    System.out.print(n1 + \" \" + n2);\n\n    for (int i = 0; i < 8; i++) {\n      n3 = n1 + n2;\n      System.out.print(\" \" + n3);\n      n1 = n2;\n      n2 = n3;\n    }\n  }\n\n}"}
{"instruction": "Write a Python function to check if a given string is an anagram of another or not.", "input": "word1 = \"cat\"\nword2 = \"tac\"", "output": "def is_anagram(word1, word2):\n return sorted(word1) == sorted(word2)"}
{"instruction": "Create a class to represent a calculator with the following methods: add, subtract, multiply, and divide", "input": "", "output": "class Calculator:\n    def add(self, num1, num2):\n        return num1 + num2\n\n    def subtract(self, num1, num2):\n        return num1 - num2\n\n    def multiply(self, num1, num2):\n        return num1 * num2\n\n    def divide(self, num1, num2):\n        return num1 / num2"}
{"instruction": "Code a function that takes an array and counts the odd numbers in it.", "input": "input_array = [1, 2, 3, 4, 5]", "output": "def countOddNumbers(input_array): \n count = 0\n for num in input_array:\n  if num % 2 != 0: \n   count += 1\n return count\n\nprint(countOddNumbers(input_array))"}
{"instruction": "Use an array method to remove duplicates from a given array in JavaScript.", "input": "let myArr = [1, 2, 3, 1, 4, 3]", "output": "let myArr = [1, 2, 3, 4].filter((item, index, arr) => arr.indexOf(item) === index);"}
{"instruction": "Given the following list of JavaScript objects and a particular key, write a function to return an array of the values corresponding to that key.", "input": "[\n  {\n    \"name\": \"John\",\n    \"age\": 25\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 28\n  },\n  {\n    \"name\": \"Dave\",\n    \"age\": 31\n  }\n ],\nkey = 'age'", "output": "function getValues(objList, key) {\n  let results = [];\n  objList.forEach(function(obj) {\n    if (obj.hasOwnProperty(key)) {\n      results.push(obj[key]);\n    }\n  });\n  return results;\n}\n\nlet ages = getValues(objList, 'age');\nconsole.log(ages);\n\nOutput:\n[25, 28, 31]"}
{"instruction": "Analyze the given list and return the index of the first occurrence of the number 7.", "input": "numbers = [1, 2, 3, 5, 4, 7, 9, 8, 7]", "output": "numbers = [1, 2, 3, 5, 4, 7, 9, 8, 7]\n\ndef find_index(lst):\n    \"\"\"\n    This function takes a list of numbers as a parameter and returns the index of the first occurrence of the number 7.\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] == 7:\n            return i\n        \nprint(find_index(numbers)) # prints 5"}
{"instruction": "Write a SQL query to find the books in the library whose title included the word \"Science\".", "input": "", "output": "SELECT * FROM books WHERE title LIKE '%Science%';"}
{"instruction": "Explain what is the critical section on a process.", "input": "", "output": "The critical section of a process is a section of code that must be executed without interruption by other processes. In a multi-threaded system, the critical section is used to guarantee that only one thread can access resources or data structures at any given time. It also ensures that operations that must be mutually exclusive are executed in order to prevent race conditions."}
{"instruction": "Build an array in JavaScript containing the words: \"cat\", \"dog\", \"fish\", and \"wolf\".", "input": "", "output": "let animals = [\"cat\", \"dog\", \"fish\", \"wolf\"];"}
{"instruction": "Write a SQL query to display the name and country of the customers who have purchased products in the last 24 hours.", "input": "", "output": "SELECT name, country \nFROM customers \nWHERE orderDate > DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 DAY);"}
{"instruction": "Create a program in Java to reverse a sentence.", "input": "This is a sample sentence.", "output": "String input = \"This is a sample sentence\";\n\nString reversed = new StringBuffer(input)\n             .reverse()\n             .toString();\n    \nSystem.out.println(reversed);"}
{"instruction": "Sort the list ```[5, 3, 1, 4, 2]``` numerically.", "input": "", "output": "The sorted list is [1, 2, 3, 4, 5]."}
{"instruction": "Create a javascript code to open a pop-up window when a user clicks the button", "input": "", "output": "<button type=\"button\" onclick=\"alert('Pop up window')\">Click Me!</button>"}
{"instruction": "Edit the code to fix the following bug: The code doesn't return the expected output.", "input": "def sum(numbers):\n    x = 0\n    for n in numbers:\n        x += n\n    return x", "output": "def sum(numbers):\n    x = 0\n    for n in numbers:\n        x += n\n    return int(x)"}
{"instruction": "Generate a class that manages the customer data", "input": "The class should have attributes of customer name, address, phone number, and email address.", "output": "class CustomerData:\n    def __init__(self, name, address, phone_number, email_address):\n        self.name = name\n        self.address = address\n        self.phone_number = phone_number\n        self.email_address = email_address\n\n    def get_name(self):\n        return self.name\n    \n    def get_address(self):\n        return self.address\n    \n    def get_phone_number(self):\n        return self.phone_number\n    \n    def get_email_address(self):\n        return self.email_address"}
{"instruction": "Convert this code to a function which takes a dictionary as an argument and adds the given key value pair to it.", "input": "my_dict = {'name': 'John'}\nkey = 'age'\nvalue = 18", "output": "def add_key_value_pair(my_dict, key, value):\n    \"\"\"Adds the given key value pair to the dictionary\"\"\"\n    if key not in my_dict:\n        my_dict[key] = value\n    return my_dict\n\nmy_dict = {'name': 'John'}\nkey = 'age'\nvalue = 18\n\nupdated_dict = add_key_value_pair(my_dict, key, value)\nprint(updated_dict) # {'name': 'John', 'age': 18}"}
{"instruction": "Develop a Java program that takes two strings as input and outputs the common characters in both strings.", "input": "String A: abcde\nString B: defgh", "output": "public class CommonChars {\n    public static void main(String[] args) {\n        String str1 = \"abcde\";\n        String str2 = \"defgh\";\n       \n        //Loop through both strings\n        for (int i = 0; i < str1.length(); i++) {\n            char ch1 = str1.charAt(i);\n            for (int j = 0; j < str2.length(); j++) {\n                char ch2 = str2.charAt(j);\n                \n                // Compare characters\n                if (ch1 == ch2) {\n                    System.out.println(ch1);\n                }\n            }\n        }\n   }\n}"}
{"instruction": "Construct a loop to apply a function to each element of a list", "input": "[2, 5, 8], function square", "output": "def apply_function(list, f):\n    for i in range(len(list)):\n        list[i] = f(list[i])\n    return list\n\ndef square(x):\n    return x*x\n\nlist = [2, 5, 8]\napply_function(list, square)"}
{"instruction": "Use the numpy library to write a function that takes an array of integer values, and returns the average of all the values.", "input": "arr = [1, 2, 3, 4, 5]", "output": "import numpy as np\ndef average(arr):\n return np.average(arr)"}
{"instruction": "Write a Python script to sort a given list of numbers in ascending order.", "input": "[3, 7, 1, 5, 4]", "output": "def sort_numbers_ascending(numbers): \n    # Sort the list \n    numbers.sort() \n    return numbers\n  \n# Driver code \nnums = [3, 7, 1, 5, 4] \n\nprint(sort_numbers_ascending(nums))"}
{"instruction": "Generate a query to get the first 10 rows from the given table.", "input": "Table name: \"users\"", "output": "SELECT * \nFROM users \nLIMIT 10;"}
{"instruction": "Design a regex pattern to check if a given string is a valid URL or not.", "input": "", "output": "pattern = r'^(https?:\\/\\/)[\\da-z\\.-]+\\.[a-z\\.]{2,}\\/?[\\/\\w \\.-]*'"}
{"instruction": "Create a data frame that for a given set of students contains their name, age, and grade level.", "input": "John (age 18, grade 12),\nJane (age 17, grade 11),\nTom (age 19, grade 13),\nEmily (age 17, grade 11).", "output": "import pandas as pd\n\ndf = pd.DataFrame({\n    \"Name\": [\"John\",\"Jane\",\"Tom\",\"Emily\"],\n    \"Age\": [18,17,19,17],\n    \"Grade Level\": [12,11,13,11]\n})\n\nprint(df)"}
{"instruction": "Make an API call that fetches the user details and stores it in a DB.", "input": "// URL: '/users/fetch'\n// Parameters: username, password", "output": "const request = require('request');\n\nfunction fetchUser(username, password) {\n  const url = `/users/fetch?username=${username}&&password=${password}`;\n  request.get(url, (err, res) => {\n    if (err) {\n      console.log('Failed to fetch user', err);\n      return;\n    }\n    \n    const userData = JSON.parse(res.body);\n    // insert userData into database\n  });\n}"}
{"instruction": "Sort the given words in lexicographical order.", "input": "apple, cat, flower, dog", "output": "apple, cat, dog, flower"}
{"instruction": "Create a function in Python to find all elements of a given list whose sum is equal to a given number.", "input": "list = [5, 7, 9, 4]\nnumber = 18", "output": "def find_elements(list, number): \n    result = [] \n    for i in range(len(list)): \n        for j in range(i + 1, len(list)): \n            if list[i] + list[j] == number: \n                result.append([list[i], list[j]]) \n  \n    return result \n  \n# Driver code \nlist = [5, 7, 9, 4] \nn = 18\nprint(find_elements(list, n))"}
{"instruction": "Create a bash shell script that assigns two variables with values of 4 and 2 and prints the sum of the two variables.", "input": "", "output": "#!/bin/bash\na=4\nb=2\necho 'the sum is' $(($a + $b))"}
{"instruction": "Write a Python program that takes a string entered by the user, reverses it and displays the reversed version of the string.", "input": "", "output": "def reverse_string(s): \n    return s[::-1]\n  \ninput_string = input(\"Enter a string: \")\n  \nreversed_string = reverse_string(input_string) \n  \nprint(\"The reversed string is:\", reversed_string)"}
{"instruction": "Generate a C code snippet to print a given string with a width of 20 characters.", "input": "Hello", "output": "#include <stdio.h> \n#include <string.h> \n  \nint main(){ \n    char str[20] = \"Hello\"; \n    printf(\"%-20s\\n\", str); \n    return 0;\n}"}
{"instruction": "Suggest a strategy to reduce the memory requirement of a given application.", "input": "", "output": "\"\"\"\nSuggest a strategy to reduce the memory requirement of a given application\n\"\"\"\n\n# Suggested strategy \nOne strategy to reduce the memory requirement of a given application is to identify the areas where the memory is used the most and to optimize the code for those areas. Additionally, use a memory profiling tool to identify potential memory leaks. Memory profilers can detect memory leaks, large memory allocations and inefficient use of memory. This will help to identify specific areas of the code that could be improved or refactored to save memory. Lastly, use a memory-efficient data structure and algorithms when necessary to save memory."}
{"instruction": "Write a block of code to check if the given value is a string or not in JavaScript.", "input": "Value: hello", "output": "if (typeof value === \"string\"){\n  console.log(\"It is a string\");\n}"}
{"instruction": "Create a function that takes a list of numbers and identifies the sublists of numbers that add up to a given sum.", "input": "", "output": "def sublist_sum(nums, target):\n    result = []\n    current_sum = 0\n    start = 0\n    for end in range(len(nums)):\n        current_sum += nums[end]\n        while current_sum > target and start < end:\n            current_sum -= nums[start]\n            start += 1\n        if current_sum == target:\n            result.append(nums[start:end+1])\n    return result"}
{"instruction": "Generate a correct SQL query for checking if a record exists with a given condition.", "input": "Check if a record exists in the \"Customers\" table with the email address \"john@example.com\";", "output": "SELECT COUNT(*) FROM Customers WHERE email = 'john@example.com';"}
{"instruction": "Generate a randomly generated 8 character alphanumeric string.", "input": "", "output": "mZvx8ecz"}
{"instruction": "Replace all words with 4 letters or more with \"*****\" in the following text.", "input": "This is an example of text.", "output": "This is an ***** of *****."}
{"instruction": "Create a Java program to determine whether a given string is a palindrome. A palindrome is a string which reads the same forwards and backwards.", "input": "", "output": "public class Palindrome {\n    public static boolean isPalindrome(String s) {\n        int i = 0, j = s.length()-1; \n        while (i < j) { \n            if (s.charAt(i) != s.charAt(j)) \n                return false; \n            i++; \n            j--; \n        } \n  \n        return true; \n    } \n \n    public static void main(String[] args) {\n        String s = \"madam\";\n        if (isPalindrome(s)) \n            System.out.println(\"The string is a palindrome.\"); \n        else\n            System.out.println(\"The string is not a palindrome.\"); \n    }\n \n}"}
{"instruction": "Define four classes in Java that form a hierarchy of fruit.", "input": "", "output": "// Base class\npublic abstract class Fruit { \n \n    private String color; \n \n    public Fruit(String color) { \n        this.color = color; \n    } \n    public abstract double getWeight(); \n} \n\n// Inheriting class\npublic class Apple extends Fruit { \n \n    private double weight; \n \n    public Apple(String color, double weight) { \n        super(color); \n        this.weight = weight; \n    } \n    @Override\n    public double getWeight() { \n        return weight; \n    } \n} \n\n// Inheriting class\npublic class Banana extends Fruit { \n         \n    private double length; \n \n    public Banana(String color, double length) { \n        super(color); \n        this.length = length; \n    } \n    @Override\n    public double getWeight() { \n        return length * 0.5; \n    } \n} \n\n// Inheriting class\npublic class Orange extends Fruit { \n \n    private double radius; \n \n    public Orange(String color, double radius) { \n        super(color); \n        this.radius = radius; \n    } \n    @Override\n    public double getWeight() { \n        return Math.round(Math.PI * Math.pow(radius, 2)); \n    } \n}"}
{"instruction": "Come up with a query to add a new column to a table", "input": "Table \u2018employee\u2019", "output": "ALTER TABLE Employee \nADD new_column INT"}
{"instruction": "Design a function in Python to delete duplicates from a list.", "input": "The list is: [2, 3, 2, 4, 5, 5, 6]", "output": "def remove_duplicates(list): \n      \n    unique_list = [] \n      \n    for x in list: \n        if x not in unique_list: \n            unique_list.append(x) \n    return unique_list \n  \nlist = [2, 3, 2, 4, 5, 5, 6] \nprint (\"Original List: \", list) \nprint (\"Unique List: \", remove_duplicates(list)) \n\nOutput: \nOriginal List: [2, 3, 2, 4, 5, 5, 6]\nUnique List: [2, 3, 4, 5, 6]"}
{"instruction": "Generate a function that computes the sum of the numbers in a given list.", "input": "", "output": "def compute_sum(numbers):\n  total = 0\n  for num in numbers:\n    total += num\n  return total"}
{"instruction": "Given a list of strings, write a Python program to capitalize the first letter of each word.", "input": "words = ['The', 'quick', 'brown', 'fox']", "output": "capitalized_words = [word.capitalize() for word in words]\nprint(capitalized_words) # Output: ['The', 'Quick', 'Brown', 'Fox']"}
{"instruction": "Create a data structure suitable for storing a list of scores for a game.", "input": "", "output": "scores = []\n\n# Function to add a new score to the scores list\ndef add_score(score):\n    scores.append(score)\n\n# Function to display all the scores in the scores list\ndef display_scores():\n    for score in scores:\n        print(score)"}
{"instruction": "Create a Regex pattern to validate mobile phone numbers.", "input": "", "output": "^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$"}
{"instruction": "Write a function to calculate the cost of purchasing X items at a given cost", "input": "X = 5 and Cost per item= 2.00", "output": "def cost(x, price): \n    return x*price \ncost(5, 2.00)  # returns 10.00"}
{"instruction": "Write a for-loop to print out the values from a list named 'mylist'", "input": "mylist = [1,2,3,4,5,6,7]", "output": "for i in mylist:\nprint(i)"}
{"instruction": "Edit the HTML structure shown below to include a form tag with an input for a user's name.", "input": "<!DOCTYPE html>\n<html>\n<head>\n <title>My Webside</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>My Webside</title>\n</head>\n<body>\n <form>\n  <input type=\"text\" name=\"name\" placeholder=\"Enter your name here\">\n </form>\n</body>\n</html>"}
{"instruction": "Write a function in Ruby to remove the white space from a given string.", "input": "", "output": "def remove_whitespace(str)\n    str.gsub(/\\s+/, \"\")\nend"}
{"instruction": "Create a bash script that takes a path argument and checks for pattern `.gitconfig`.", "input": "/home/user/", "output": "#!/bin/bash\n\nDIR=$1\nresult=$(find \"$DIR\" -name '*.gitconfig' | wc -l)\n\nif [ $result -gt 0 ]\nthen\n    echo \"Found $result .gitconfig files in $DIR\"\nelse\n    echo \"No .gitconfig files found in $DIR\"\nfi"}
{"instruction": "Create a function to capitalize the first letter in each word of the given string.", "input": "my_string = 'this is a test'", "output": "def capitalize_words(string):\n  words = string.split(' ')\n  capitalized_words = []\n  for word in words:\n    capitalized_word = word[0].upper() + word[1:]\n    capitalized_words.append(capitalized_word)\n  return ' '.join(capitalized_words)"}
{"instruction": "Replace the following placeholder with an appropriate variable in the following JavaScript code.", "input": "const user_name = __PLACEHOLDER__;\nconsole.log('Hello, ' + user_name + '!');", "output": "const user_name = 'John';\nconsole.log('Hello, ' + user_name + '!');"}
{"instruction": "Edit the following SQL statement to select all rows from the \"users\" table where the \"country_id\" is 2 and the \"level\" is greater than 5.", "input": "SELECT * FROM users;", "output": "SELECT * FROM users\nWHERE country_id = 2 \nAND level > 5;"}
{"instruction": "Create a softmax activation function in Python.", "input": "", "output": "def softmax(x):\n  \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n  e_x = np.exp(x - np.max(x))\n  return e_x / e_x.sum(axis=0)"}
{"instruction": "Given the below data, find the sum of all the numbers in the array.", "input": "data = [5, 15, 7, 20]", "output": "Sum = 47"}
{"instruction": "Create a user-defined type in Python to store information about a person.", "input": "", "output": "class Person:\n    def __init__(self, firstname, lastname, age):\n        self.firstname = firstname\n        self.lastname = lastname\n        self.age = age\n\nperson1 = Person('John', 'Smith', 25)"}
{"instruction": "Fragment the following statement ignoring whitespace and punctuation:", "input": "\"Hi, how are you doing?\"", "output": "word_list = [\"Hi,\", \"how\", \"are\", \"you\", \"doing?\"]"}
{"instruction": "How would you remove all punctuation marks in a given string?", "input": "", "output": "We can remove all punctuation marks in a given string by using the regular expression library in Python. We can create a pattern and use the re.sub() function to replace a matched pattern and remove the punctuation marks from the given string. This can be done with the following code:\n\nimport re \n\nstring = \"This is a test string! With [special] ^characters.\"\n\nremove_punct = re.sub(r'[^\\w\\s]','',string) \n\nprint(remove_punct) # Output = This is a test string With special characters"}
{"instruction": "Write pseudocode to find the average of two numbers.", "input": "", "output": "set total to 0\nset count to 0\n\nwhile numbers left to process\n    add next number to total\n    increment count\nend while\n\ncalculate average by dividing total by count\n\nprint average"}
{"instruction": "Write an SQL query to get the employee details with the highest salary.", "input": "", "output": "SELECT * \nFROM employees \nORDER BY salary DESC \nLIMIT 1;"}
{"instruction": "Create a HTML page to show user data from a REST API.", "input": "{\n \"name\": \"John\",\n \"age\" : 25,\n \"address\" : \"123 Main Street\"\n}", "output": "<html>\n  <head>\n     <title>User Data</title>\n  </head>\n  <body>\n    <h1>User Data</h1>\n    <p>Name: John</p>\n    <p>Age: 25</p>\n    <p>Address: 123 Main Street</p>\n  </body>\n</html>"}
{"instruction": "Find the index of the largest element in the array [2, 3, 5, 7, 25, 30].", "input": "", "output": "arr = [2, 3, 5, 7, 25, 30]\nlargest_element = max(arr)\nindex = arr.index(largest_element)\nprint(index) # Output: 4"}
{"instruction": "Assign the value 'Hello World' to the variable 'message'.", "input": "", "output": "message = \"Hello World\""}
{"instruction": "Create a Java class called Employee with a constructor taking name and salary as arguments.", "input": "", "output": "public class Employee\n{\n    private String name;\n    private double salary;\n \n    public Employee(String name, double salary)\n    {\n        this.name = name;\n        this.salary = salary;\n    }\n    \n    // Getters and setters\n    public String getName()\n    {\n        return name;\n    }\n  \n    public void setName(String name)\n    {\n        this.name = name;\n    }\n  \n    public double getSalary()\n    {\n        return salary;\n    }\n  \n    public void setSalary(double salary)\n    {\n        this.salary = salary;\n    }\n}"}
{"instruction": "Write a React component to render a table with 4 columns and 5 rows.", "input": "", "output": "class MyTable extends Component {\n render() {\n return (\n <table>\n <tr>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n </tr>\n <tr>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n </tr>\n <tr>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n </tr>\n <tr>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n </tr>\n <tr>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n </tr>\n </table>\n );\n }\n}"}
{"instruction": "Write a quick SQL query to find the oldest employee in a given department.", "input": "", "output": "SELECT * FROM employees\nWHERE department_id = :department_id\nORDER BY dob DESC\nLIMIT 1;"}
{"instruction": "Output an array of even numbers from 0 to 20 using a for loop in Python.", "input": "", "output": "even_nums = []\nfor num in range(0, 21):\n    if num % 2 == 0:\n        even_nums.append(num)\nprint(even_nums)"}
{"instruction": "Edit the following code to add an event listener for mouseover events.", "input": "<div id=\"container\">Hello</div>\n\nlet element = document.getElementById('container');", "output": "<div id=\"container\">Hello</div>\n\nlet element = document.getElementById('container');\nelement.addEventListener('mouseover', (e) => {\n  // run some code\n});"}
{"instruction": "Create a unit test for a given function to reverse a list of strings.", "input": "", "output": "import unittest \n\ndef reverse_strings_list(lst):\n  return lst[::-1]\n\nclass TestReverseStrings(unittest.TestCase):\n  def test_reverse_strings_list(self):\n    self.assertEqual(reverse_strings_list([\"one\",\"two\",\"three\"]), \n      [\"three\", \"two\", \"one\"])"}
{"instruction": "Write an HTML table with four columns consisting of ID, name, email address and phone number.", "input": "", "output": "<table>\n  <tr>\n    <th>ID</th>\n    <th>Name</th>\n    <th>Email Address</th>\n    <th>Phone Number</th>\n  </tr>\n</table>"}
{"instruction": "Write an algorithm to print all possible combinations of balanced parentheses.", "input": "", "output": "def generateParenthesis(N): \n    string = \"\" \n    result = [] \n  \n    # dfs on the result \n    def generate(left, right, string): \n        if (left == 0 and right == 0): \n            result.append(string) \n            return\n  \n        if left > 0: \n            generate(left - 1, right, string + \"(\") \n  \n        if left < right: \n            generate(left, right - 1, string + \")\") \n  \n    # calling the function \n    if N > 0: \n        generate(N, N, string) \n    return result \n  \n# Driver function \nprint(generateParenthesis(3))"}
{"instruction": "Write a neural network in Keras that can distinguish between a cat and a dog.", "input": "", "output": "import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\n\n# Define the model\nmodel = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])"}
{"instruction": "What is the most popular software development language?", "input": "", "output": "The most popular software development language is currently JavaScript, according to Stack Overflow's 2020 Developer Survey. JavaScript is used by 69.8% of software developers, followed by HTML/CSS at 63.1% and SQL at 54.2%."}
{"instruction": "Write a code to delete all records in an MS Access table.", "input": "", "output": "DELETE FROM tableName;"}
{"instruction": "Write a function in Python that takes a list of strings and checks if they are all the same length.", "input": "[\"Hello\", \"World\"]", "output": "def is_all_same_length(list_str):\n  \"\"\"Check if all strings in a list are of same length.\"\"\"\n  return len(set(map(len, list_str))) == 1"}
{"instruction": "Develop a function in Java that, given a positive number, returns the factorial of that number.", "input": "num = 5", "output": "public static int factorial(int num){\n    if (num == 0){ \n        return 1;\n    }\n    else{\n        int factorial = num * factorial(num - 1);\n        return factorial;\n    }\n}"}
{"instruction": "Write an AppleScript to open a given link in Safari.", "input": "https://www.google.com", "output": "tell application \"Safari\" \n  open location \"https://www.google.com\" \nend tell"}
{"instruction": "Write a query in SQL to find out the cities in which customers from France have made purchases.", "input": "", "output": "SELECT city \nFROM customers \nWHERE country = 'France';"}
{"instruction": "Write a code to filter the even numbers from the following array:", "input": "my_array = [1,2,3,4,5,6]", "output": "even_numbers = []\nfor number in my_array:\n    if number % 2 == 0:\n        even_numbers.append(number)\n\nprint(even_numbers)"}
{"instruction": "Suppose a set of n numbers and write a program to calculate the median", "input": "int[] numbers = {3,7,5,14,15,17};", "output": "int n = numbers.length;\n\nif (n % 2 == 0) {\n \u00a0  // if n is even\n    int m = n/2;\n    double median = (numbers[m-1] + numbers[m]) / 2.0\n} else {\n \u00a0  // if n is odd\n    int m = (n+1) / 2;\n    double median = numbers[m-1];\n}"}
{"instruction": "How do I create a function that sums two integers in Python?", "input": "", "output": "def add_two_ints(a, b):\n    return a + b"}
{"instruction": "Output the Fibonacci sequence from 0 to 15.", "input": "", "output": "The Fibonacci sequence from 0 to 15 is 0, 1, 1, 2, 3, 5, 8, 13."}
{"instruction": "Create a HTML page with a form containing two input boxes, one to enter a number and another to enter an operator (+, -, *, /).", "input": "", "output": "<html>\n<head>\n <title>Calculator Form</title>\n</head>\n<body>\n <form action=\"/calculate\" method=\"post\">\n   <input type=\"number\" name=\"num1\" placeholder=\"Enter a number\" required>\n   <input type=\"text\" name=\"operator\" placeholder=\"Enter an operator (+, -, *, /)\" required>\n   <input type=\"number\" name=\"num2\" placeholder=\"Enter a number\" required>\n   <input type=\"submit\" value=\"Calculate\">\n </form>\n</body>\n</html>"}
{"instruction": "Create an interface for a number guessing game using HTML, CSS, and JavaScript.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Number Guessing Game</title>\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n        }\n        #guessing-game-container {\n            min-height: 100vh;\n            padding: 20px;\n            background: #f5f5f5;\n            text-align: center;\n        }\n        .form-group {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            flex-direction: column;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"guessing-game-container\">\n        <div>\n            <h1>Guess a number between 1 and 100!</h1>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"guess\">Guess:</label>\n            <input type=\"number\" id=\"guess\">\n        </div>\n        <button id=\"submit-guess-btn\">Submit</button>\n        <div id=\"guess-notification\">\n        </div>\n    </div>\n</body>\n<script>\n    const minNum = 1;\n    const maxNum = 100;\n    let correctNum = Math.floor(Math.random() * (maxNum - minNum + 1)) + minNum;\n    const submitBtn = document.getElementById(\"submit-guess-btn\");\n    const guessNotification = document.getElementById(\"guess-notification\");\n\n    submitBtn.addEventListener(\"click\", function() {\n        const guessInput = document.getElementById(\"guess\");\n        const guess = parseInt(guessInput.value);\n        if (Number.isNaN(guess)) {\n            guessNotification.innerHTML = \"Please enter a valid number\";\n        } else if (guess < minNum || guess > maxNum) {\n            guessNotification.innerHTML = `Number must be between ${minNum} and ${maxNum}`;\n        } else if (guess !== correctNum) {\n            guessNotification.innerHTML = `Guess is ${guess < correctNum ? \"too low\" : \"too high\"}`;\n        } else {\n            guessNotification.innerHTML = \"Correct!\";\n        }\n    });\n</script>\n</html>"}
{"instruction": "Create a program that prints out the set of all prime divisors of a given number", "input": "num = 50", "output": "primes = []\nfor i in range(2, num+1):\n    is_prime = True\n    for j in range(2, int(i**0.5)+1):\n        if (i % j) == 0:\n            is_prime = False\n            break\n\n    if is_prime:\n        primes.append(i)\n\nprime_divisors = {i for i in primes if num % i == 0}\nprint(prime_divisors)"}
{"instruction": "Update the code so that it only prints out the lines which contain the word \u201cprint\u201d.", "input": "src_code = \"\"\"if x == 1:\n print \"hello\"\n if y == 2:\n print \"world\"\n print \"!\"", "output": "src_code = \"\"\"if x == 1:\n print \"hello\"\n if y == 2:\n print \"world\"\n print \"!\"\n\n# updated code\nlines = src_code.splitlines()\n\nfor line in lines:\n if \"print\" in line:\n print(line)"}
{"instruction": "Generate a regular expression which matches the following strings: \u201cRun\u201d, \u201cRune\u201d, \u201cRunner\u201d", "input": "", "output": "Regex: r'Run(e?)r?'"}
{"instruction": "Create a Python class called \"Car\" which has the \"model\" and \"year\" parameters.", "input": "", "output": "class Car:\n  def __init__(self, model, year):\n    self.model = model\n    self.year = year"}
{"instruction": "Convert this number from decimal to binary.", "input": "128", "output": "10000000"}
{"instruction": "Create an HTML form that asks for the user's name and age.", "input": "", "output": "<form>\n <label for=\"name\">Name:</label>\n <input type=\"text\" name=\"name\" id=\"name\">\n <br>\n <label for=\"age\">Age:</label> \n <input type=\"number\" name=\"age\" id=\"age\">\n</form>"}
{"instruction": "Given a two-dimensional array, write a code to print the elements column-wise.", "input": "[[1, 2], [3, 4], [5, 6]]", "output": "# Define a function to print elements column-wise \ndef print_columnwise(arr):\n\n # Get the number of rows and columns\n num_rows = len(arr)\n num_cols = len(arr[0])\n \n # Initialize the columns \n k = 0\n\n # Iterate through the rows\n while k < num_cols :\n  # Iterate through the columns\n  for i in range(num_rows):\n   # Print the element\n   print(arr[i][k], end=\" \")\n  \n  # Update the column\n  k = k + 1\n  print()\n\n# Get the array\narr = [[1, 2], [3, 4], [5, 6]]\n\n# Print the elements column-wise \nprint_columnwise(arr)"}
{"instruction": "What is the maximum value of a byte in a binary system?", "input": "", "output": "The maximum value of a byte in a binary system is 255. This is because there are 8 bits in a byte, and the maximum value each bit can have is 1, giving a maximum value of 8 ones, or 255 in the denary system."}
{"instruction": "Write a code to reverse each element of an array", "input": "array = ['apple','dog','cat','mouse','ball']", "output": "def reverse_array(array):\n    reversed_array = []\n\n    for elem in array:\n        reversed_array.append(elem[::-1])\n    \n    return reversed_array\n\nif __name__ == '__main__':\n    print(reverse_array(array))"}
{"instruction": "Recognize the type of a credit card from the given string of numbers.", "input": "4111 2029 3219 9480", "output": "Visa"}
{"instruction": "Deducde whether the following code is a valid Java statement", "input": "345=num;", "output": "false"}
{"instruction": "Create an if-else statement in C++ to check whether a given number is odd or even.", "input": "", "output": "if (num %2 == 0)\n{\n    cout<< \"The num is even\" <<endl;\n}\nelse \n{\n    cout<< \"The num is odd\" <<endl;\n}"}
{"instruction": "Design an algorithm to check if a given string can be converted to a palindrome.", "input": "", "output": "We can use a two pointer approach to traverse the string and compare the leftmost and rightmost characters. If the characters are not equal, then the string cannot be a palindrome. We can move the left pointer one character to the right, and move the right pointer one character to the left, and compare the characters again. We keep repeating this until either the left pointer is equal to the right pointer, or the left and right pointers have crossed each other. If one of the comparisons does not result in equality, then the string cannot be converted to a palindrome. If the left pointer is equal to the right pointer, or if the two pointers have crossed each other, then the string can be converted to a palindrome."}
{"instruction": "Calculate the total number of possible binary trees with n nodes.", "input": "", "output": "def numTrees(n): \n    if n == 0: \n        return 1\n    else: \n        num = 0\n        for roots in range(1, n+1): \n            leftNum = numTrees(roots - 1) \n            rightNum = numTrees(n - roots) \n            num += leftNum * rightNum \n    return num"}
{"instruction": "Create a method in Python to generate all the prime numbers between 1 and 100.", "input": "", "output": "def prime_generator(n):\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\nprint(prime_generator(100))"}
{"instruction": "Rewrite the following program to make it print out the smallest number in a given list.", "input": "def smallestNumber(numbers):\n    largest = numbers[0]\n    for number in numbers:\n        if largest < number:\n            largest = number\n    return largest", "output": "def smallestNumber(numbers):\n    smallest = numbers[0]\n    for number in numbers:\n        if smallest > number:\n            smallest = number\n    return smallest"}
{"instruction": "Construct an array of integers from 1 to 10 in Javascript", "input": "", "output": "let myArray = [1,2,3,4,5,6,7,8,9,10];"}
{"instruction": "Modify the above C program to reverse a sentence.", "input": "", "output": "#include<stdio.h>\n#include<string.h>\n \nvoid reverse(char *str) \n{ \n    int i = strlen(str) - 1, j = 0; \n  \n    while (i > j) { \n        char temp = str[i]; \n        str[i] = str[j]; \n        str[j] = temp; \n        i--; \n        j++; \n    } \n} \n  \nvoid reverseSentence(char *str) \n{ \n    reverse(str); \n  \n    int start = 0, end; \n    while (str[start] != '\\0') { \n        if (str[start] == ' ') { \n            start++; \n            continue;  \n        } \n \n        end = start + 1; \n        while (str[end] != ' ' && str[end] != '\\0') \n            end++; \n \n        reverse(str + start, end - start); \n  \n\t\tstart = end; \n    } \n} \n  \nint main() \n{ \n    char str[100] = \"How are you?\"; \n    reverseSentence(str); \n    printf(\"%s\", str); \n    return 0; \n}"}
{"instruction": "Write a JavaScript function to convert a given number to its Roman numeral equivalent.", "input": "", "output": "function toRoman(num) {\n    // store roman equivalents of numbers\n    var romanNumerals = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L'\n    };\n  \n    // array to store roman numeral\n    var roman = [];\n  \n    // loop to check for roman equivalents\n    for (let i = Object.keys(romanNumerals).length; i >= 0; i--) {\n        let div = Math.floor(num / Object.keys(romanNumerals)[i]);\n        let rem = num % Object.keys(romanNumerals)[i];\n  \n        if (div > 0) {\n            roman.push(romanNumerals[Object.keys(romanNumerals)[i]].repeat(div));\n            num = rem;\n        }\n    }\n  \n    // return the new created string\n    return roman.join(\"\");\n}"}
{"instruction": "Construct a MySQL query to select certain columns from the table \"Books\".", "input": "", "output": "SELECT title, author FROM Books;"}
{"instruction": "Complete the following code to delete the item at a given index from a list.", "input": "index = 4\nlist_items = [2, 3, 4, 5, 6, 7, 8]", "output": "\"\"\"\nComplete the following code to delete the item at a given index from a list\n\"\"\"\n\nindex = 4\nlist_items = [2, 3, 4, 5, 6, 7, 8]\n\n# remove the item at index 4\ndel list_items[index]\n\n# print the list\nprint(list_items)"}
{"instruction": "Write a MySQL query to select the product name and price for products whose name start with \"A\".", "input": "", "output": "SELECT product_name, price FROM products WHERE product_name LIKE 'A%';"}
{"instruction": "Prompt the user to enter a year and output whether it is a leap year or not.", "input": "", "output": "year = int(input(\"Please enter a year: \"))\n\nif (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n    print(\"It is a leap year.\")\nelse:\n    print(\"It is not a leap year.\")"}
{"instruction": "Create a new data structure to store the following information and write an algorithm to access it.", "input": "Key: \"B\"\n Value: \"Blue\"", "output": "data_structure = {\n    \"B\": \"Blue\"\n}\n\ndef access_data_structure(key):\n    return data_structure.get(key)"}
{"instruction": "Create an array which contains the squares of the numbers 0 to 10.", "input": "", "output": "squares = [i*i for i in range(11)]"}
{"instruction": "Create an Angular Directive for a text box that alerts when its contents change.", "input": "", "output": "import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n selector: '[appNotifyOnChange]'\n})\nexport class NotifyOnChangeDirective {\n constructor(private el: ElementRef) { }\n\n@HostListener('input', ['$event'])\nonChange(event) {\n alert('Value changed to: ' + event.target.value);\n}\n}"}
{"instruction": "Create a function that takes two parameters, a string and an integer, and prints the string the given number of times.", "input": "string = \"Hello\"\nnumber = 3", "output": "def printString(string, number):\n    for i in range(number):\n        print(string)\n\nprintString(string, number)"}
{"instruction": "Design a machine learning model to classify an article as either a sports article or a food article.", "input": "", "output": "The machine learning model can be designed as a sequence of layers built with Keras, followed by a dense layer with two units \u2013 one for sports and one for food, and a softmax activation function to achieve the final output. We can feed the model with a dataset consisting of article texts labeled as 'sports' or 'food'. Then, the model can be trained using gradient descent. After training is complete, the model can be used to classify new articles as either 'sports' or 'food' articles."}
{"instruction": "Write a function that takes two strings and determines whether one string is an anagram of the other.", "input": "string1 = 'listen';\nstring2 = 'silent'", "output": "function isAnagram(string1, string2) {\n  const s1 = string1.split('').sort().join('');\n  const s2 = string2.split('').sort().join('');\n  return s1 === s2;\n}"}
{"instruction": "Write a SQL query to find all records from the \"people\" table that have a last name that begins with \"Smith\".", "input": "", "output": "SELECT *\n FROM people\n WHERE last_name LIKE 'Smith%';"}
{"instruction": "Fill in the blanks in the following SQL query to select the names of customers who have placed more than one order.", "input": "SELECT customer_name FROM Orders WHERE order_count __________ 1", "output": "SELECT customer_name FROM Orders WHERE order_count > 1"}
{"instruction": "Convert a number in base 10 to binary", "input": "num = 5", "output": "def base10_to_binary(num):\n    binary_num = ''\n    while num > 0:\n        remainder = num % 2\n        binary_num = str(remainder) + binary_num\n        num = num // 2\n    return binary_num\n\nbase10_to_binary(5)  # '101'"}
{"instruction": "Read the given input, and write a Python code to create a dictionary which contains unique elements as keys and their corresponding count as values.", "input": "Input: ['a',\"a\",'b',1,1,1,'c']", "output": "my_list = ['a',\"a\",'b',1,1,1,'c']\nmy_dict = {}\nfor i in my_list:\n    my_dict[i] = my_dict.get(i, 0) + 1\n\nprint(my_dict) \n# Output: {'a': 2, 'b': 1, 1: 3, 'c': 1}"}
{"instruction": "Generate a valid JSON object from the given input content.", "input": "Name: John Doe\nAge: 33\nGender: Male", "output": "{\n    \"name\": \"John Doe\",\n    \"age\": 33,\n    \"gender\": \"Male\"\n}"}
{"instruction": "Perform checksum calculation on the following string \"HelloWorld\".", "input": "", "output": "// Function to calculate the checksum of a given string \n// *str is the given string \nlong calculateChecksum(string str) \n{ \n\tlong checksum = 0; \n  \n\tfor (int i = 0; i < str.length(); i++) { \n\t\tchecksum += str.at(i); \n\t} \n\treturn checksum; \n} \n// Output: checksum = 483 (for \"HelloWorld\")"}
{"instruction": "Replace the values in the following array with its cumulative sum.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def cumulative_sum(arr):\n    cum_sum = []\n    temp_sum = 0\n    for num in arr:\n        temp_sum += num\n        cum_sum.append(temp_sum)\n    return cum_sum\n\narr = [1, 2, 3, 4, 5] \ncum_sum = cumulative_sum(arr)\n\nprint(cum_sum)  # Output: [1, 3, 6, 10, 15]"}
{"instruction": "Format a given date as mm/dd/yyyy using C++.", "input": "Date: April 14, 2021", "output": "#include <iostream>\n#include <ctime>\n\nint main() \n{\n  time_t now = time(0);\n  tm *ltm = localtime(&now);\n  ltm->tm_mon = 3;  // set month to April\n  ltm->tm_mday = 14; // set date to 14\n  \n  std::cout << std::put_time(ltm, \"%m/%d/%Y\") << '\\n';\n  return 0;\n}\n\n// Output: 04/14/2021"}
{"instruction": "For each tuple in a given list, write a function to get the first element.", "input": "[(1,2), (3,4), (5,6)]", "output": "def get_first_element(tuples):\n  return [t[0] for t in tuples]"}
{"instruction": "What is the most efficient way to count the number of characters in a string in C++?", "input": "", "output": "#include <iostream> \n#include <string> \n \nusing namespace std; \n \nint main() \n{ \n    string my_string = \"Count characters in this string.\";\n    int count = 0;\n    for (char c : my_string) \n        count++; \n    cout << \"Number of characters in the string : \" << count; \n    return 0; \n}"}
{"instruction": "Develop a code to check whether a number is a palindrome.", "input": "Number: 1234321", "output": "\"\"\"\ndef is_palindrome(num):\n    # Initializing variables\n    n = num\n    rev = 0\n    while (n > 0):\n        # Storing the remainder\n        rev = (rev * 10) + n % 10\n\n        # Updating n\n        n //= 10\n\n    # Checking if the reversed number is equal to the given number\n    if (num == rev):\n        return True\n\n    return False\n\n# Function call\nprint(is_palindrome(1234321))\n\"\"\"\n\nOutput: True"}
{"instruction": "Write a function for finding the minimum value in a given array.", "input": "", "output": "def find_min(arr):\n    min_value = arr[0]\n    for element in arr:\n        if (element < min_value):\n            min_value = element\n    return min_value"}
{"instruction": "Offer a solution for converting a bank of binary strings, represented as an array, to Decimal numbers.", "input": "", "output": "def binaryToDecimal(binary): \n    # to store decimal number \n    decimal, i = 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i = i + 1\n    return decimal"}
{"instruction": "Edit the given code to reverse a given array in JavaScript.", "input": "let arr = [1, 2, 3, 4, 5];", "output": "let arr = [1, 2, 3, 4, 5];\narr.reverse();\nconsole.log(arr);"}
{"instruction": "Modify this C program to minimize the number of lines without applying the ternary operator.", "input": "int min = num1 < num2 ? num1 : num2;", "output": "int min;\nif (num1 < num2) {\n   min = num1;\n} else {\n   min = num2;\n}"}
{"instruction": "Write a Swift code snippet to create a button with user specified text and size.", "input": "", "output": "let button = UIButton()\nbutton.setTitle(\"Button Title\", for: .normal)\nbutton.frame = CGRect(x: 0, y: 0, width: 100, height: 50)\nview.addSubview(button)"}
{"instruction": "Create a MongoDB query to find all documents where the 'name' field contains the string 'alex'.", "input": "", "output": "db.collection.find({\"name\": {$regex : /alex/i}})"}
{"instruction": "Create a program to accept a string and display its length.", "input": "", "output": "def getLength(string): \n    length = len(string) \n    return length \n  \nresult = getLength(\"GPT\")\nprint(result)"}
{"instruction": "Edit the following JSON code to include the given data.", "input": "{\n  \"users\": \n  [\n    { \n      \"name\": \"John\"\n    } \n  ]\n}\n\nNew data to add:\nname: \"Jane\",\nage: 25", "output": "{\n  \"users\": \n  [\n    { \n      \"name\": \"John\"\n    },\n    { \n      \"name\": \"Jane\",\n      \"age\": 25\n    }\n  ]\n}"}
{"instruction": "Use the function to debug the given program and prevent the segmentation fault.", "input": "#include <stdio.h>\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int n = 5;\n    int i;\n    // TODO\n    for (i = 0; i <= n; i++) {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n}", "output": "#include <stdio.h>\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int n = 5;\n    int i;\n    // Limit loop size to the length of the array\n    for (i = 0; i < n; i++) {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n}"}
{"instruction": "Can you retrieve the item at index 3 from the following array?", "input": "int[] arr = {11, 30, 45, 19, 20, 60};", "output": "int itemAtIndex3 = arr[3];\n// itemAtIndex3 is equal to 19"}
{"instruction": "Write a Python function to calculate the sum of the areas of a given list of circles, where each circle is defined as a dictionary containing 'radius' and 'x' as keys.", "input": "[{'radius': 3, 'x': 5}, {'radius': 4, 'x': 7}, {'radius': 5, 'x': 9}]", "output": "def sum_areas(circles):\n total = 0\n for circle in circles:\n area = 3.14 * circle['radius'] ** 2\n total += area\n return total"}
{"instruction": "Design a program to create a new string with the characters of the first string in the reverse order.", "input": "String = \"Hello World\"", "output": "def reverse(str): \n    return str[::-1] \n  \n# Driver Code \nstr = \"Hello World\"\nprint(\"Reverse string:\",reverse(str))"}
{"instruction": "Create a Chrome extension that highlights hyperlinks in green.", "input": "", "output": "// Create a new class to extend Google's Chrome Extension\nclass LinkHighlighter extends Chrome Extension {\n\n// Initialize Manifest.json\n\tmanifest: {\n\t\"name\": \"Link Highlighter\",\n\t\"author\": \"Your Name Here\",\n\t\"version\" : \"1.0\",\n    \"description\" : \"Highlights all hyperlinks in green.\",\n\t\"browser_action\": {\n\t\t\"default_title\": \"Link Highlighter\"\n\t}\n}\n\n// Use 'onStartup()' to set rules for all hyperlinks\nonStartup() {\n\tbrowser.webNavigation.onCommitted.addRules([\n\t  {\n\t\tconditions: [\n\t\t  new browser.webNavigation.PageStateMatcher({\n\t\t\tpageUrl: {urlContains: 'http://'},\n\t\t  })\n\t\t],\n\t\tactions: [ new browser.declarativeContent.ShowPageAction() ]\n\t  }\n\t]);\n}\n\n// Create the engine to inject a CSS into the page\n  injectCSS() {\n\tvar headElmts = document.getElementsByTagName(\"head\");\n\tvar styleElmt;\n\tif (headElmts.length) {\n\t  styleElmt = document.createElement(\"style\");\n\t  headElmts[0].appendChild(styleElmt);\n\t}\n\t\n\t// Include the CSS to style the link.\n\tstyleElmt.innerHTML  = 'a { color : green !important; }';\n  }\n  \n  // Execute the engine to inject the CSS\n  injectCSS();\n\n}"}
{"instruction": "Write a for loop to iterate through a list of integers and print out the square of each value.", "input": "numbers = [1, 2, 3, 4]", "output": "for num in numbers:\n    print(num**2)"}
{"instruction": "Create a regular expression to determine if a word is in the form of a palindrome.", "input": "", "output": "^(.)(?:(.)(?<=\\2))?\\1?$"}
{"instruction": "Parse the given string and return a dictionary with the keys and corresponding values.", "input": "s = \"name seth age 30 occupation manager\"", "output": "d = {'name': 'seth', 'age': '30', 'occupation': 'manager'}"}
{"instruction": "Write a code to get the current weather information for a given city.", "input": "city = \"New York\"", "output": "import requests\nimport json\n\ndef get_weather_information(city):\n    url = 'http://api.openweathermap.org/data/2.5/weather?q={},<APIKEY>'.format(city)\n\n    response = requests.get(url)\n    data = json.loads(response.text)\n    return data\n\nif __name__ == '__main__':\n    print(get_weather_information(\"New York\"))"}
{"instruction": "Find the running time of this code snippet.", "input": "list = [2, 5, 1, 6, 9]\nx = 0\n\nfor item in list:\n    x += item", "output": "The running time of this code snippet is O(n), where n is the length of the list."}
{"instruction": "Develop an algorithm that checks for balanced parentheses in a given string.", "input": "", "output": "def is_balanced(input_string):\n    stack = []\n    for char in input_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"instruction": "Construct an XPath query to select all <h2> tags from a web page", "input": "", "output": "//h2"}
{"instruction": "Swap the contents of two variables.", "input": "a = 10\nb = 15", "output": "a, b = b, a"}
{"instruction": "Suggest a machine learning model for predicting stock prices.", "input": "", "output": "A possible machine learning model for predicting stock prices is the Long Short-Term Memory (LSTM) Neural Network. This model is widely used for forecasting time-series data, such as stock prices. It is capable of capturing long-term dependencies and has been used successfully to make accurate predictions in many areas."}
{"instruction": "Modify the below code so that it swaps two variables without the use of a temporary variable.", "input": "int a = 10, b = 20; \nint temp; \ntemp = a; \na = b; \nb = temp;", "output": "int a = 10, b = 20; \na = a + b; \nb = a - b;\na = a - b;"}
{"instruction": "Write a code which reverses the order of items in an array", "input": "my_list = [1,2,3,4,5]", "output": "# Reversing the order of items in an array\n\ndef reverse_order(input_list):\n return input_list[::-1] \n\nmy_list = [1,2,3,4,5]\nprint(reverse_order(my_list))\n\n# Output: [5, 4, 3, 2, 1]"}
{"instruction": "Create a C++ class named 'Student' with private member data including age and name.", "input": "", "output": "class Student\n{\nprivate:\n    int age;\n    string name;\npublic:\n    Student(int a, string n) : age(a), name(n) {}\n    int getAge() { return age; }\n    string getName() { return name; }\n    void setAge(int a) { age = a; }\n    void setName(string n) { name = n; }\n};"}
{"instruction": "Write Java code to calculate the sum of first n natural numbers.", "input": "", "output": "public class SumNatural {\n    public static void main(String[] args) {\n        int num = 20, sum = 0;\n        for(int i = 1; i <= num; ++i)\n        {\n            sum += i;\n        }\n        System.out.println(\"Sum = \" + sum);\n    }\n}"}
{"instruction": "Write code to find the longest substring of unique characters in a given string.", "input": "string = 'abcabcbb'", "output": "def find_longest_substring(string):\n    \"\"\"\n    Finds the longest substring of unique characters in a given string.\n    \"\"\"\n    longest_substring = ''\n    current_substring = ''\n    for ch in string:\n        if ch not in current_substring:\n            current_substring += ch\n            if len(current_substring) > len(longest_substring):\n                longest_substring = current_substring\n        else:\n            current_substring = ch\n    return longest_substring"}
{"instruction": "Modify the following code to skip the test if the platform is not windows.", "input": "import platform\n\ndef test_windows():\n    if platform.system() == 'Windows':\n        # Do test", "output": "import platform\n\ndef test_windows():\n    if platform.system() != 'Windows':\n        return\n    # Do test"}
{"instruction": "Using the numpy library, create a 3x3 Identity Matrix.", "input": "", "output": "iden_matrix = numpy.identity(3) \nprint(iden_matrix)"}
{"instruction": "Write a C# class which implements two-dimensional array searching using binary search algorithms.", "input": "", "output": "public class BinarySearch2D\n{\n    public void Search(int[,] matrix, int target)\n    {\n        if (matrix == null || matrix.GetLength(0) == 0 || matrix.GetLength(1) == 0) \n            return;\n        \n        int rows = matrix.GetLength(0);\n        int columns = matrix.GetLength(1);\n        \n        int row = 0;\n        int column = columns - 1;\n        \n        while (row < rows && column >= 0)\n        {\n            if (matrix[row, column] == target)\n            {\n                Console.WriteLine($\"Target found at row: {row} and column: {column}\");\n                return;\n            }\n            else if (matrix[row, column] > target)\n            {\n                column--;\n            }\n            else\n            {\n                row++;\n            }\n        }\n    }\n}"}
{"instruction": "Create a function that can concatenate two lists into a string separated by comma.", "input": "[1, 2, 3] [4, 5, 6]", "output": "\"\"\"\nCreate a function that can concatenate two lists into a string separated by comma\n\"\"\"\ndef concat_lists(list1, list2):\n  return ','.join([str(i) for i in list1 + list2]) \n  \nif __name__ == '__main__':\n    print(concat_lists([1, 2, 3], [4, 5, 6]))"}
{"instruction": "Edit the given sql query to return all employee details having age greater than 30", "input": "SELECT * FROM employees;", "output": "SELECT * FROM employees WHERE age > 30;"}
{"instruction": "What type of function does the following code represent?", "input": "function foo(x, y) {\n return x * y;\n}", "output": "This code represents a multiplication function."}
{"instruction": "How many elements does the following array contain?", "input": "Array: [4, 6, 1, 9, 7]", "output": "5"}
{"instruction": "Explain what is Cross-validation in Machine Learning.", "input": "", "output": "Cross-validation is a technique used to evaluate a machine learning model by dividing the dataset into training and validation sets. The model is trained on the training set, and its performance is evaluated on the validation set. In other words, cross-validation is a method for selecting model hyperparameters and for assessing performance of a model. It is a technique used to ensure that we are not overfitting to the training data and evaluate the accuracy of a model on unseen data. This can be done by splitting the data into a set of folds, typically 5 - 10, and running model training and testing k times, with each time one of the folds as the validation set and the other folds as the training set. The result of this process is the average validation accuracy across the k folds of the data. This gives us a better understanding of how the model will perform in production."}
{"instruction": "Generate a random letter between a and z.", "input": "", "output": "p"}
{"instruction": "Show the output of the following array when it is printed in the console.", "input": "let arr = [5, 8, 15, 7];", "output": "[5, 8, 15, 7]"}
{"instruction": "Write a code snippet to remove all white spaces from a given string in JavaScript.", "input": "\" Hello World! \"", "output": "let outputString = \"Hello World!\";\noutputString = outputString.replace(/\\s/g, '');  // removes white spaces\nconsole.log(outputString);"}
{"instruction": "Write a SQL query to find the name and the average value of all the transactions for each customer.", "input": "", "output": "SELECT customer.name, AVG(transaction.value) \nFROM customer \nINNER JOIN transaction\nON customer.customer_id = transaction.customer_id\nGROUP BY customer.name"}
{"instruction": "Write a Ruby script that converts a given number in degree Celsius to Fahrenheit.", "input": "52", "output": "celsius = 52\nfahrenheit = (celsius * 9/5) + 32\nputs \"The temperature in fahrenheit is #{fahrenheit} degrees\""}
{"instruction": "Write a function to traverse a tree using depth-first search algorithm in Java.", "input": "", "output": "public void traverseTree(Node root) {\nS tack<Node> stack = new Stack<>();\nstack.push(root);\nwhile (!stack.isEmpty()) {\n    Node node = stack.pop();\n    // Process the node\n    if (node.right != null)\n        stack.push(node.right);\n    if (node.left != null)\n        stack.push(node.left);\n    }\n}"}
{"instruction": "Write a code to perform a depth-first search on a binary search tree.", "input": "", "output": "\"\"\"\nA code to perform a depth-first search on a binary search tree\n\"\"\"\n\n# Node class \nclass Node: \n  \n    # Constructor to create a new node \n    def __init__(self, key): \n        self.key = key  \n        self.left = None\n        self.right = None\n  \n# A function to do inorder tree traversal \ndef depth_first_search(root): \n  \n    if root is not None: \n        print(root.key, end=\" \") \n        depth_first_search(root.left) \n        depth_first_search(root.right) \n  \nif __name__ == '__main__': \n    root = Node(1) \n    root.left      = Node(2) \n    root.right     = Node(3) \n    root.left.left  = Node(4) \n    root.left.right  = Node(5) \n  \n    print(\"Depth First Search:\")\n    depth_first_search(root)"}
{"instruction": "Create a JSON object in JavaScript.", "input": "", "output": "const myObject = { \n  \"name\": \"John Doe\", \n  \"age\": 25, \n  \"languages\": [\"English\",\"Spanish\"]\n}"}
{"instruction": "Using CSS, style the <h1> tag with font color, font size, and font family of your choice.", "input": "", "output": "h1 {\n  color: #000000;\n  font-size: 24px;\n  font-family: Arial, Helvetica, sans-serif;\n}"}
{"instruction": "Develop a C++ program for finding the area of a circle.", "input": "4", "output": "#include<iostream>\n#include<cmath>\n \nusing namespace std;\n \n// Function to calculate area of circle\ndouble findArea(int rad)\n{\n    return (3.17 * pow(rad,2));\n}\n \n// Driver Code\nint main()\n{\n    int radius;\n \n    cin>>radius;\n \n    cout<<\"Area of a Circle is \"<<findArea(radius);\n    return 0;\n}"}
{"instruction": "Compare two strings in C# and return a Boolean indicating whether they are anagrams.", "input": "string1 = \"listen\";\nstring2 = \"silent\"", "output": "public static bool AreAnagrams(string string1, string string2)\n{\n    if (String.Concat(string1.OrderBy(c => c)) == \n        String.Concat(string2.OrderBy(c => c)))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\nbool result = AreAnagrams(\"listen\", \"silent\");"}
{"instruction": "Create a React component that renders a list of items.", "input": "items = [\"Apple\", \"Banana\", \"Cherry\"]", "output": "import React from 'react';\n\nconst ListView = (props) => {\n    return (\n        <div>\n            {\n                props.items.map((item, index) => (\n                    <li key={index}>{item}</li>\n                ))\n            }\n        </div>\n    );\n}\n\nexport default ListView;"}
{"instruction": "Write a SQL query to find the top 3 highest paying employee\u2019s name and salary.", "input": "", "output": "SELECT TOP 3 name, salary FROM employees ORDER BY salary DESC;"}
{"instruction": "Format the following list in descending order of number of characters in each string.", "input": "list = ['Hello', 'World', 'Technology']", "output": "def sort_list(list):\n    for i in range(len(list)):\n        for j in range(0, len(list)-i-1):\n            if len(list[j]) < len(list[j+1]):\n                list[j], list[j+1] = list[j+1], list[j]\n    return list\n\nsort_list([\"Hello\", \"World\", \"Technology\"])"}
{"instruction": "Generate a function which will validate a phone number using regular expression.", "input": "", "output": "def validate_phone(phone_number):\n    regex = '^\\+?(\\d[\\d-. ]+)?(\\([\\d-. ]+\\))?[\\d-. ]+\\d$'\n    if re.match(regex, phone_number):\n        return True\n    return False"}
{"instruction": "Write a function to generate anagrams for a given string", "input": "str = \"cat\"", "output": "import itertools\n\ndef anagrams(str):\n    return [\"\".join(permutation) for permutation in itertools.permutations(str)]\n\nprint(anagrams(str)) # Output: ['cat', 'cta', 'act', 'atc', 'tca', 'tac']"}
{"instruction": "Solve the following linear programming problem:\n\nMaximize x + y \nSubject to:\n2x + 3y \u2264 120\nx + 2y \u2264 100\nx \u2265 0, y \u2265 0", "input": "", "output": "The solution of this Linear Programming problem is x = 40 and y ="}
{"instruction": "Write a Python program to remove the elements that occur only once from a given array.", "input": "[1, 2, 2, 3, 3, 3, 4, 4]", "output": "def remove_once(arr): \n    freq_table  = {} \n    for num in arr: \n        if num in freq_table.keys(): \n            freq_table[num] += 1\n        else: \n            freq_table[num] = 1\n\n    filtered_array = [] \n    for num, freq in freq_table.items(): \n        if freq > 1: \n            filtered_array.append(num) \n    return filtered_array\n\nremove_once([1, 2, 2, 3, 3, 3, 4, 4])\n\n#Output: [2, 3, 4]"}
{"instruction": "Create a function to check whether a given value is in an array.", "input": "arr = [1,2,3,4]\nx = 2", "output": "def is_value_in_arr(arr, x):\n    if x in arr:\n        return True\n    else:\n        return False"}
{"instruction": "Identify the operations used to calculate the sum of the given array of numbers.", "input": "Array: [2, 3, 8, 9]", "output": "The sum of the given array of numbers is calculated using the addition operation."}
{"instruction": "Write a SQL query to find the cities with a population greater than 5 million.", "input": "", "output": "SELECT City\nFROM Population\nWHERE Population > 5000000;"}
{"instruction": "Find the most common word in the following paragraph and replace it with a synonym.", "input": "The quick brown fox jumps over the lazy dog.", "output": "The nimble brown fox leaps over the sluggish dog."}
{"instruction": "Build a Python dictionary that contains the names of the months as keys and the numbers of days in each month as values.", "input": "", "output": "months = {\"January\":31, \"February\":28, \"March\":31, \"April\":30, \"May\":31, \"June\":30, \"July\":31, \"August\":31, \"September\":30, \"October\":31, \"November\":30, \"December\":31}"}
{"instruction": "Write a function that takes two strings as input,one being a base string and other being a sub-string and returns True if sub-string appears in base string and False otherwise.", "input": "Base string = \"I am a coding enthusiast\"\nSub-string = \"coding\"", "output": "True"}
{"instruction": "Create an object that stores the following key, value pairs: {name: John, age: 20, nationality: American}.", "input": "", "output": "Object person = {\n    \"name\": \"John\",\n    \"age\": 20,\n    \"nationality\": \"American\"\n};"}
{"instruction": "Transform the following array into a string of comma-separated values in Python.", "input": "[1, 2, 3, 4]", "output": "','.join([str(i) for i in [1, 2, 3, 4]]) # returns \"1,2,3,4\""}
{"instruction": "You need to check if a variable is an integer or not.", "input": "", "output": "def is_integer(variable):\n    return isinstance(variable, int)"}
{"instruction": "Parse this string to extract the integer value.", "input": "value = 'The integer value is 12'", "output": "import re\nvalue = 'The integer value is 12'\n \nm = re.search(r'\\d+', value)\nprint(int(m.group(0)))"}
{"instruction": "Write a REGEX pattern to match strings consisting of three numbers separated by a dash.", "input": "", "output": "^\\d{1,3}-\\d{1,3}-\\d{1,3}$"}
{"instruction": "Parse this JSON data and print out the \u201crating\u201d of every item in the list.", "input": "{\n    \"ratings\": [\n        {\"title\": \"Frozen II\", \"rating\": 7.5},\n        {\"title\": \"The Irishman\", \"rating\": 8.2},\n        {\"title\": \"Parasite\", \"rating\": 8.5},\n    ]\n}", "output": "import json\n\ndata = {\n    \"ratings\": [\n        {\"title\": \"Frozen II\", \"rating\": 7.5},\n        {\"title\": \"The Irishman\", \"rating\": 8.2},\n        {\"title\": \"Parasite\", \"rating\": 8.5},\n    ]\n}\n\ndata = json.loads(data)\n\nfor item in data['ratings']:\n    print(\"Rating for %s: %f\" % (item['title'], item['rating']))"}
{"instruction": "Generate a set of SQL commands to list all the customers and their email addresses in a table named customers.", "input": "", "output": "SELECT *\nFROM customers\nORDER BY email;"}
{"instruction": "Construct a SQL query to get all CustomerIDs from the Orders table if their OrderTotal is greater than 500.", "input": "", "output": "SELECT CustomerID\nFROM Orders\nWHERE OrderTotal > 500;"}
{"instruction": "Suggest an algorithm to compute the sum of all prime numbers from 2 to n.", "input": "", "output": "def sum_primes(n):\n    # Initialize sum to 0\n    sum_prime = 0\n\n    # Iterate through all numbers from 0 to n\n    for num in range(2, n+1):\n        is_prime = True\n        \n        # Check whether the number is prime\n        for div in range(2, num):\n            if num % div == 0:\n                is_prime = False\n                break\n        \n        # If the number is prime, add it to the sum\n        if is_prime:\n            sum_prime += num\n\n    # Return the sum\n    return sum_prime"}
{"instruction": "What does a negative index signify in a Python array?", "input": "", "output": "A negative index in a Python array is used to access elements from the end of the array, where the last element of the array is at index -1."}
{"instruction": "Write a JavaScript code to print the current day in the week.", "input": "", "output": "const day = new Date().getDay();\nlet dayString;\n\nswitch (day) {\n  case 0:\n    dayString = \"Sunday\";\n    break;\n  case 1:\n    dayString = \"Monday\";\n    break;\n  case 2:\n    dayString = \"Tuesday\";\n    break;\n  case 3:\n    dayString = \"Wednesday\";\n    break;\n  case 4:\n    dayString = \"Thursday\";\n    break;\n  case 5:\n    dayString = \"Friday\";\n    break;\n  case 6:\n    dayString = \"Saturday\";\n    break;\n  default:\n    dayString = \"Unknown\";\n}\n\nconsole.log(dayString);"}
{"instruction": "Calculate the area of a rectangle given height and width.", "input": "height = 2\nwidth = 5", "output": "def area_rectangle(height, width):\n    return height*width\n\nif __name__ == '__main__':\n    print(area_rectangle(2, 5))"}
{"instruction": "Use the given array and print the second element using its index.", "input": "Array: [2, 3, 4, 5, 6]", "output": "console.log(arr[1]); // prints 3"}
{"instruction": "Create an if-else statement in Java that prints \"Yes!\" if an integer is 5 and prints \"No!\" if an integer is not 5.", "input": "", "output": "if (int == 5) {\n System.out.println(\"Yes!\");\n}\nelse {\n System.out.println(\"No!\");\n}"}
{"instruction": "Update the given code to add a statement to check if the input number is a prime or not.", "input": "num = 5", "output": "flag = 0\nfor i in range(2, num):\n  if num % i == 0:\n    flag = 1\nif flag == 0:\n  print(\"The number is a prime.\")"}
{"instruction": "Design an algorithm that computes the minimum number of moves taking an array of integers to a sorted array.", "input": "[1, 3, 5, 4, 2]", "output": "def minMoves(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\n    return moves"}
{"instruction": "Create a shell script to display welcome message.", "input": "", "output": "#!/bin/bash\n# display welcome message\necho \"Welcome to Coding!\""}
{"instruction": "Write a function in SQL to find the maximum value in a table", "input": "Table name: scores", "output": "SELECT MAX(score) \n  FROM scores;"}
{"instruction": "Construct an SQL query to get the total sales of each customer.", "input": "TABLE customers {\n   id INT,\n   name VARCHAR(90)\n}\n\nTABLE orders {\n   order_id INT\n   customer_id INT\n   total DEC(10,2)\n}", "output": "SELECT c.name, SUM(o.total)\nFROM customers c\nJOIN orders o\nON c.id = o.customer_id\nGROUP BY c.name;"}
{"instruction": "Write a JavaScript function that will take a string and returns the reverse of that string", "input": "", "output": "function reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n  }"}
{"instruction": "Find the area of a square with a given side.", "input": "Side: 6", "output": "36"}
{"instruction": "Create a function in R which returns the number of rows in a dataframe.", "input": "", "output": "number_of_rows <- function(dataframe) {\n  return (nrow(dataframe))\n}"}
{"instruction": "Suggest a functional Node.js program to output the unique elements of an array.", "input": "let array = [2, 3, 4, 1, 3]", "output": "let array = [2, 3, 4, 1, 3];\nlet unique_elements = [...new Set(array)];\nconsole.log(unique_elements); // [2, 3, 4, 1]"}
{"instruction": "Given a list of strings, write a function that filters out all strings that have length less than two characters.", "input": "my_list = [\"Hello\",\"Hi\",\"How\",\"Are\",\"You\"]", "output": "def filter_length(strings):\n    new_list = []\n    for string in strings:\n        if len(string) >= 2:\n            new_list.append(string)\n    return new_list\n\nmy_list = [\"Hello\",\"Hi\",\"How\",\"Are\",\"You\"]\n\nprint(filter_length(my_list))"}
{"instruction": "Rewrite the following C# program to use a for loop instead of a while loop.", "input": "int i = 0;\nwhile (i < 10)\n{\n Console.WriteLine(i);\n i++;\n}", "output": "for (int i = 0; i < 10; i++) \n{ \n Console.WriteLine(i); \n}"}
{"instruction": "Create a code that creates a 3D array of size 4x4x4.", "input": "", "output": "int[][][] array3D = new int[4][4][4];"}
{"instruction": "Create an object in JavaScript to store the name, age, and email address of a person.", "input": "", "output": "let person = {\n    name: \"John Doe\",\n    age: 25,\n    email: \"john.doe@example.com\"\n}"}
{"instruction": "How would you use an if-else statement in C# to check if a new account needs to be created for the following user?", "input": "username: \"johndoe\"\nstatus: \"inactive\"", "output": "string username = \"johndoe\";\nstring status = \"inactive\";\n\nif (status == \"inactive\") {\n    // Create new account for John Doe\n} else {\n    // No new account needs to be created\n}"}
{"instruction": "Write code to sort a given array of strings.", "input": "[\"cat\", \"dog\", \"bird\", \"fish\"]", "output": "def sort_array(arr):\n    arr.sort()\n    return arr\n\nsort_array([\"cat\", \"dog\", \"bird\", \"fish\"])\n\n# Output:\n[\"bird\", \"cat\", \"dog\", \"fish\"]"}
{"instruction": "Create a data visualization in Python using the given dataset.", "input": "Dataset: \nThe data contains information about the latest coronavirus cases per US state", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n \n# Read the dataset\ndf = pd.read_csv('data.csv')\n \n# Create visualization\nfig, ax = plt.subplots(figsize=(10,8))\nax.bar(df['State'], df['Cases'], color='#88e398')\nplt.xlabel('States')\nplt.ylabel('Coronavirus Cases')\nplt.title('Covid-19 Cases per US State')\nplt.xticks(rotation=45)\nplt.show()"}
{"instruction": "Create a method to filter out odd numbers from an array.", "input": "array = [6, 5, 9, 10, 11, 8]", "output": "def filter_odd_numbers(array): \n    result = [] \n    for i in array: \n        if i % 2 == 0: \n            result.append(i) \n    return result\n\n# Driver code\narray = [6, 5, 9, 10, 11, 8] \nprint(filter_odd_numbers(array))"}
{"instruction": "Write a function that takes in an array of strings as input and returns the longest string in the array.", "input": "[\"Apple\", \"Banana\", \"Orange\"]", "output": "string longestString(string[] strArr) {\n    string longest = \"\";\n    for (string str : strArr) {\n        if (str.length() > longest.length()) {\n            longest = str;\n        }\n    }\n    return longest;\n}"}
{"instruction": "Compute the result of 2 + 6 in JavaScript.", "input": "", "output": "let result = 2 + 6;\nconsole.log(result); // Outputs 8;"}
{"instruction": "Create a for loop which prints a Fibonacci series up to 10 numbers.", "input": "", "output": "int first = 0;\nint second = 1;\nint next;\n\nfor (int i = 0; i < 10; i++) {\n  if(i <= 1){\n    next = i;\n  }\n  else {\n    next = first + second;\n    first = second;\n    second = next;\n  }\n  cout << next << \" \";\n}"}
{"instruction": "Define the term \"polymorphism\" in programming.", "input": "", "output": "Polymorphism is a feature in object-oriented programming that allows objects to behave differently depending on the context. It is used to reduce the amount of code needed for different operations and to increase the code's maintainability. Polymorphism allows objects to be defined from a common class in which each instance can be used in a different way based on its particular context. This enables a code to work in multiple forms depending on the data input. It simplifies the coding process by allowing for a single interface to access multiple objects at the same time."}
{"instruction": "Do some data analysis and find the average of the given data.", "input": "[12, 15, 6, 8, 10, 20]", "output": "double AvgData(int[] input) {\n  double sum = 0;\n  for (int i = 0; i < input.Length; i++) {\n    sum += input[i];\n  }\n  return sum / input.Length;\n}"}
{"instruction": "Write a code to delete all items from a list with a value of 3.", "input": "mylist = [2, 3, 3, 4, 5, 6, 4, 7]", "output": "mylist = [item for item in mylist if item != 3]"}
{"instruction": "Edit the following HTML document and add a CSS style to changes the background color to blue.", "input": "<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html>", "output": "<html>\n  <head>\n    <style>\n      body {\n        background-color: blue;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html>"}
{"instruction": "Given a string, find the longest substring containing no repeated characters.", "input": "\"abcabcbb\"", "output": "def longest_substring(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \nprint(longest_substring(\"abcabcbb\")) \n# Output: 3"}
{"instruction": "Write a JavaScript function to format a given number to HH:MM:SS.", "input": "// Given a number of seconds input\nlet secs = 85", "output": "const formatTime = (secs) => {\n    let d = new Date(0);\n    d.setSeconds(secs);\n\n    let hh = d.getHours().toString().padStart(2, '0'); \n    let mm = d.getMinutes().toString().padStart(2, '0'); \n    let ss = d.getSeconds().toString().padStart(2, '0'); \n\n    return `${hh}:${mm}:${ss}`;\n}"}
{"instruction": "How to define an array in PHP?", "input": "", "output": "An array in PHP is defined using the array() function. The syntax is as follows:\n\n$array = array($element1, $element2, ...);\n\nThe elements can be of any type, such as strings, numbers, Booleans, objects, or even other arrays."}
{"instruction": "Write an SQL Query to print a list of all employees who have a higher salary than their managers.", "input": "", "output": "SELECT e1.name AS Employee, e2.name AS Manager, e1.salary AS Employee_Salary, e2.salary AS Manager_Salary\nFROM employee e1\nJOIN employee e2 ON e1.managerid = e2.employeeid\nWHERE e1.salary > e2.salary;"}
{"instruction": "Extract a specific key-value pair from the given dictionary", "input": "dic = {\"Name\": \"John\", \"age\": \"27\", \"Address\": \"Street 79\"}", "output": "Age = dic[\"age\"]"}
{"instruction": "How can we trim a specified amount of characters from the beginning of a string in Python?", "input": "", "output": "def trim_string(string, n):\n    return string[n:]"}
{"instruction": "Develop an algorithm to process a given matrix.", "input": "", "output": "def processMatrix(matrix):\n  result_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))] \n  for row in range(len(matrix)):\n    for col in range(len(matrix[0])):\n      element = matrix[row][col]\n      # perform processing on element here\n      result_matrix[row][col] = element\n  return result_matrix"}
{"instruction": "Write a function to multiply two given numbers and return the product.", "input": "num1 = 5\nnum2 = 8", "output": "def multiply(num1, num2):\n    '''This function multiplies two given numbers and returns the product.'''\n    return num1 * num2 # returns 40"}
{"instruction": "Write a SQL statement that selects the name, age and gender of every student in the database with age greater than 18.", "input": "", "output": "SELECT name, age, gender FROM students WHERE age > 18;"}
{"instruction": "Write some C code to print the following pattern:", "input": "", "output": "#include<stdio.h>\nint main(){\n\tfor(int i=1;i<=5;i++){\n\t\tfor(int j=1;j<=i;j++){\n\t\t\tprintf(\"*\");\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"}
{"instruction": "Given a dictionary, write a function to count the number of items in the dictionary.", "input": "dictionary = {'name': 'John', 'age': 30}", "output": "def count_items(dict):\n    item_count = 0\n    for key in dict:\n        item_count += 1\n    return item_count"}
{"instruction": "Given a list of student's grades, write a program to calculate their average.", "input": "Grades = [90, 95, 80, 75]", "output": "\"\"\"\nCalculate the average of a given list of grades\n\"\"\"\n\ndef average(grades):\n    sum = 0\n    for grade in grades:\n        sum += grade\n    \n    return sum / len(grades)\n\nif __name__ == '__main__':\n    grades = [90, 95, 80, 75]\n    print(average(grades))"}
{"instruction": "Use the NumPy package to multiply two matrices.", "input": "Matrix1: [[1, 2], [3, 4]]\nMatrix2: [[2, 3], [4, 5]]", "output": "import numpy as np\n \nmatrix1 = np.array([[1, 2], [3, 4]])\nmatrix2 = np.array([[2, 3], [4, 5]])\n \nproduct = np.matmul(matrix1, matrix2)\nprint(product)\n\n# Output\n# array([[10, 13],\n#        [22, 29]])"}
{"instruction": "Write a code to get the current exchange rate between two currency using the OpenExchangeRates API.", "input": "fromCurrency = \"USD\"\ntoCurrency = \"GBP\"", "output": "\"\"\"\nWrite a code to get the current exchange rate between two currency using the OpenExchangeRates API.\n\nInput: fromCurrency = \"USD\"\n        toCurrency = \"GBP\"\n\"\"\"\n\nimport requests\nimport json\n\ndef get_exchange_rate(fromCurrency, toCurrency):\n    baseUrl = 'https://openexchangerates.org/api/latest.json?app_id=YOUR_APP_ID'\n    response = requests.get(baseUrl)\n    data = json.loads(response.text)\n    rates = data['rates']\n    fromRate = rates[fromCurrency]\n    toRate = rates[toCurrency]\n    return (toRate/fromRate)\n            \nif __name__ == '__main__':\n    print(get_exchange_rate(\"USD\", \"GBP\"))"}
{"instruction": "Replace all 'e' characters with asterisks in the following sentence.", "input": "The elephant is walking", "output": "Th* appl*phant is walking"}
{"instruction": "Modify the code to convert the string \"12345678\" to an integer.", "input": "let str = \"12345678\";", "output": "let num = parseInt(str);\nconsole.log(num);"}
{"instruction": "Create a class called \"BankAccount\" in Java with instance variables for the account number, name, and balance.", "input": "", "output": "public class BankAccount {\n    private int accountNumber;\n    private String name;\n    private double balance;\n    \n    // Getter and setter methods\n    public int getAccountNumber() {\n        return accountNumber;\n    }\n \n    public void setAccountNumber(int accountNumber) {\n        this.accountNumber = accountNumber;\n    }\n \n    public String getName() {\n        return name;\n    }\n \n    public void setName(String name) {\n        this.name = name;\n    }\n \n    public double getBalance() {\n        return balance;\n    }\n \n    public void setBalance(double balance) {\n        this.balance = balance;\n    }\n }"}
{"instruction": "Create an HTML form to submit a feedback", "input": "", "output": "<form action=\"/feedback.php\" method=\"post\">\n  <label>Your Name:</label>\n  <input type=\"text\" name=\"name\" />\n  <label>Your Feedback:</label>\n  <textarea name=\"feedback\" rows=\"4\" cols=\"50\"></textarea>\n  <input type=\"submit\" value=\"Submit\" />\n</form>"}
{"instruction": "Create a MySQL trigger to store the times for insertion and updating a row in a table.", "input": "", "output": "CREATE TRIGGER tr_storeTime\n BEFORE INSERT OR UPDATE ON <Table>\n FOR EACH ROW \nBEGIN\n  IF INSERTING THEN\n    SET NEW.addedTime = NOW();\n  END IF;\n  IF UPDATING THEN\n    SET NEW.updatedTime = NOW();\n  END IF;\nEND;"}
{"instruction": "Write a code snippet in C to find the number of elements in an array.", "input": "array[] = {2, 7, 3, 8, 11}", "output": "#include <stdio.h> \n \nint array[] = {2, 7, 3, 8, 11};\nint array_size = (sizeof(array)/sizeof(array[0]));\n \nprintf(\"Number of elements in array: %d\\n\", array_size);"}
{"instruction": "Create a SQL query to list all customers who are located in the city of London.", "input": "Name of the table: customers", "output": "SELECT * FROM customers WHERE city = 'London';"}
{"instruction": "Rearrange the items in the array in ascending order.", "input": "[3, 6, 5, 1, 4, 2]", "output": "[1, 2, 3, 4, 5, 6]"}
{"instruction": "Remove duplicates from the given list and return a new list.", "input": "my_list = [2, 3, 4, 2, 3, 5]", "output": "unique_list = list(set(my_list))  # removed duplicates and returns a new list"}
{"instruction": "Explain with a code snippet how to execute an AJAX request in JavaScript.", "input": "", "output": "const xhr = new XMLHttpRequest();\n\nxhr.open('GET', 'https://example.com/api');\nxhr.send();\n\nxhr.onreadystatechange = function() {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n        // Response is ready and request was successful \n        console.log(xhr.responseText);\n    }\n}"}
{"instruction": "Reset the input field in areact Native form after submitting the form.", "input": "", "output": "onSubmit() {\n  this.form.reset();\n}"}
{"instruction": "How does JavaScript handle undeclared variables?", "input": "", "output": "JavaScript will automatically create an undeclared variable if it is referenced in the code. The variable is then set to the undefined value. The variable cannot be set or accessed until it has been declared. The variable will also remain in the global scope."}
{"instruction": "Convert the following array of strings to an array of integers using JavaScript.", "input": "[\"12\", \"21\", \"24\", \"44\"]", "output": "let arr = [\"12\", \"21\", \"24\", \"44\"];\nlet intArr = arr.map(x => parseInt(x));\nconsole.log(intArr); // Output = [12, 21, 24, 44]"}
{"instruction": "Write a CSS selector to apply a font-size of 16px to every element with a class of \"heading\".", "input": "", "output": ".heading {\n  font-size: 16px;\n}"}
{"instruction": "Create a table using JavaScript with three columns, \"Name\", \"Age\", and \"Country\".", "input": "", "output": "<table id=\"exampleTable\">\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>Country</th>\n  </tr>\n</table>\n\n<script>\n  const exampleTable = document.getElementById('exampleTable');\n  const rows = [];\n  const columns = [\"Name\", \"Age\", \"Country\"];\n\n  columns.forEach((columnName) => {  \n  const newRow = document.createElement('tr'); \n  newRow.innerHTML = `<td>${columnName}</td>`;\n  rows.push(newRow);\n });\n\n exampleTable.append(...rows);\n</script>"}
{"instruction": "You need to code a program that prints out the nth Fibonacci number.", "input": "n=10", "output": "def Fibonacci(n): \n if n<0: \n print(\"Incorrect input\") \n elif n==1: \n return 0 \n elif n==2: \n return 1 \n else: \n return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(10))"}
{"instruction": "Generate a function to create a list of factors for a given integer.", "input": "", "output": "def factor_list(number):    \n    factors = []\n \n    i = 2\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            number //= i\n            factors.append(i)\n    if number > 1:\n        factors.append(number)\n \n    return factors"}
{"instruction": "Convert the given list of integers to a string of comma separated values.", "input": "[1, 2, 3, 4, 5]", "output": "\"1,2,3,4,5\""}
{"instruction": "Build a Lambda function using Python to calculate the sum of two numbers.", "input": "n1 = 5\nn2 = 8", "output": "def add_two_numbers(n1, n2):\n return n1 + n2"}
{"instruction": "Replicate the functionality below in Java.", "input": "def get_uppercase_chars(string):\n    '''Returns a list of uppercase characters present in the input string.'''\n    return [char for char in string if char.isupper()]", "output": "public List<Character> getUppercaseChars(String string){\n    List<Character> uppChars = new ArrayList<Character>();\n    for(char c : string.toCharArray()){\n        if(Character.isUpperCase(c)){\n            uppChars.add(c);\n        }\n    }\n    return uppChars;\n}"}
{"instruction": "Formulate a regex expression in JavaScript to verify if a given string contains only numbers.", "input": "", "output": "const isOnlyNumbers = (str) => {\n  let regex = /^[0-9]+$/;\n  return regex.test(str);\n};"}
{"instruction": "Design a HTML form to accept user details (Name, age, address, etc).", "input": "", "output": "<form action=\"register.php\" id=\"form\" method=\"post\">\n  <label for=\"name\">Name:</label><br>\n  <input type=\"text\" name=\"name\"><br>\n    \n  <label for=\"age\">Age:</label><br>\n  <input type=\"number\" name=\"age\"><br>\n  \n  <label for=\"address\">Address:</label><br>\n  <input type=\"text\" name=\"address\"><br>\n  \n  <input type=\"submit\" value=\"Submit\">\n</form>"}
{"instruction": "Write a basic CSS structure to style a div element with the background colour of 'red'.", "input": "", "output": "div {\n   background-color: red;\n}"}
{"instruction": "Name three types of looping structures in Java.", "input": "", "output": "The three types of looping structures in Java are for-loops, while-loops, and do-while loops."}
{"instruction": "Create a function to convert Celsius to Fahrenheit.", "input": "", "output": "def celsius_to_fahrenheit(c):\n    f = c * (9/5) + 32\n    return f"}
{"instruction": "Determine the most frequent character in the provided string", "input": "Hello World", "output": "function maxFrequencyChar(str) {\n  let maxChar = '';\n  let maxFrequency = 0;\n  let hashTable = {};\n \n  for(let char of str) {\n    if (hashTable[char]) {\n      hashTable[char] += 1;\n    } else {\n      hashTable[char] = 1;\n    }\n  }\n \n  for(let char in hashTable) {\n    if(hashTable[char] > maxFrequency) {\n      maxFrequency = hashTable[char];\n      maxChar = char;\n    }\n  }\n \n  return maxChar;\n}"}
{"instruction": "Construct a boolean check to detect if a given string contains the word \"hello\".", "input": "", "output": "def contains_hello(input_string):\n    return \"hello\" in input_string"}
{"instruction": "Create a Ruby method for calculating the mean of the given array of numbers.", "input": "", "output": "def calculate_mean(numbers)\n  sum = 0\n  numbers.each { |number| sum += number }\n  return (sum.to_f / numbers.length)\nend"}
{"instruction": "Create an object syntax in JavaScript to represent an animal.", "input": "", "output": "let animal = {\n    name: '',\n    type: '',\n    sound: ''\n}"}
{"instruction": "Create a dictionary with two keys and a list of values assigned to each key.", "input": "", "output": "my_dict = {\n    \"key1\": [1, 2, 3],\n    \"key2\": [4, 5, 6]\n}"}
{"instruction": "Create a function to print the elements of a linked list in reverse", "input": "", "output": "public static void printReversedLinkedList(Node head) {\n    if(head == null) return;\n    printReversedLinkedList(head.next);\n    System.out.print(head.data + \" \");\n    }"}
{"instruction": "Convert the following function into a recursive version.", "input": "def factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"instruction": "Rearrange the characters of given string in the order of their frequency.", "input": "String = \"tree\"", "output": "def rearrange(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n    return newstr"}
{"instruction": "Suggest an algorithm for finding the maximum sum for all subarrays.", "input": "arr = [2, 3, -5, 4]", "output": "The algorithm for finding the maximum sum for all subarrays can be solved using a divide and conquer approach.\n\nFirst, divide the array into two parts by splitting it in half at its middle index. Then, calculate the maximum subarray sum for each of the two parts recursively. Finally, return the greater of the two sums plus the value at the middle index of the array. This will be the maximum sum of all subarrays."}
{"instruction": "Write a code to calculate the mean of the list of integers provided.", "input": "nums = [10, 20, 30, 40, 50]", "output": "def calc_mean(nums):\n    \"\"\"\n    Calculate the mean of a list of integers\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        sum_of_nums = sum(nums)\n        mean = sum_of_nums/len(nums)\n        return mean\n\nnums = [10, 20, 30, 40, 50]\nmean = calc_mean(nums)\nprint(mean) # 30"}
{"instruction": "Evaluate the expression \"7 + 4 * 3 - 6 / 2\" with JavaScript.", "input": "", "output": "// evaluate the expression\nlet expression = '7 + 4 * 3 - 6 / 2';\n\n// evaluate the expression\nlet result = eval(expression);\n\n// print the result\nconsole.log(result);\n// Output: 19"}
{"instruction": "Write a code that finds all the prime numbers from 1 to n.", "input": "", "output": "def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_primes(n):\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\nfind_primes(10) # Returns [2, 3, 5, 7]"}
{"instruction": "Suppose a functiona and a variable are already defined. Write a code statement to assign the value of the variable to the function.", "input": "function: my_function\nvariable: my_var", "output": "my_function(my_var)"}
{"instruction": "Output the maximum value of the following array in JavaScript.", "input": "A = [2, 4, 6, 8, 10]", "output": "10"}
{"instruction": "Write an algorithm for adding two numbers.", "input": "", "output": "Step 1: Declare two variables a and b of type int.\nStep 2: Read the two numbers and store them in a and b.\nStep 3: Compute the sum of the two numbers and store it in a variable sum.\nStep 4: Print sum."}
{"instruction": "Trace the given code and explain the operations.", "input": "a = [1, 2, 3]\nb = [4, 5, 6]\n\nc = a + b", "output": "The code creates two lists, a and b, each containing three elements. Then, it creates a third list c by concatenating the two lists, resulting in a list containing six elements."}
{"instruction": "Construct a regex in Java that matches a valid email address.", "input": "", "output": "String regex = \"^[\\\\w-_\\\\.+]*[\\\\w-_\\\\.]\\\\@([\\\\w]+\\\\.)+[\\\\w]+[\\\\w]$\";"}
{"instruction": "Write a function in Python to compress a given string.", "input": "aabcccccaaa", "output": "def compression(string):\n    output = \"\"\n    count = 1\n    curr_char = string[0]\n    for char in string[1:]:\n        if char == curr_char:\n            count += 1\n        else:\n            output += curr_char + str(count)\n            curr_char = char\n            count = 1\n    output += curr_char + str(count)\n    return output\n\nprint(compression('aabcccccaaa'))\n# Output: a2b1c5a3"}
{"instruction": "Gather information about a given product", "input": "HTC U12+", "output": "The HTC U12+ is a flagship Android phone manufactured by HTC Corporation. It features a 6-inch LCD display, 12MP dual rear camera, 8MP front camera, 6GB of RAM, and 64GB of storage. It also has NFC and a 3,420 mAh battery."}
{"instruction": "Create a function which returns the factorial of a given number.", "input": "", "output": "\"\"\"\nFunction which returns factorial of a given number\n\"\"\"\n\ndef factorial(num):\n    if (num == 0):\n        return 1\n    else:\n        return num * factorial(num-1)\n    \nif __name__ == '__main__':\n    print(factorial(5))"}
{"instruction": "Provide a Java program for searching for a certain element in an array.", "input": "[1, 2, 3, 4, 5], element=4", "output": "public class SearchInArray { \n  \n    static int search(int arr[], int n, int x) { \n        for (int i = 0; i < n; i++) { \n            if (arr[i] == x) \n                return i;\n        }\n        return -1;\n    }\n \n    public static void main(String args[]) { \n        int arr[] = { 1, 2, 3, 4, 5 }; \n        int x = 4; \n        int n = arr.length; \n        System.out.println(\"Element found at position: \" + search(arr, n, x));\n    } \n}"}
{"instruction": "Analyze the given sentence and label each word according to its part of speech.", "input": "Sentence: She was embarrassed to open the door.", "output": "Pronoun: She \nVerb: was \nAdjective: embarrassed \nVerb: to open \nDeterminer: the \nNoun: door"}
{"instruction": "Write an algorithm to swap two elements a[i] and a[j] in a given array a.", "input": "", "output": "def swap(a, i, j):\n    temp = a[i]\n    a[i] = a[j]\n    a[j] = temp"}
{"instruction": "Compose a function that takes in two strings and produces an array of characters that are only in the first string.", "input": "stringA = \"abcdefg\"\nstringB = \"hijklmn\"", "output": "def to_array(strA, strB):\n    output = []\n    for char in strA:\n        if char not in strB:\n            output.append(char)\n    return output\n\nresult = to_array(stringA, stringB)\nprint(result)"}
{"instruction": "Given a sentence as input, check if the sentence is a palindrome", "input": "\"Madam, I'm Adam\"", "output": "def is_palindrome(s):\n    s = s.replace(\" \", \"\")\n    return s == s[::-1]\n\nis_palindrome(\"Madam, I'm Adam\") # returns True"}
{"instruction": "Develop a class in Java to implement a calculator with functions add(), subtract(), multiply(), and divide().", "input": "", "output": "public class Calculator {\n\n    public static double add(double a, double b) {\n        return a + b;\n    }\n\n    public static double subtract(double a, double b) {\n        return a - b;\n    }\n\n    public static double multiply(double a, double b) {\n        return a * b;\n    }\n\n    public static double divide(double a, double b) {\n        return a / b;\n    }\n\n}"}
{"instruction": "Write a function that takes an array and removes all duplicates in place, returning the length of the new array.", "input": "[1, 2, 3, 2, 4, 3]", "output": "int removeDuplicates(int *arr, int size) {\n int index = 0, i;\n for(i=0; i<size; i++) {\n  if (arr[i] != arr[index]) {\n   index++;\n   arr[index] = arr[i];\n  }\n }\n return index + 1;\n}"}
{"instruction": "Analyse a provided JSON object and change the value of a specific key to the sum of 2 other keys", "input": "{\n  \"key1\": 10,\n  \"key2\": 20,\n  \"key3\": 0\n}", "output": "{\n  \"key1\": 10,\n  \"key2\": 20,\n  \"key3\": 30\n}"}
{"instruction": "Write a JQuery function that hides an element after 3 seconds.", "input": "", "output": "$(document).ready(function(){\n    setTimeout(function(){ \n    $(\"#element\").hide();\n    }, 3000);\n});"}
{"instruction": "Read the data structure and output the sum of all the values.", "input": "data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "let total = 0;\ndata.forEach((arr)=> {\n\tarr.forEach(num => {\n\t\ttotal += num;\n\t});\n});\nconsole.log(total); //45"}
{"instruction": "Write a Java program to accept two integers and find the sum of the two numbers.", "input": "", "output": "import java.util.Scanner;\n\npublic class SumIntegers {\n\n    public static void main(String[] args) {\n        \n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter two integers: \");\n        int first = scanner.nextInt();\n        int second = scanner.nextInt();\n\n        int sum = first + second;\n\n        System.out.println(\"The sum of the two numbers is: \" + sum);\n    }\n }"}
{"instruction": "Create a dictionary of all the capital cities of Europe as key-value pairs.", "input": "", "output": "europe_capitals = {\n  'France': 'Paris',\n  'Germany': 'Berlin',\n  'Russia': 'Moscow',\n  'Greece': 'Athens',\n  'Norway': 'Oslo',\n  'Denmark': 'Copenhagen',\n  'Italy': 'Rome',\n  'Poland': 'Warsaw',\n  'Spain': 'Madrid',\n  'Sweden': 'Stockholm'\n}"}
{"instruction": "Create a database table to store user information such as name, phone number, and address.", "input": "", "output": "CREATE TABLE users (\n    user_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(25) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);"}
{"instruction": "Find the length of the longest substring without repeating characters", "input": "string = \"abcabcbb\"", "output": "def longest_substring(string):\n    longest_substring = \"\"\n    curr_substring = \"\"\n    char_set = set()\n    for char in string:\n        if char not in char_set:\n            curr_substring += char\n            char_set.add(char)\n        else:\n            if len(curr_substring) > len(longest_substring):\n                longest_substring = curr_substring\n            curr_substring = char\n            char_set = set(char)\n    if len(curr_substring) > len(longest_substring):\n        longest_substring = curr_substring\n    return len(longest_substring)"}
{"instruction": "Design a program to find all prime numbers up to a given limit n.", "input": "", "output": "def find_primes(limit):\n    \"\"\"\n    @brief: Finds all prime numbers up to a given limit n\n    @param limit: the upper limit to find prime numbers\n    @return: a list of all prime numbers found\n    \"\"\"\n    primes = []\n    for n in range(2, limit + 1):\n        is_prime = True\n        for prime in primes:\n            if n % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(n)\n    return primes"}
{"instruction": "Design a function that takes two parameters a and two and returns the result of a multiplied by two", "input": "", "output": "def mul_two(a, b):\n    return a * b\n\nif __name__ == '__main__':\n    x = int(input('Enter first number: '))\n    y = int(input('Enter second number: '))\n    print(mul_two(x, y))"}
{"instruction": "Iterate through the given array and print the even numbers.", "input": "array = [1, 2, 3, 4, 5, 6]", "output": "for x in array:\n    if x % 2 == 0: \n        print(x)"}
{"instruction": "Explain why function scope is important in Python.", "input": "", "output": "Function scope is important in Python because it allows for the scoping of data to the specific environment in which the function was invoked. This is critical for ensuring that code runs correctly and that variables are isolated to the environment in which the associated function was called. Scoping also helps promote the common programming practice of modularity and encapsulation, as it allows you to create \"black-boxes\" that separate the internal implementation of a function from the external environment. Scoping also helps to ensure that only the variables and data which are intended to be used within a function are actually used within it, as any variables which are out of scope will be inaccessible."}
{"instruction": "Implement a Fibonacci series generator using Python.", "input": "", "output": "def generate_fibonacci(n):\n a, b = 0, 1\n fibonacci_series = [a]\n for i in range(n-1):\n a, b = b, a+b\n fibonacci_series.append(b)\n return fibonacci_series"}
{"instruction": "Use the regex module in python to remove all punctuation in a given string.", "input": "\"Hello, world!\"", "output": "import re\n\ndef remove_punc(string):\n    punc_pattern = re.compile('[^\\w\\s]')\n    return punc_pattern.sub('', string)\n\nremove_punc(\"Hello, world!\")\n# output: 'Hello world'"}
{"instruction": "Create an object to hold the student's grade.", "input": "Grade: A+", "output": "let studentGrade = {\n grade: 'A+'\n};"}
{"instruction": "And the list of product details as a JSON format.", "input": "products = [\n  { \"name\": \"iPhone XS\", \"price\": 1000 },\n  { \"name\": \"iPhone XR\", \"price\": 800 },\n  { \"name\": \"iPad Air\", \"price\": 600 }\n]", "output": "[\n  { \"name\": \"iPhone XS\", \"price\": 1000 },\n  { \"name\": \"iPhone XR\", \"price\": 800 },\n  { \"name\": \"iPad Air\", \"price\": 600 }\n]"}
{"instruction": "Design the algorithm to perform a depth-first search on given binary tree", "input": "", "output": "def DFS(root):\n    s = Stack()\n    s.push(root)\n    while (s.size() > 0):\n        node = s.pop()\n        # Do something with the node\n        if (node.left != NULL):\n            s.push(node.left)\n        if (node.right != NULL):\n            s.push(node.right)"}
{"instruction": "Create a JavaScript function that validates a given number as an integer.", "input": "Input: 653", "output": "function checkInt(number){\n\tif(number % 1 === 0){\n\t\treturn true;\n\t}\n\treturn false;\n}\ncheckInt(653); // returns true"}
{"instruction": "Write a query statement to select the name, age and address of the oldest person in our database?", "input": "", "output": "SELECT name, age, address FROM TableName ORDER BY age DESC LIMIT 1;"}
{"instruction": "Design a CSS style to make an element a circle and have a red border", "input": "", "output": "#circle {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    border: 1px solid red;\n}"}
{"instruction": "Build a regular expression to match only strings that start with one specific character and end with another specific character.", "input": "", "output": "/^X.*Y$/"}
{"instruction": "Write an SQL query that designates a unique identifier for each row in a table.", "input": "Table name: \"User\" \n Columns: id, name, occupation", "output": "SELECT id, name, occupation, \n       ROW_NUMBER() OVER (ORDER BY id) AS row_id\nFROM User;"}
{"instruction": "Write code using the NumPy random library to simulate the rolling of two fair six-sided dice.", "input": "", "output": "import numpy as np\nnp.random.seed(0)\n\n# simulate the rolling of two fair six-sided dice\noutcomes = np.random.randint(1,7, size=(2,2))\nprint(outcomes)"}
{"instruction": "Edit this HTML code to add the Google Font \u201cRoboto\u201d.", "input": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>My First Web Page</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<link href=\"https://fonts.googleapis.com/css?family=Roboto&display=swap\" rel=\"stylesheet\">\n<title>My First Web Page</title>\n<style> \n  body {\n    font-family: 'Roboto', sans-serif; \n  }\n</style>\n</head>\n<body>\n\n</body>\n</html>"}
{"instruction": "Create a function to generate a list of all prime numbers in a given range.", "input": "", "output": "def prime_nums(n): \n    prime_list = [] \n    for i in range(2, n + 1): \n        for j in range(2,i): \n            if (i % j) == 0: \n                break\n        else: \n            prime_list.append(i)\n    return prime_list"}
{"instruction": "Rewrite the code snippet to avoid the use of goto statement", "input": "start:\nx=x+1\nif x==10\n   goto start", "output": "x = 0\nwhile x!=10:\n    x=x+1"}
{"instruction": "Write a code to convert a given date string into a timestamp.", "input": "date_string = \"2020-07-24 14:50:00\"", "output": "import datetime\n\ndef convert_to_timestamp(date_string):\n    \"\"\"Write a code to convert a given date string into a timestamp.\"\"\"\n    date_object = datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n    timestamp = datetime.datetime.timestamp(date_object)\n    return timestamp\n\nconvert_to_timestamp(\"2020-07-24 14:50:00\") # Outputs 1595538200.0"}
{"instruction": "Construct a SQL statement to fetch records from the Sales table where the status is \"active\".", "input": "Table Name: Sales\nColumn Name: Status", "output": "SELECT * FROM Sales WHERE Status = 'active';"}
{"instruction": "How can we optimize the performance of the given code?", "input": "myList = [1, 2, 3]\nfor item in myList:\n    print(item)", "output": "Use list comprehension to reduce the amount of code used, such as:\n\nprint([item for item in myList])"}
{"instruction": "Write a C# program to create a function that takes an integer as parameter and prints its double value.", "input": "", "output": "public static void DoubleValue(int val) \n{ \n    Console.WriteLine(val * 2); \n}"}
{"instruction": "Using the given JSON data, create a JavaScript object and output its first element.", "input": "{\"people\": [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Alice\", \"age\": 25}]}", "output": "let jsonData = {\n  \"people\": [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Alice\", \"age\": 25}]\n};\nlet firstElement = jsonData.people[0];\nconsole.log(firstElement);"}
{"instruction": "Create a CSS class to raise the font size of the text from the default size.", "input": "", "output": ".largerFont {\n  font-size: 120%;\n}"}
{"instruction": "Write a code to get the sum of all the unique values in a dictionary.", "input": "d = {'a': 2, 'b': 3, 'c': 4, 'd': 5}", "output": "total_sum  = 0\nfor key in d:\n    total_sum += d[key]\n    \nprint(total_sum)"}
{"instruction": "Create a function that processes an array to remove all the duplicated elements", "input": "[1, 1, 2, 5, 6, 6, 10]", "output": "def remove_duplicates(arr):\n  new_arr = []\n  \n  for i in arr:\n    if i not in new_arr:\n      new_arr.append(i)\n  \n  return new_arr\n  \nremove_duplicates([1, 1, 2, 5, 6, 6, 10])\n# returns [1, 2, 5, 6, 10]"}
{"instruction": "Change the following code to accept multiple arguments.", "input": "func add(a, b) {\n  return a + b;\n}", "output": "func add(...args) {\n  let result = 0;\n  for (const arg of args) {\n    result += arg;\n  }\n  return result;\n}"}
{"instruction": "Implement an algorithm to subtract two strings, represented as a linked list, in the order they appear in and return the result as a linked list.", "input": "l1 = [\"1\",\"2\",\"3\"],\nl2 = [\"9\",\"2\"]", "output": "def linkedListSubtract(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n    return dummy_node.next"}
{"instruction": "Write some HTML+CSS to create a navigation bar for a website.", "input": "Example website navigation structure: Home, About, Contact, Products, Services", "output": "<nav>\n    <ul>\n      <li><a href=\"index.html\">Home</a></li>\n      <li><a href=\"about.html\">About</a></li>\n      <li><a href=\"contact.html\">Contact</a></li>\n      <li><a href=\"products.html\">Products</a></li>\n      <li><a href=\"services.html\">Services</a></li>\n    </ul>\n</nav>\n\n<style>\n   nav ul{\n      list-style-type: none;\n      margin: 0;\n      padding: 0;\n    }\n\n    nav ul li{\n      float: left;\n    }\n\n    nav ul li a {\n    display: block;\n    padding: 8px;\n    text-decoration: none;\n    }\n</style>"}
{"instruction": "Compress a given string using Run Length Encoding", "input": "string=\"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW\"", "output": "def RunLengthEncoding(string):\n    result = \"\" \n    count = 0\n    current = string[0] \n  \n    for i in range(len(string)): \n        if (string[i] == current): \n            count+= 1 \n        else: \n            result += current + str(count) \n            current = string[i] \n            count = 1\n    result += current + str(count)\n  \n    return result"}
{"instruction": "Create a function in JavaScript that takes an array and returns a new array containing the elements in reverse order.", "input": "", "output": "function reverseArray(arr) {\n    let newArr = [];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        newArr.push(arr[i]);\n    }\n    return newArr;\n}"}
{"instruction": "Implement a random number generator in Python that returns a random number in the range of 1-100.", "input": "", "output": "import random\n\ndef rand_num():\n    return random.randint(1, 100)"}
{"instruction": "Write a function to determine if a given number is prime and returns true or false.", "input": "", "output": "def is_prime(num):\n    if num <= 1:  \n        return False\n    for i in range(2, num):  \n        if num % i == 0:  \n            return False\n\n    return True"}
{"instruction": "Construct a C program to print all permutations of a given string.", "input": "", "output": "#include<stdio.h>\n#include<string.h>\n \n//Function to print all the permutations of the given string\nvoid printPermutations(char *str, int l, int r) {\n   \n    if (l == r)\n      printf(\"%s\\n\", str);\n    else\n    {\n        for (int i = l; i <= r; i++)\n        {\n            //swap the characters at positions l and i\n            char temp = str[l];\n            str[l] = str[i];\n            str[i] = temp;\n \n            //Recursively call the function to generate all permutations\n            printPermutations(str, l+1, r);\n \n            //Again swap the characters to their original positions\n            temp = str[l];\n            str[l] = str[i];\n            str[i] = temp; \n        } \n    }\n}\n \n//Main program\nint main()\n{\n   char str[] = \u201cABC\u201d;\n   \n   int n = strlen(str);\n   printPermutations(str, 0, n-1);\n   \n   return 0;\n}"}
{"instruction": "Given a string, create a method to remove all empty spaces and punctuation from the string.", "input": "\"Hello, world !\"", "output": "def remove_punctuation(string):\n    return string.replace(' ', '').replace(',', '').replace('!', '')"}
{"instruction": "In Ruby, write a method to find the sum of two numbers from the given string.", "input": "String: \u201cThe sum of 4 and 8 is 12\u201d", "output": "def sum_from_string(str)\n  array = str.scan(/\\d+/).map(&:to_i)\n  sum = array[0] + array[1]\n  return sum\nend\n\nsum_from_string(\"The sum of 4 and 8 is 12\") # Output: 12"}
{"instruction": "Write code to remove all occurrences of a given element from a list", "input": "", "output": "def remove_element(list, element):\n    \"\"\"\n    Remove all occurrences of a given element from a list\n    :param list: the list\n    :param element: the element to remove\n    :return: the filtered list\n    \"\"\"\n    filtered_list = [item for item in list if item != element]\n    return filtered_list"}
{"instruction": "What will be the output of this code snippet?", "input": "a = [1, 2, 3, 4, 5]\nb = [x**2 for x in a]\nprint(b)", "output": "[1, 4, 9, 16, 25]"}
{"instruction": "Create a function to classify an array as odd or even length.", "input": "", "output": "def classify_array_length(arr):\n    if len(arr) % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'"}
{"instruction": "Write a MySQL query to find the last four digit of the customer ID from the customer table.", "input": "customer table\n| customer_id | customer_name | address |\n--------------------------------------------\n| 000001 | John Doe | Street 1 |\n| 000002 | Jane Doe | Street 2 |\n| 000003 | John Smith | Street 3 |", "output": "SELECT RIGHT(customer_id, 4) FROM customer;"}
{"instruction": "Write a SQL query to get the sum of sales for each country.", "input": "", "output": "SELECT country, SUM(sales) \nFROM orders\nGROUP BY country;"}
{"instruction": "Create a Swift function for checking if a number is even or odd.", "input": "", "output": "func isEven(num: Int) -> Bool {\n    return (num % 2) == 0\n}"}
{"instruction": "Describe the concept of machine learning in your own words.", "input": "", "output": "Machine learning is a field of Artificial Intelligence that focuses on developing algorithms for computers to learn from data and to make predictions about their environment. It can involve supervised and unsupervised learning techniques, such as classification and clustering, to analyze data and make predictions. Machine learning algorithms are also used to detect patterns and make decisions, enabling computers to automate tasks and learn from experience."}
{"instruction": "Create a function in Python that takes an input list of strings and returns the longest string in the list.", "input": "list = [\"cat\", \"dog\", \"elephant\"]", "output": "def longest_string(list):\n  longest_word = \"\"\n  for word in list:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return longest_word"}
{"instruction": "Create a singleton class.", "input": "", "output": "class SingletonClass:\n    _instance = None\n \n    def __new__(self):\n        if not self._instance:\n            self._instance = super().__new__(self)\n        return self._instance\n\n# testing\nobj1 = SingletonClass()\nobj2 = SingletonClass()\n\nif obj1 is obj2:\n    print('obj1 and obj2 are the same instance')"}
{"instruction": "Create a MySQL query to fetch data from two tables using an inner join.", "input": "TableOne:\nID, Name, Age\nTableTwo:\nID, School", "output": "SELECT TableOne.ID, TableOne.Name, TableOne.Age, TableTwo.School\nFROM TableOne\nINNER JOIN TableTwo\nON TableOne.ID = TableTwo.ID;"}
{"instruction": "How can we generate a new HTML page with a given title tag in JavaScript?", "input": "title = \"My Page\"", "output": "const title = \"My Page\"\nconst newPage = `<html><head><title>${title}</title><head></html>`;"}
{"instruction": "You are given a list of strings and you need to create a dictionary from that list.", "input": "list1 = [\"apple\", \"banana\", \"mango\"]", "output": "list1 = [\"apple\", \"banana\", \"mango\"]\nresult = dict.fromkeys(list1, 0)\nprint(result)\n\n# Output:  {'apple': 0, 'banana': 0, 'mango': 0}"}
{"instruction": "Create a conditional statement in C++ to check if a given number is a two-digit number or not.", "input": "", "output": "if (number >= 10 && number <= 99)\n    cout << \"Number is a two-digit number.\" << endl;\nelse\n    cout << \"Number is not a two-digit number.\" << endl;"}
{"instruction": "Create a basic HTML page with a table that displays the index, name, and link of the top 10 global universities.", "input": "index  |  name  |  link\n1. Massachusetts Institute of Technology | https://www.mit.edu/ \n2. Stanford University | https://www.stanford.edu/ \n3. Harvard University | https://www.harvard.edu/ \n4. California Institute of Technology | https://www.caltech.edu/ \n5. University of Oxford | https://www.ox.ac.uk/ \n6. University of Cambridge | https://www.cam.ac.uk/ \n7. Princeton University | https://www.princeton.edu/ \n8. Imperial College London | https://www.imperial.ac.uk/ \n9. University of Chicago | https://www.uchicago.edu/ \n10. ETH Zurich (Swiss Federal Institute of Technology) | https://www.ethz.ch/", "output": "<html>\n  <head>\n    <title>Top 10 Global Universities</title>\n  </head>\n  <body>\n    <h1>Top 10 Global Universities</h1>\n    <table>\n      <tr>\n        <th>Index</th>\n        <th>Name</th>\n        <th>Link</th>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>Massachusetts Institute of Technology</td>\n        <td>https://www.mit.edu/</td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>Stanford University</td>\n        <td>https://www.stanford.edu/</td>\n      </tr>\n      <tr>\n        <td>3</td>\n        <td>Harvard University</td>\n        <td>https://www.harvard.edu/</td>\n      </tr>\n      <tr>\n        <td>4</td>\n        <td>California Institute of Technology</td>\n        <td>https://www.caltech.edu/</td>\n      </tr>\n      <tr>\n        <td>5</td>\n        <td>University of Oxford</td>\n        <td>https://www.ox.ac.uk/</td>\n      </tr>\n      <tr>\n        <td>6</td>\n        <td>University of Cambridge</td>\n        <td>https://www.cam.ac.uk/</td>\n      </tr>\n      <tr>\n        <td>7</td>\n        <td>Princeton University</td>\n        <td>https://www.princeton.edu/</td>\n      </tr>\n      <tr>\n        <td>8</td>\n        <td>Imperial College London</td>\n        <td>https://www.imperial.ac.uk/</td>\n      </tr>\n      <tr>\n        <td>9</td>\n        <td>University of Chicago</td>\n        <td>https://www.uchicago.edu/</td>\n      </tr>\n      <tr>\n        <td>10</td>\n        <td>ETH Zurich (Swiss Federal Institute of Technology)</td>\n        <td>https://www.ethz.ch/</td>\n      </tr>\n    </table>\n  </body>\n</html>"}
{"instruction": "Create a dictionary for the attributes of each object in the list.", "input": "my_list = [{\"name\": \"John\", \"age\": 20}, {\"name\": \"Laura\", \"age\": 30}, {\"name\": \"Harry\", \"age\": 25}]", "output": "my_dict = {}\nfor item in my_list:\n my_dict[item['name']] = item['age']\n \nprint(my_dict)"}
{"instruction": "Write an assembly code to calculate the sum of a series of numbers.", "input": "Series of numbers: [1, 5, 8, 10]", "output": "MOV      R1, #1 ; Load the first number\n        ADD      R2, R1 ; Initialize the sum\nLOOP    CMP      R1, #10 ; Check if we have reached the last number\n        BEQ      SUM    ; If yes, jump to SUM\n        ADD      R1, #1 ; Increment the number\n        ADD      R2, R1 ; Add the number to sum\n        B        LOOP   ; Loop\nSUM     ; At the end, the sum is in R2"}
{"instruction": "Construct a JavaScript program to create an alert message when a button is clicked.", "input": "", "output": "<button onclick=\"alert('Button clicked')\">Click me</button>"}
{"instruction": "Show a way to iterate through an object in JavaScript.", "input": "", "output": "The most common way to iterate through an object in JavaScript is to use a for-in loop. It will loop through the object's properties and execute the code within the loop for each property. For example: \n\nlet obj = { a: 1, b: 2, c: 3 }; \nfor (let property in obj) {\n    console.log(property + ':' obj[property]);\n}\n\n// Output: a:1, b:2, c:3"}
{"instruction": "Write a Java program to display a pattern of numbers.", "input": "", "output": "class PatternTest\n{\n    public static void main(String[] args)\n    {\n        int[][] pattern = {\n            {1,2,3},\n            {4,5,6},\n            {7,8,9}\n        };\n\n        for (int i=0; i<pattern.length; i++) \n        {\n            for (int j=0; j<pattern[i].length; j++) \n            {\n                System.out.print(pattern[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"instruction": "Create a console application in C++ that computes the sum of two numbers that are user input.", "input": "", "output": "#include <iostream>\n\nusing namespace std;\n\nint main(){\n    int num1;\n    int num2;\n    int sum;\n    \n    cout<<\"Please enter two numbers: \";\n    cin>> num1;\n    cin>> num2;\n    \n    sum = num1 + num2;\n    cout<<\"The sum of the two numbers is: \" << sum <<endl;\n    return 0;\n}"}
{"instruction": "Create an array of objects in JavaScript that contains five objects, each representing a different programming language.", "input": "", "output": "var languages = [\n    {langName: \"JavaScript\", creator: \"Brendan Eich\", releaseYear: 1995},\n    {langName: \"Python\", creator: \"Guido van Rossum\", releaseYear: 1991},\n    {langName: \"C\", creator: \"Dennis Ritchie\", releaseYear: 1972},\n    {langName: \"Java\", creator: \"James Gosling\", releaseYear: 1995},\n    {langName: \"C++\", creator: \"Bjarne Stroustrup\", releaseYear: 1985}\n]"}
{"instruction": "Edit a first person narrative created by a GPT model in order to make the narrative more coherent.", "input": "I was walking in the forest and suddenly I saw a dragon. It was huge and its scales glimmered in the sunlight. It had sharp claws and its eyes were red.", "output": "I was strolling through the dense forest when, out of the corner of my eye, I noticed something large and shimmering in the sunlight. As I approached, I saw a magnificent dragon lounging among the trees. Its scales glinted in the sun's rays and its massive, sharply-clawed feet were planted firmly into the ground. Its eyes burned a deep red as it watched my slow approach."}
{"instruction": "Define an interface in Java.", "input": "", "output": "interface SampleInterface { \n    // abstract method \n    public void sampleMethod(); \n}"}
{"instruction": "Write a Python program to prompt the user for a string and print the number of unique characters it contains.", "input": "", "output": "user_string = input(\"Please enter a string: \")\n\nunique_chars = set()\n\nfor char in user_string:\n    unique_chars.add(char)\n\nprint(\"The string contains\", len(unique_chars), \"unique character(s).\")"}
{"instruction": "Create a Python script for creating a random string of given length.", "input": "Length of 8", "output": "import random\nimport string\n\ndef random_string(length):\n    # Create a list of characters to be used in the random string\n    char_list = list(string.ascii_letters + string.digits)\n\n    # Create the random string with the given length\n    random_string = ''.join([random.choice(char_list) for i in range(length)])\n    \n    # Return the random string\n    return random_string\n\nif __name__ == '__main__':\n    # Define the length of the random string\n    length = 8\n    # Call the function to generate the random string\n    random_str = random_string(length)\n    # print the generated string\n    print('Random string:', random_str)\n\nOutput:\nRandom string: fdLbBi49"}
{"instruction": "Write a SQL statement to insert a new record into the table.", "input": "[Table Name] \nEmployees", "output": "INSERT INTO Employees (column list) VALUES (value list);"}
{"instruction": "Write a code to sort an array of integers using the quicksort algorithm.", "input": "array = [2, 4, 5, 1, 9, 0]", "output": "def quicksort(arr):\n    if len(arr) == 0 or len(arr) == 1:\n        return arr\n    else:\n        pivot = arr[0]\n        arr.remove(arr[0])\n        left_arr = []\n        right_arr = []\n        for element in arr:\n            if element <= pivot:\n                left_arr.append(element)\n            else:\n                right_arr.append(element)\n        left_arr = quicksort(left_arr)\n        right_arr = quicksort(right_arr)\n        sorted_arr = left_arr + [pivot] + right_arr\n        return sorted_arr\n\nif __name__ == \"__main__\":\n    array = [2, 4, 5, 1, 9, 0]\n    sorted_arr = quicksort(array)\n    print(sorted_arr)\n\n# Output: [0, 1, 2, 4, 5, 9]"}
{"instruction": "How does a hash table work?", "input": "", "output": "A hash table is a data structure that stores data items in an associative array where the key is used to quickly search for the data item. It is based on the concept of hashing which converts a key into an address in the array. Each address points to the data item associated with that key. The hash table offers fast lookup times by using hashing functions which are designed to spread data evenly over the table."}
{"instruction": "Write a JavaScript statement to delete the key-value pair of age in the following object.", "input": "let person = {\n    name: \"John\",\n    age: 30\n}", "output": "delete person.age;"}
{"instruction": "You need to generate an SQL query that will return records from a table called \"users\" where the name matches the given parameter.", "input": "John", "output": "SELECT * FROM users WHERE name = \"John\";"}
{"instruction": "What is the syntax to declare a class in JavaScript?", "input": "", "output": "class MyClassName {\n   constructor(data) {\n      // some code\n   }\n   // other methods\n}"}
{"instruction": "Modify the following code so that it prints the reversed version of a list.", "input": "list1 = [1, 2, 3, 4, 5]\n\ndef print_reverse_list(my_list):", "output": "list1 = [1, 2, 3, 4, 5]\n\ndef print_reverse_list(my_list):\n    my_list.reverse()\n    print(my_list)"}
{"instruction": "Parse the following JSON using JavaScript.", "input": "{\"courseName\":\"Python\"}", "output": "const jsonData = JSON.parse('{\"courseName\":\"Python\"}');\nconst courseName = jsonData.courseName;"}
{"instruction": "Create a sorting algorithm to quickly sort an array of integers", "input": "Array: [5, 4, 6, 7, 1]", "output": "function quickSort(arr) {\n  if (arr.length <= 1) { \n    return arr;\n  }\n  let pivot = arr.pop();\n  let left = [];\n  let right = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < pivot) {\n      left.push(arr[i]);\n    } else {\n      right.push(arr[i]);\n    }\n  }\n  return quickSort(left).concat([pivot], quickSort(right));\n}\n\nconsole.log(quickSort([5, 4, 6, 7, 1])); // [1, 4, 5, 6, 7]"}
{"instruction": "Write an SQL query to count the number of records with age greater than 25 from a given table.", "input": "", "output": "SELECT COUNT(*) FROM table WHERE age > 25;"}
{"instruction": "Make the following Python function for generating powerset.", "input": "", "output": "def powerset(s):\n    result = [[]]\n    for x in s:\n        result.extend([y + [x] for y in result])\n    return result"}
{"instruction": "Write Python code to reverse the letters in the string \"hello\".", "input": "", "output": "def reverseString(s): \n    return s[::-1]\n\nprint(reverseString('hello'))"}
{"instruction": "Explain the concept of parameter estimation in machine learning.", "input": "", "output": "Parameter estimation is the process of determining the optimal values for the parameters of a machine learning algorithm. The values that produce the best performance on the training data are typically used as the parameters for the model. By optimizing the parameters, the model can fit the data more accurately and lead to improved generalization performance. Parameter estimation can involve manual tuning, or the use of automated techniques such as grid search or stochastic optimization."}
{"instruction": "Create a loop to go through all elements of a dictionary.", "input": "d = {'name':'John', 'age': 27, 'job': 'Programmer'}", "output": "for key, val in d.items():\n    print(f\"{key} : {val}\")"}
{"instruction": "Suggest a code to get the smallest and largest number in an unsorted list.", "input": "", "output": "def get_smallest_largest(arr):\n    \"\"\"\n    Function to return the smallest and largest numbers in a list\n    Parameters:\n        arr: An unsorted list of numbers\n    Returns:\n        A tuple containing the smallest and largest numbers in the list\n    \"\"\"\n    smallest = arr[0]\n    largest = arr[0]\n\n    for elem in arr:\n        if elem < smallest:\n            smallest = elem\n        if elem > largest:\n            largest = elem\n    \n    return (smallest, largest)"}
{"instruction": "Write a query in MongoDB to find all documents with the value of field \"city\" as \"Berlin\".", "input": "", "output": "db.collection.find({\"city\": \"Berlin\"})"}
{"instruction": "What is a dynamic programming algorithm?", "input": "", "output": "Dynamic programming is an algorithm design technique that is used to solve optimization problems by breaking them down into smaller subproblems. It enables you to solve a problem by combining solutions to similar subproblems, saving time and often being more efficient than standard methods. It is widely used in operations research, artificial intelligence, bioinformatics, linguistics, and other fields."}
{"instruction": "Edit the provided JavaScript code such that it outputs the first and last element in an array.", "input": "array = ['a', 'b', 'c', 'd', 'e']", "output": "\"\"\"\nEdit the provided JavaScript code such that it outputs the first and last element in an array.\n\"\"\"\n\nlet array = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconsole.log(`First element: ${array[0]}, Last element: ${array[array.length - 1]}`);"}
{"instruction": "Write a function to compute the product of all elements in a matrix.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9],]", "output": "def product_matrix(matrix):\n product = 1\n for row in matrix:\n  for value in row:\n   product *= value\n return product"}
{"instruction": "Write an algorithm in Python to find the number of distinct words in a given sentence.", "input": "\"This is a test sentence.\"", "output": "def count_distinct_words(sentence):\n    distinct_words = set([word.lower() for word in sentence.split()])\n    return len(distinct_words)\n    \nprint(count_distinct_words(\"This is a test sentence.\")) # Outputs: 4"}
{"instruction": "Debug the following C code so that it compiles and runs successfully.", "input": "#include <stdio.h>\nint main {\n    printf(\"Hello World!\");\n    return 0;", "output": "#include <stdio.h>\nint main(void) {\n    printf(\"Hello World!\");\n    return 0; \n}"}
{"instruction": "Create a program that finds all the prime numbers less than or equal to a given number.", "input": "", "output": "def find_primes(num):\n    \"\"\"Find all the prime numbers less than or equal to a given number.\"\"\"\n    primes = []\n    for i in range(2, num + 1):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes"}
{"instruction": "Write a code snippet that prints the current date and time in the format YYYY-MM-DD HH:MM:SS.", "input": "", "output": "import datetime\n\n# Get the current datetime\nnow = datetime.datetime.now()\n\n# Prints the current datetime in YYYY-MM-DD HH:MM:SS format\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))"}
{"instruction": "Write a shell script to print the unique values from an array.", "input": "[1, 2, 2, 3, 4, 4, 5]", "output": "#!/bin/bash\nInputArray=(1 2 2 3 4 4 5)\n\necho \"Unique values in the array: \" \necho $(echo \"${InputArray[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')"}
{"instruction": "Generate a valid Ruby code that implements the following function.", "input": "Replace all whitespaces in a string with underscores.", "output": "def replace_whitespace(string)\n    return string.gsub(/\\s+/, '_')\nend"}
{"instruction": "You need to edit this given HTML code to apply a class name \"example\" to the second element.", "input": "<ul>\n <li>One</li>\n <li>Two</li>\n <li>Three</li>\n</ul>", "output": "<ul>\n <li>One</li>\n <li class=\"example\">Two</li>\n <li>Three</li>\n</ul>"}
{"instruction": "Modify the Python code below to solve the following error: \"TypeError: 'str' object is not callable\".", "input": "\"\"\"\ndef greet(name):\n    print('Hello', name())\ngreet('John')\n\"\"\"", "output": "def greet(name):\n    print('Hello', name)\ngreet('John')"}
{"instruction": "Create a HTML page that has a table displaying the names, phone numbers and email addresses of 5 employees.", "input": "", "output": "<html>\n <head>\n  <title>Employees</title>\n </head>\n <body>\n  <h1>Employees</h1>\n  <table>\n   <tr>\n    <th>Name</th>\n    <th>Phone</th>\n    <th>Email</th>\n   </tr>\n   <tr>\n    <td>John Doe</td>\n    <td>123-456-7890</td>\n    <td>john.doe@example.com</td>\n   </tr>\n   <tr>\n    <td>Jane Doe</td>\n    <td>123-456-0987</td>\n    <td>jane.doe@example.com</td>\n   </tr>\n   <tr>\n    <td>Jeff Smith</td>\n    <td>123-456-7654</td>\n    <td>jeff.smith@example.com</td>\n   </tr>\n   <tr>\n    <td>Lauren Anderson</td>\n    <td>123-456-8201</td>\n    <td>lauren.anderson@example.com</td>\n   </tr>\n   <tr>\n    <td>David Johnson</td>\n    <td>123-456-8321</td>\n    <td>david.johnson@example.com</td>\n   </tr>\n  </table>\n </body>\n</html>"}
{"instruction": "Using the list as an input, write code to generate a comma-separated string of the list's elements.", "input": "let fruits = [\"apple\", \"pear\", \"banana\"];", "output": "let str = fruits.join(\", \");\nconsole.log(str);"}
{"instruction": "Build a Python program to transform a string in a dictionary.", "input": "String: \" John, 26, Movie Watch, Jane, 31, Book Reader, Charlotte, 25, Music Listener\"", "output": "people_dict = {\n    'John': {'age': 26, 'hobby': 'Movie Watch'},\n    'Jane': {'age': 31, 'hobby': 'Book Reader'}, \n    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}\n}"}
{"instruction": "What is the difference between while and do while loops in programming?", "input": "", "output": "The main difference between while and do while loops is that a while loop will only execute the loop body if the condition evaluates to true, while a do while loop will always execute the loop body at least once, and then continue to execute the loop body until the condition evaluates to false. This means that a do while loop is guaranteed to run at least once, whereas a while loop may not run at all."}
{"instruction": "Create a copy of the given code without using the copy.deepcopy()", "input": "import copy\n\nlist1 = [[1, 2], [3, 4]]\nlist2 = copy.deepcopy(list1)", "output": "list2 = []\nfor i in range(len(list1)):\n    list2.append(list1[i].copy())"}
{"instruction": "Write a Python function to remove the whitespace from the beginning and end of a string", "input": "myStr = \"   hello   \"", "output": "def trim_whitespace(myStr):\n  myStr = myStr.strip()\n  return myStr\n\nprint(trim_whitespace(myStr))"}
{"instruction": "Write a JavaScript program to get the current user's timezone offset from UTC in minutes.", "input": "", "output": "let offset_minutes = new Date().getTimezoneOffset();\nconsole.log(offset_minutes);"}
{"instruction": "Write a SQL query to get the employee ID, first name and last name of the all employees with the last name starting with 'G'", "input": "", "output": "SELECT employee_id, first_name, last_name \nFROM employees \nWHERE last_name LIKE 'G%';"}
{"instruction": "Create an Angular component that displays information about a user.", "input": "const user = { \n  id: 1, \n  name: 'Bob', \n  age: 23, \n  email: 'bob@example.com'\n};", "output": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-info',\n  template: `\n    <div>\n      <p>ID: {{ user.id }}</p>\n      <p>Name: {{ user.name }}</p>\n      <p>Age: {{ user.age }}</p>\n      <p>Email: {{ user.email }}</p>\n    </div>\n  `\n})\nexport class UserInfoComponent implements OnInit {\n\n  user = {\n    id: 1,\n    name: 'Bob',\n    age: 23,\n    email: 'bob@example.com'\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}"}
{"instruction": "Write CSS code to position a block at the top centre of the page.", "input": "", "output": "block {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    transform: translateX(-50%);\n}"}
{"instruction": "What is the maximum possible value that can be stored in a single byte?", "input": "", "output": "The maximum possible value that can be stored in a single byte is 255."}
{"instruction": "Design a web page containing HTML/CSS containing at least 5 containers.", "input": "", "output": "<html>\n<head>\n    <title>My Webpage</title>\n</head>\n<body>\n    <div class=\"container1\" >\n    </div>\n    <div class=\"container2\" >\n    </div>\n    <div class=\"container3\" >\n    </div>\n    <div class=\"container4\" >\n    </div>\n    <div class=\"container5\" >\n    </div>\n</body>\n</html>"}
{"instruction": "Given a list of numbers, write a Python code to replace negative numbers with 0 in the list.", "input": "data = [-4, -2, 5, 8, -1, 0]", "output": "data = [0, 0, 5, 8, 0, 0]\n\nresult = [0 if ele < 0 else ele for ele in data] # List comprehension"}
{"instruction": "Implement a comparison operator that takes two strings as arguments and returns true if the strings are equal and false otherwise.", "input": "", "output": "def equals(str1, str2):\n    \"\"\"Compares two strings to see if they are equal.\"\"\"\n    return str1 == str2"}
{"instruction": "Return the maximum number of 256-bit numbers that fit in a 1GB RAM.", "input": "", "output": "The maximum number of 256-bit numbers that fit in a 1GB RAM is 134217728."}
{"instruction": "Write a Java program for sorting a given list of numbers in descending order.", "input": "unsortedList = [7, 6, 5, 4, 3, 2, 1]", "output": "import java.util.Arrays; \n\npublic class SortList { \n    public static void main(String[] args) \n    { \n        int unsortedList[] = {7, 6, 5, 4, 3, 2, 1}; \n        Arrays.sort(unsortedList);\n  \n        int n = unsortedList.length; \n        for (int i=n-1; i>=0; i--) \n            System.out.print(unsortedList[i]+\" \"); \n    } \n}"}
{"instruction": "Create a Python class for a movie instance with name, director, and year fields.", "input": "", "output": "class Movie:\n    def __init__(self, name, director, year):\n        self.name = name\n        self.director = director\n        self.year = year"}
{"instruction": "Create a Swift class called \"Vehicle\" that includes two properties: a model name (String) and a year (Int).", "input": "", "output": "class Vehicle {\n  let modelName: String\n  let year: Int\n\n  init(modelName: String, year: Int) {\n    self.modelName = modelName\n    self.year = year\n  }\n}"}
{"instruction": "Create a function in Java that takes an integer n and prints the first n Fibonacci numbers.", "input": "", "output": "public void printFibonacci(int n) {\n\tint a = 0, b = 1, c;\n \n\tif (n == 0)\n\t\treturn;\n \n\tfor (int i = 1; i <= n; i++) {\n\t\tc = a + b;\n\t\tSystem.out.print(a + \" \");\n\t\ta = b;\n\t\tb = c;\n\t}\n}"}
{"instruction": "Write Python code to group list elements into sublists of particular length.", "input": "[1,2,3,4,5,6,7,8]", "output": "def group_by_length(arr, k): \n\tn = len(arr)\n\tgroups = [arr[i:i+k] for i in range(0, n, k)] \n\treturn groups\n\na = [1,2,3,4,5,6,7,8] \nk = 3\nprint(group_by_length(a, k))"}
{"instruction": "Modify the following CSS Code so that it will target mobile devices only.", "input": ".text-center {\n    text-align: center;\n}", "output": "@media only screen and (max-width: 767px) { \n    .text-center {\n        text-align: center;\n    }\n}"}
{"instruction": "Build a machine learning model using scikit-learn to predict the house prices in Boston.", "input": "- Number of rooms: 3 \n- Average number of rooms per dwelling: 6 \n- Proportion of residential land zoned for lots over 25,000 sq.ft: 0.4\n- Index of accessibility to radial highways: 4\n- Full-valuation property-tax rate per $10,000: 300", "output": "import sklearn\nfrom sklearn.linear_model import LinearRegression\n\n# Create feature and label\nX = [[3,6,0.4,4,300]]\ny = [[BostonHousePrice]]\n\n# Create and fit the linear regression model\nreg = LinearRegression().fit(X, y)\n\n# Predict the output\nprediction = reg.predict([[3,6,0.4,4,300]])[0][0]"}
{"instruction": "Create a SQL query to count all buyers from a country.", "input": "TableName: Customers\n\nColumns: \nCustomerID INT \nName VARCHAR(40) \nCountry VARCHAR(20)\n\nTableName: Purchases\n\nColumns:\nPurchaseID INT \nCustomerID INT", "output": "SELECT COUNT(*)\nFROM Customers c\nINNER JOIN Purchases p ON c.CustomerID = p.CustomerID\nWHERE c.Country = 'CountryName';"}
{"instruction": "Analyze and explain the output of the following C program.", "input": "#include<stdio.h>\nint main(){\n int x,y;\n  x=2;\n   y=++x*5;\n   printf(\"%d\\n\",y);\n}", "output": "The output of this program is \"15\". This is because the pre-increment operator (++) is used in the statement \"y=++x*5\". This means that the value of x is first incremented by 1 and then used in the statement. Therefore, the value of x is 3 and y is assigned the value 3*5 which is 15."}
{"instruction": "What do you need to do to print the element at the index 5 in an array?", "input": "", "output": "To print the element at the index 5 in an array, you need to use the index accessor brackets, passing the index of the element that needs to be printed as an argument. For example, if the array is named `arr`, you can print the element at index 5 by writing `cout << arr[5]`;."}
{"instruction": "Create a JavaScript class to initialize the canvas width and height.", "input": "", "output": "class Canvas {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n \n  init() {\n    const canvas = document.createElement('canvas');\n    canvas.width = this.width;\n    canvas.height = this.height;\n    return canvas;\n  }\n}"}
{"instruction": "Write a SQL query to sort the data in descending order.", "input": "TABLE users\nid int,\nname varchar(20)", "output": "SELECT * FROM users ORDER BY id DESC;"}
{"instruction": "Create an if-else statement to classify a given number into an even or an odd.", "input": "", "output": "if (num % 2 == 0):\n    print(\"Even\")\nelse:\n    print(\"Odd\")"}
{"instruction": "Create a C# program that creates a List of five strings and prints out each one.", "input": "", "output": "List<string> myList = new List<string>();\nmyList.Add(\"hello\");\nmyList.Add(\"world\");\nmyList.Add(\"testing\");\nmyList.Add(\"123\");\nmyList.Add(\"goodbye\");\n\nforeach (string s in myList)\n{\n Console.WriteLine(s);\n}"}
{"instruction": "Write a Javascript program to convert a given string into all uppercase characters.", "input": "String: \"Welcome to the World !\"", "output": "let str = \"Welcome to the World !\";\nlet upperCaseStr = str.toUpperCase();\nconsole.log(upperCaseStr);\n\n# Output: \"WELCOME TO THE WORLD !\""}
{"instruction": "Given an array of integers, find the maximum value.", "input": "arr = [8, 1, 2, -1, 4, 9]", "output": "int max_value = arr.Max(); // 9"}
{"instruction": "Design a solution using Java to calculate the mean of all the numbers in a given array.", "input": "[4, 7, 11, 15, 18, 21]", "output": "public static double mean(int[] array) { \n    double sum = 0; \n    int length = array.length; \n\n    // loop through each number and calculate the sum\n    for (int num : array) \n        sum += num; \n\n    // calculate the mean and return it\n    return sum/ length;\n}"}
{"instruction": "Using the data provided, create a function to calculate the mean value of the elements inside the dictionary.", "input": "data = {\"John\": 8.5, \"Jane\": 9, \"Bob\": 5}", "output": "def mean_value(data):\n    sum = 0\n    count = 0\n    for value in data.values():\n        sum += value\n        count += 1\n    \n    return round(sum/count, 2)"}
{"instruction": "Given a unsorted array, sort it using the quick sort algorithm.", "input": "[5, 4, 8, 7, 1, 3, 10, 9]", "output": "def quickSort(nums): \n    if len(nums) <= 1: \n        return nums\n    pivot = nums[len(nums) // 2] \n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot] \n    right = [x for x in nums if x > pivot] \n    return quickSort(left) + middle + quickSort(right)\n  \n   \nnums = [5, 4, 8, 7, 1, 3, 10, 9] \nprint(quickSort(nums))"}
{"instruction": "Create a Java class with an empty constructor and a parameterized constructor", "input": "", "output": "public class TestConstructor {\n \n    public TestConstructor() {\n    }\n \n    public TestConstructor(int n) {\n        // code to run when constructor with parameter is called \n    }\n}"}
{"instruction": "Write a code for sorting the given array of numbers in ascending order.", "input": "", "output": "def sort_array(numbers):\n    # Bubble sort algorithm \n    for i in range(len(numbers)): \n      for j in range(0, len(numbers)-i-1): \n        if numbers[j] > numbers[j+1]: \n          numbers[j], numbers[j+1] = numbers[j+1], numbers[j] \n    return numbers"}
{"instruction": "Update the following code to add a method to retrieve elements from the list.", "input": "class MyList\n  def initialize\n    @list = []\n  end\nend", "output": "class MyList\n  def initialize\n    @list = []\n  end\n\n  def get(index)\n    @list[index]\n  end\n\nend"}
{"instruction": "Display a chart on the page to show the data.", "input": "", "output": "<div id=\"chartContainer\"></div>\n<script>\n  var chart = new CanvasJS.Chart(\"chartContainer\", {\n    //Options\n  });\n  chart.render();\n</script>"}
{"instruction": "Write a JavaScript code to print out the multiplication table of 3.", "input": "", "output": "for (let i = 1; i <= 10; i++) { \n   console.log(`3x${i}=${3*i}`); \n}"}
{"instruction": "Create a C++ program for computing the sum of the digits in a number.", "input": "Number: 1234", "output": "#include <iostream>\nusing namespace std;\n\nint getSumOfDigits(int n) \n{ \n    // Base case \n    if (n == 0) \n        return 0; \n          \n    return (n % 10 + getSumOfDigits(n / 10)); \n} \n  \n// Driver code \nint main() \n{ \n    int n = 1234; \n    cout << getSumOfDigits(n) << endl; \n    return 0; \n}"}
{"instruction": "What is the purpose of a library in software development?", "input": "", "output": "The purpose of a library in software development is to provide a collection of related functions and data structures that can be used by a program. Libraries are used to simplify or abstract away the details of how a particular operation is implemented or offer prepackaged functionality. Libraries offer code reuse, faster development time, and optimized performance. They also act as the interface between the application and the system or the environment it is running on."}
{"instruction": "Write a code to reverse a stack and return the new stack.", "input": "Stack: [1, 2, 3, 4, 5]", "output": "#include<stack>\n#include<iostream>\n\nusing namespace std;\n\nstack<int> reverseStack(stack<int> s) {\n    stack<int> tempStack;\n    while (!s.empty()) {\n        int temp = s.top();\n        tempStack.push(temp);\n        s.pop();\n    }\n    return tempStack;\n}\n\nint main() {\n    stack<int> s;\n    s.push(1); s.push(2);\n    s.push(3); s.push(4);\n    s.push(5);\n\n    stack<int> revStack = reverseStack(s);\n    while (!revStack.empty()) {\n        cout << revStack.top() << \" \";\n        revStack.pop();\n    }\n    return 0;\n}"}
{"instruction": "Parse an HTML table and extract all the rows.", "input": "<table>\n    <tr>\n        <td>Row 1 - Column 1</td> \n        <td>Row 1 - Column 2</td>\n    </tr>\n    <tr>\n        <td>Row 2 - Column 1</td>\n        <td>Row 2 - Column 2</td>\n    </tr>\n</table>", "output": "\"\"\"\nParse an HTML table and extract all the rows.\n\"\"\"\n\nimport re\n\ndef get_table_rows(html):\n    pattern = re.compile('<tr>(.*?)</tr>', re.DOTALL)\n    rows = re.findall(pattern, html)\n    return rows\n\nif __name__ == '__main__':\n    html = \"\"\"\n    <table>\n        <tr>\n            <td>Row 1 - Column 1</td> \n            <td>Row 1 - Column 2</td>\n        </tr>\n        <tr>\n            <td>Row 2 - Column 1</td>\n            <td>Row 2 - Column 2</td>\n        </tr>\n    </table>\n    \"\"\"\n    rows = get_table_rows(html)\n    print(rows)"}
{"instruction": "Multiply two vectors of size 5 and return the output.", "input": "a = [1, 2, 3, 4, 5] \nb = [5, 4, 3, 2, 1]", "output": "[5, 8, 9, 8, 5]"}
{"instruction": "What is type hinting in Python?", "input": "", "output": "Type hinting is a feature of the Python language that allows one to add type information to a variable, a function, and its parameters. The type hinting allows Python to infer the type of data to be used and this helps the interpreter to identify any errors and provide more feedback during the development process. It also makes the code more readable and maintainable since type information can be used to provide auto-complete and better error messages."}
{"instruction": "Using the provided template, create a function which calculates the area of a right triangle.", "input": "# calculate the area of a right triangle\n# @param side_a {Number} - the length of side A of the triangle\n# @param side_b {Number} - the length of side B of the triangle", "output": "const areaOfRightTriangle = (side_a, side_b) => 0.5 * side_a * side_b;"}
{"instruction": "Write an API to return the average transaction amount of a customer.", "input": "", "output": "@app.route('/get_average_transaction_amount', methods=['GET'])\ndef get_average_transaction_amount():\n    customer_id = request.args.get('customer_id')\n    query = \"SELECT AVG(transaction_amount) FROM transactions WHERE customer_id = %s\"\n    result = db.query(query, customer_id)\n    return jsonify(result)"}
{"instruction": "Write a SQL query to retrieve the names of all products from the table 'Product' with a price greater than $100.", "input": "Table name: Product\nAttributes: id (integer), name (string), price (integer)", "output": "SELECT name FROM Product WHERE price > 100;"}
{"instruction": "Given the following line of code, explain what it does.", "input": "a = [i for i in range(5)]", "output": "The given line of code creates a list from 0 to 4 (inclusive) using a list comprehension. It is equivalent to the following code:\n\na = []\nfor i in range(5):\n    a.append(i)\n\nTherefore, it creates a list 'a' with elements \"0\", \"1\", \"2\", \"3\", and \"4\"."}
{"instruction": "Construct\nan HTML form that includes two input fields, one for a name and one for an email address.", "input": "", "output": "<form action=\"\">\n  <label>Name:</label>\n  <input type=\"text\" name=\"name\">\n  <label>Email Address:</label>\n  <input type=\"email\" name=\"email\">\n</form>"}
{"instruction": "Design a data structure to store an undo history of size k.", "input": "", "output": "class HistoryDataStruct:\n    def __init__(self, k):\n        self.history_size = k\n        self.history = [] # list of (undo command, state of only that undo command) of size k\n        self.current_state = None # Current state of the data structure\n\n    def save_states(self, state):\n        self.history.append((state, self.current_state))\n\n        if len(self.history) > self.history_size:\n            self.history.pop(0)\n\n        self.current_state = state\n\n    def undo(self):\n        command, prev_state = self.history[-1]\n        self.history.pop(-1)\n        self.current_state = prev_state\n        return command"}
{"instruction": "How can we generate a random number within a given range in Python?", "input": "", "output": "import random\n\nrandomNumber = random.randint(minNum, maxNum)"}
{"instruction": "Given an array containing words and a string, find the shortest word in the array that is a substring of the string", "input": "words = [\"apple\", \"banana\", \"cat\", \"dog\"], string = \"aquickbrownfoxjumpsoverthelazydog\"", "output": "\"\"\"\nGiven an array containing words and a string, find the shortest word in the array that is a substring of the string.\n\"\"\"\n\ndef find_shortest_substring(words, string): \n    min_length = float(\"inf\")\n    min_word = None\n    for word in words:\n        j = string.find(word)\n        if j>-1 and len(word)<min_length:\n            min_length = len(word)\n            min_word = word\n    return min_word\n\nif __name__ == '__main__': \n    words = [\"apple\", \"banana\", \"cat\", \"dog\"]\n    string = \"aquickbrownfoxjumpsoverthelazydog\"\n    print(find_shortest_substring(words, string))"}
{"instruction": "Concatenate the following two strings using C#.", "input": "string str1 = \"hello\";\nstring str2 = \"world\";", "output": "string str1 = \"hello\";\nstring str2 = \"world\";\nstring result = str1 + str2;"}
{"instruction": "Write code to find the smallest number in an array of numbers.", "input": "arr = [5, 8, 2, 4, 7, 10]", "output": "def find_smallest_number(arr):\n    \"\"\"\n    Finds the smallest number in an array of numbers.\n    \"\"\"\n    min_num = arr[0]\n    for num in arr[1:]:\n        if num < min_num:\n            min_num = num\n    return min_num"}
{"instruction": "Suggest an alternate solution to the following JavaScript code.", "input": "var names = [\"Jon\", \"Bob\", \"Mike\"];\n\nfor (var i=0; i<names.length; i++) {\n    console.log(names[i]);\n}", "output": "var names = [\"Jon\", \"Bob\", \"Mike\"];\n\nnames.forEach(name => console.log(name));"}
{"instruction": "Construct an SQL statement to get the average salary of each department.", "input": "Table structure:\n\n employees\n \nid | name | department | salary |", "output": "SELECT department, AVG(salary) \nFROM employees \nGROUP BY department;"}
{"instruction": "Create another function to remove duplicates from the array.", "input": "arr = [1, 1, 2, 3, 4, 5, 5, 6, 7]", "output": "def remove_duplicates(arr):\n    result = []\n    for num in arr:\n        if num not in result: # if current element is unique, add to the list.\n            result.append(num)\n    return result\n    \nnew_arr = remove_duplicates(arr)\nprint(new_arr) # [1, 2, 3, 4, 5, 6, 7]"}
{"instruction": "Generate a loop that prints odd numbers between 0 to 10.", "input": "", "output": "for(int i = 0; i <= 10; i++){\n    if(i % 2 != 0)\n        System.out.println(i);\n}"}
{"instruction": "Find a way to calculate the power of a number without using * or **", "input": "base = 3\nexponent = 4", "output": "def power(base, exponent): \n    result = 1\n    for _ in range(exponent):\n        result *= base \n    return result"}
{"instruction": "Calculate the sum of the cube of integers from 1 to n.", "input": "", "output": "def cube_sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum"}
{"instruction": "Create a function to sort the given array of numbers in descending order.", "input": "[7, 2, 5, 1, 4]", "output": "def sort_number(arr): \n    arr.sort(reverse=True) \n    return arr \n\narr = [7, 2, 5, 1, 4]\n  \nprint(sort_number(arr)) \n\n# Output: [7, 5, 4, 2, 1]"}
{"instruction": "Use Python to write a code that displays a multiplication table of a given number.", "input": "8", "output": "def multTable(n):\n    for i in range(1, 11):\n        print(\"{} x {} = {}\".format(n, i, n*i))"}
{"instruction": "Create a class with the name \"Animal\" and add the methods \"make_sound\" and \"eat\".", "input": "", "output": "class Animal:\n\n    def make_sound(self):\n        \"\"\"Makes a sound specific to the animal.\"\"\"\n        pass\n    \n    def eat(self):\n        \"\"\"Eats food.\"\"\"\n        pass"}
{"instruction": "Create an array of objects in JavaScript for the following data: id, first name, last name, age.", "input": "", "output": "const array = [\n    { id: 1, firstName: 'John', lastName: 'Doe', age: 20 },\n    { id: 2, firstName: 'Jane', lastName: 'Smith', age: 21 },\n    { id: 3, firstName: 'Mike', lastName: 'Williams', age: 22 }\n];"}
{"instruction": "How would you reverse a singly linked list without using any additional data structures?", "input": "", "output": "One way to reverse a singly linked list without using any additional data structures is to iterate through the linked list, while keeping track of the current node's predecessor and successor. At each iteration, store the predecessor and successor, remove the link from the predecessor to the current node,and link the current node to the predecessor. Once all the nodes have been iterated through, the predecessor of the head node should be connected to the tail node."}
{"instruction": "Write HTML code to produce a two-column table with one row.", "input": "", "output": "<table>\n  <tr>\n    <td>row 1, col 1</td>\n    <td>row 1, col 2</td>\n  </tr>\n</table>"}
{"instruction": "Convert this regular expression to JavaScript regex expression.", "input": "/[A-Z][a-z]+/", "output": "/[A-Z][a-z]+/g"}
{"instruction": "Find all substrings of a string that are palindromes in Python.", "input": "", "output": "def get_all_palindromes(input_string):\n    palindromes = []\n    for substring_length in range(len(input_string)):\n        for i in range(len(input_string) - substring_length + 1):\n            sub_string = input_string[i: i + substring_length]\n            if sub_string == sub_string[::-1]:\n                palindromes.append(sub_string)\n    return palindromes\n\n# Usage\npalindromes = get_all_palindromes(\"banana\")\nprint(palindromes) # ['a', 'ana', 'anana', 'b', 'na', 'nana']"}
{"instruction": "Write a code that takes a given list and sorts them using heapsort.", "input": "arr = [1, 6, 5, 4, 8, 2]", "output": "def heapsort(arr):\n    # Build the max heapify \n    n = len(arr) \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n        heapify(arr, i, 0) \n\ndef heapify(arr, n, i): \n    largest = i # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # check if left child of root exists and is \n    # greater than root \n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # check if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i] # swap \n  \n        # Heapify the root. \n        heapify(arr, n, largest) \n\n# Driver code \nif __name__ == \"__main__\":\n    arr = [1, 6, 5, 4, 8, 2]\n    heapsort(arr) \n    n = len(arr) \n    print (\"Sorted array is\") \n    for i in range(n): \n        print (\"%d\" %arr[i]),"}
{"instruction": "In Java, write a program that finds the sum of two linked lists representing integers.", "input": "", "output": "public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    ListNode dummyHead = new ListNode(0);\n    ListNode p = l1, q = l2, curr = dummyHead;\n    int carry = 0;\n    while (p != null || q != null) {\n        int x = (p != null) ? p.val : 0;\n        int y = (q != null) ? q.val : 0;\n        int sum = carry + x + y;\n        carry = sum / 10;\n        curr.next = new ListNode(sum % 10);\n        curr = curr.next;\n        if (p != null) \n            p = p.next;\n        if (q != null) \n            q = q.next;\n    }\n    if (carry > 0) {\n        curr.next = new ListNode(carry);\n    }\n    return dummyHead.next;\n}"}
{"instruction": "Using data from the Wikipedia API, write a Python program to list the population of India.", "input": "", "output": "import json\nimport requests\n\nurl = 'https://en.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&titles=India'\nresponse = requests.get(url)\ndata = json.loads(response.text)\npopulation = data['query']['pages']['571045']['revisions'][0]['*'].split('\\n')[3].split('=')[1].strip().split('|')[0]\nprint('The population of India is', population)"}
{"instruction": "Create a data structure in Java to store books and their associated information like ISBN, authors, etc.", "input": "", "output": "class Book {\n   private int ISBN;\n   private String title;\n   private List<String> authors;\n   private int year;\n \n   public Book(int ISBN, String title, List<String> authors, int year) {\n     this.ISBN = ISBN;\n     this.title = title;\n     this.authors = authors;\n     this.year = year;\n   }\n   //getters and setters\n }"}
{"instruction": "Write a Question answer system for the given paragraph.", "input": "Paragraph: The current century is the 21st century and it started in 2001", "output": "def QASystem(paragraph):\n    words = paragraph.split()\n    answer = words[-1]\n\n    while True:\n        user_input = input('What is the first year of this century? ')\n        if user_input == answer:\n            print('Your answer is correct!')\n            break\n        else:\n            print('Incorrect! Please try again')\n\nQASystem(paragraph)"}
{"instruction": "Write a Java program to calculate the area of a square given the length of a side.", "input": "", "output": "public class CalculateSquareArea {\n \n  public static double calculateArea(double sideLength) {\n    double area = sideLength * sideLength;\n    return area;\n  }\n \n  public static void main(String[] args) {\n    double sideLength = 5;\n \n    double area = calculateArea(sideLength);\n    System.out.println(\"The area of a square with side length \" + sideLength + \" is \" + area);\n  }\n}"}
{"instruction": "Write a SQL code to generate a new table called \"Customers\" by selecting all columns from the \"Orders\" table.", "input": "", "output": "SELECT *\nINTO Customers\nFROM Orders;"}
{"instruction": "Explain the function of a variable in programming.", "input": "", "output": "In programming, a variable is a named storage location that can hold a value. Variables are used to store values that can be manipulated or referenced in a program. Variables can be used to hold numbers, text, or other types of data. They can also be used to store values or objects that are accessed or changed by a program. This allows a program to be dynamic and adaptable to ever-changing inputs and data."}
{"instruction": "Explain how to make a Python script executable on Unix-like systems.", "input": "", "output": "To make a Python script executable on Unix-like systems, you must make the script file executable and specify the path to the Python interpreter. To do this, you need to add a \"shebang\" line at the beginning of the script, which should point to the path of the Python interpreter. This can be done by adding the following line to your script: #!/usr/bin/env python. Next, you must make the script file executable by running the chmod +x command. Finally, you need to specify the path of your script in the system's PATH environment variable so that it can be accessed from anywhere."}
{"instruction": "Produce a SQL query to find the names and ages of all students who have a score greater than 95.", "input": "", "output": "SELECT Name, Age\nFROM Student \nWHERE Score > 95;"}
{"instruction": "Write a Python program to loop through all the items in a given list.", "input": "List: [1, 2, 3, 4, 5, 6]", "output": "my_list = [1, 2, 3, 4, 5, 6]\nfor item in my_list:\n    print(item)"}
{"instruction": "Evaluate the following expression:  2x + 3y - 7z.", "input": "x = 5, y = -1, z = 8", "output": "2 * 5 + 3 * -1 - 7 * 8 = -31"}
{"instruction": "Construct a GraphQL query to show all blog posts.", "input": "", "output": "{\n  allBlogPosts {\n    id\n    title\n    author\n    content\n    createdAt\n    modifiedAt\n  }\n}"}
{"instruction": "Write a function that sorts the given list of numbers in descending order", "input": "[1, 2, 3, 5, 8, 10]", "output": "\"\"\"\nWrite a function that sorts the given list of numbers in descending order\n\"\"\"\n\ndef sort_list_descending(numbers):\n    numbers.sort(reverse = True)\n    return numbers\n\nif __name__ == '__main__':\n    print(sort_list_descending([1, 2, 3, 5, 8, 10]))"}
{"instruction": "Suggest an improvement to make the code more efficient.", "input": "a = [1,2,3,4,5]\nloop_count = len(a)\nwhile loop_count > 0:\n    print(loop_count)\n    loop_count -= 1", "output": "a = [1,2,3,4,5]\nfor number in a:\n    print(number) // Instead of looping through the number of items in 'a', loop through the items of 'a' directly."}
{"instruction": "What will be printed with the following Java code?", "input": "String myString = \"Hello World\";\n\nfor (int i = 0; i < myString.length(); i++) {\n    System.out.print(i + \" = \" + myString.charAt(i) + \" \");\n}", "output": "0 = H 1 = e 2 = l 3 = l 4 = o 5 =   6 = W 7 = o 8 = r 9 = l 10 = d"}
{"instruction": "Write a loop in Python to create a multiplication table.", "input": "", "output": "for x in range(1, 11):\n   for y in range(1, 11):\n       print(x, 'x', y, '=', x*y)"}
{"instruction": "Create a function that prints a provided message 3 times", "input": "message = \"Hello World!\"", "output": "def print_message(message): \n for i in range(3): \n  print(message)"}
{"instruction": "Generate a program that accepts an integer array and returns its median value", "input": "", "output": "def median(arr):\n    arr.sort()\n    if len(arr)%2 != 0:\n        return arr[len(arr)//2]\n    else:\n        return (arr[(len(arr)//2)-1]+arr[len(arr)//2])/2"}
{"instruction": "Propose an algorithm in Python for sorting a given list of numbers in descending order.", "input": "", "output": "One possible solution would be to use a variation of the bubble sort algorithm, where the elements are being swapped from the last element to the first element.\n\ndef sort_numbers_descending(elements):\n  n = len(elements)\n  # Traverse through all elements\n  for i in range(n-1):\n    # Last i elements are already in place\n    for j in range(n-1-i):\n      # Swap if the element found is greater\n      # than the next element\n      if elements[j] < elements[j+1]:\n        temp = elements[j]\n        elements[j] = elements[j+1]\n        elements[j+1] = temp\n  return elements"}
{"instruction": "Write a function to generate an array of all possible permutations of N numbers.", "input": "", "output": "def generate_permutations(n): \n  \n    if n == 0: \n        return [] \n    \n    if n == 1: \n        return [[1]] \n  \n    permutations = [] \n    for i in range(n): \n        permutations_n_1 = generate_permutations(n - 1) \n  \n        for perm in permutations_n_1: \n            for j in range(n): \n                r = perm.copy() \n                r.insert(j, n) \n                permutations.append(r) \n  \n    return permutations"}
{"instruction": "How would you write a code to calculate the area of a circle given a radius r?", "input": "", "output": "double area_circle(double r) {\n  double area = 3.14*r*r;\n  return area;\n}"}
{"instruction": "Create a function in C that takes a string as input and returns an integer, which represents the number of occurences of a given character in the string.", "input": "\"Hello, World!\", 'o'", "output": "int count_occurrences(char *str, char c) \n{ \n    int count = 0; \n  \n    // Traverse the string and check \n    // for occurrences of character. \n    for (int i=0; str[i] != '\\0'; i++) \n        if (str[i] == c) \n            count++; \n  \n    return count; \n}"}
{"instruction": "Edit the provided HTML structure to add an ordered list inside the body with 3 list items.", "input": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>My Webpage</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>My Webpage</title>\n</head>\n<body>\n<ol>\n  <li>List Item 1</li>\n  <li>List Item 2</li>\n  <li>List Item 3</li>\n</ol>\n</body>\n</html>"}
{"instruction": "Create a function in Javascript to return an array containing the numbers from 1 to 10.", "input": "", "output": "function generateArray() {\n    let arr = [];\n    for (let i = 1; i <= 10; i++) {\n        arr.push(i);\n    }\n    return arr;\n}\n\nconsole.log(generateArray());\n\nOutput: [1,2,3,4,5,6,7,8,9,10]"}
{"instruction": "Modify the program to read data from the column 'Comments' in the table 'Users'", "input": "#include <iostream>\n\nint main() {\n std::cout << \"Hello, World!\" << std::endl;\n return 0;\n}", "output": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string comment;\n\n    // Read data from the \"Comments\" column in the \"Users\" table\n    std::cin >> comment;\n    std::cout << comment << std::endl;\n\n    return 0;\n}"}
{"instruction": "Given a binary tree, write a code snippet to list all of its descendant leafs.", "input": "", "output": "def listDescendantLeaves(root):\n    if not root: \n        return\n    elif not root.left and not root.right: \n        print(root.val) \n    listDescendantLeaves(root.left) \n    listDescendantLeaves(root.right)"}
{"instruction": "Sort an array of strings alphabetically.", "input": "array = [\"cat\", \"dog\", \"horse\", \"apple\", \"zebra\"]", "output": "def sort_alphabetically(array):\n    sorted_array = sorted(array, key = str.lower)\n    return sorted_array\n\narray = [\"cat\", \"dog\", \"horse\", \"apple\", \"zebra\"]\nprint(sort_alphabetically(array))"}
{"instruction": "Suppose we have a dictionary with keys (1,2,3). Create a function to return the values of the dictionary.", "input": "d = {1: \"one\", 2: \"two\", 3: \"three\"}", "output": "def get_values(d):\n    return list(d.values())"}
{"instruction": "Given two strings, write a function to check if one string is a rotation of the other.", "input": "str1 = \"beans\"\nstr2 = \"esban\"", "output": "def is_rotation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n        \n    temp = str1 + str1\n    return str2 in temp"}
{"instruction": "Print out all the numbers between 1 and 100 that are divisible by 3.", "input": "", "output": "for i in range (1, 101):\n  if i % 3 == 0:\n    print(i)"}
{"instruction": "Write an HTML program to capture the entered text in an input box", "input": "", "output": "<html> \n  <head>\n    <title>Text Capturing</title>\n  </head>\n \n  <script>\n    function captureText() {\n      var text = document.getElementById(\"inputBox\").value; \n      alert(\"Entered text: \" + text);\n    }\n  </script>\n\n  <body>\n    <h1> Text Capturing </h1>\n    <input type=\"text\" id=\"inputBox\" />\n    <button onclick=\"captureText()\">Capture Text</button> \n  </body>\n</html>"}
{"instruction": "Come up with a C language function to check if a given number is even or odd.", "input": "", "output": "bool is_even(int num) {\n    return (num % 2 == 0);\n}"}
{"instruction": "Create an api with Django that is able to search through an inputed text.", "input": "", "output": "from django.contrib.auth.models import User\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\nfrom django.views.decorators.csrf import csrf_exempt\nfrom .models import Search\n\n@csrf_exempt\ndef search_text(request):\n    if request.method == 'PUT':\n        data = request.PUT\n        text = data.get('text',None)\n        if text:\n            matches = Search.objects.filter(text__icontains=text)\n            return HttpResponse(matches)\n        else:\n            return HttpResponse(\"Error: No text was provided\")"}
{"instruction": "List all the table names in a PostgreSQL database.", "input": "", "output": "SELECT table_name FROM information_schema.tables\nWHERE table_schema NOT IN ('pg_catalog', 'information_schema');"}
{"instruction": "Build a class in Python with three methods.", "input": "", "output": "class MyClass:\n  def __init__(self):\n   # initialization code \n   self.data = []\n   self.count = 0\n \n  def add_data(self, data_element):\n   # add data to a list\n   self.data.append(data_element)\n   self.count += 1 \n \n  def get_data_count(self):\n   # return number of data elements\n   return self.count"}
{"instruction": "Extract all the words that begin with 's' from the given list.", "input": "list_of_strings = ['stack', 'super', 'stone', 'sit']", "output": "list_of_strings = ['stack', 'super', 'stone', 'sit']\n\nwords_start_s = [word for word in list_of_strings if word.startswith('s')]\nprint(words_start_s)"}
{"instruction": "Create a dictionary to store 'name' and 'age' as the keys and print the dictionary.", "input": "", "output": "# create a dictionary\ndict = {\"name\": \"John\", \"age\": 30}\n\n# print the dictionary\nprint(dict)"}
{"instruction": "Create an HTML page that renders two checkboxes and a button using JavaScript.", "input": "", "output": "<html>\n    <head>\n        <script>\n            function renderCheckboxes() {\n                var checkboxes = document.createElement(\"input\");\n                checkboxes.type = \"checkbox\";\n                checkboxes.name = \"checkbox\";\n                checkboxes.value = \"1\";\n           \n                document.body.appendChild(checkboxes);\n                var checkboxes2 = document.createElement(\"input\");\n                checkboxes2.type = \"checkbox\";\n                checkboxes2.name = \"checkbox2\";\n                checkboxes2.value = \"2\";\n               \n                document.body.appendChild(checkboxes2);\n                var btn = document.createElement(\"BUTTON\");\n                btn.innerHTML = \"Submit\";\n                document.body.appendChild(btn);\n            }\n       </script>\n   </head>\n   <body onLoad=\"renderCheckboxes()\">\n   </body>\n</html>"}
{"instruction": "Update the following JSON array to increment the \"age\" value of every user by 5 years.", "input": "[\n  {\n    \"name\": \"Alice\",\n    \"age\": 25\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 30\n  }\n]", "output": "[\n  {\n    \"name\": \"Alice\",\n    \"age\": 30\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 35\n  }\n]"}
{"instruction": "Please debug the following Java code to calculate the average grade of 4 students.", "input": "public class Main\n{\n    public static void main (String[] args)\n    {\n        int student1 = 77;\n        int student2 = 85;\n        int student3 = 90;\n        int student4 = 96;\n\n        int totalScore = 0;\n\n        totalScore += student1;\n        totalScore += student2;\n        totalScore += student3;\n        totalScore += student4;\n\n        double averageScore = totalScore / 4;\n\n        System.out.println(\"The average score is: \" + averageScore);\n    }\n}", "output": "public class Main\n{\n    public static void main (String[] args)\n    {\n        int student1 = 77;\n        int student2 = 85;\n        int student3 = 90;\n        int student4 = 96;\n\n        int totalScore = 0;\n\n        totalScore += student1;\n        totalScore += student2;\n        totalScore += student3;\n        totalScore += student4;\n\n        double averageScore = totalScore / 4.0;\n\n        System.out.println(\"The average score is: \" + averageScore);\n    }\n}"}
{"instruction": "Write a function to convert a Roman numeral to an integer.", "input": "", "output": "def roman_to_integer(numeral):\n  romans = {\"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000\n            }\n  num = 0\n  i = 0\n  while i < len(numeral):\n    if i+1 < len(numeral):\n      if romans[numeral[i]] >= romans[numeral[i+1]]:\n        num = num + romans[numeral[i]]\n      else :\n        num = num + romans[numeral[i+1]] - romans[numeral[i]]\n        i+=1\n    else:\n      num = num + romans[numeral[i]]\n    i+=1\n  return num"}
{"instruction": "Create a CSS rule to set the size for all h1 elements as 34px.", "input": "", "output": "h1 {\n  font-size: 34px;\n}"}
{"instruction": "Reverse the words of a given sentence but keep the order of the words intact.", "input": "I am a programmer", "output": "def reverse_words(sentence):\n    words = sentence.split(' ')\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n\nprint(reverse_words('I am a programmer')) # Outputs: \"I ma a remmargorp\""}
{"instruction": "Write an R function to calculate the mean of a numerical vector.", "input": "", "output": "calc_mean <- function(x) {\n    mean(x)\n}"}
{"instruction": "Write a function in R to filter out the words containing more than 5 letters.", "input": "", "output": "filter_words_over_five_letters <- function(words_list) {\n  filtered_words <- words_list[nchar(words_list) > 5]\n  return(filtered_words)\n}"}
{"instruction": "Construct a for loop in JavaScript to iterate through an array of strings and print out each one.", "input": "", "output": "let strArray = [\"Hello\", \"World\", \"!\"];\nfor(let i = 0; i < strArray.length; i++) {\n    console.log(strArray[i]);\n}"}
{"instruction": "Design an Android Launcher activity with an appropriate layout.", "input": "", "output": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"This is the Launcher\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n</android.support.constraint.ConstraintLayout>"}
{"instruction": "Write a function that returns the largest number in a list.", "input": "List: [1,2,3,4,5,6]", "output": "def get_largest(lst):\n    largest = 0\n    for i in range (0,len(lst)):\n        if lst[i] > largest:\n            largest = lst[i]\n    return largest\n\n# Driver code\nmyList = [1,2,3,4,5,6]\nprint(get_largest(myList)) # Output: 6"}
{"instruction": "Construct an HTML page with a title \"My Website\" and a header tag.", "input": "", "output": "<!DOCTYPE html>\n<html> \n  <head>\n    <title>My Website</title>\n  </head>\n  <body>\n    <h1>My Website</h1>\n  </body>\n</html>"}
{"instruction": "Write a function that removes all occurrences of a character from a given string.", "input": "string = \"happiness\"\nchar = \"p\"", "output": "def removeCharFromString(string, char):\n  result_string = []\n  for c in string:\n    if c != char:\n      result_string.append(c)\n  return ''.join(result_string)"}
{"instruction": "Retrieve the name of the third author from a given list of authors.", "input": "Authors: John Doe, Jane Smith, Tom Johnson", "output": "Tom Johnson."}
{"instruction": "Generate a program to flip a coin.", "input": "", "output": "from random import choice \n\ndef flip_coin(): \n\tresult = choice(['Heads', 'Tails']) \n\n\tprint(result) \n\nif __name__ == \"__main__\": \n\tflip_coin()"}
{"instruction": "Write a SQL query to select all Colleges from the table \"Universities\" whose enrollment is higher than 10,000 students.", "input": "", "output": "SELECT Name \nFROM Universities \nWHERE Enrollment > 10000;"}
{"instruction": "Create a function to convert a given decimal number to its corresponding hexadecimal value.", "input": "", "output": "def dec2hex(n):\n    return hex(n)[2:]"}
{"instruction": "Create a low-level PyTorch implementation of the following neural network structure, using the class PyTorch provides.", "input": "Input shape: (300, 100)\n\nOutput shape: (2, 5)", "output": "import torch\n\nclass MyNetwork(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = torch.nn.Linear(300, 150)\n        self.fc2 = torch.nn.Linear(150, 100)\n        self.fc3 = torch.nn.Linear(100, 50)\n        self.fc4 = torch.nn.Linear(50, 5)\n        self.softmax = torch.nn.Softmax(dim=1)\n\n\n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.fc2(x)\n        x = self.fc3(x)\n        x = self.fc4(x)\n        \n        return self.softmax(x)"}
{"instruction": "Generate a 3x3 matrix using randomly generated numbers between 1 and 10.", "input": "", "output": "matrix = [[4, 5, 7],\n          [6, 2, 9],\n          [1, 3, 8]]"}
{"instruction": "Allocate an array of size 10 and store the numbers from 1 to 10 in it.", "input": "", "output": "int[] arr = new int[10];\n\nfor (int i = 0; i < 10; i++) {\n arr[i] = i + 1;\n}"}
{"instruction": "Write a procedure in PL/SQL that returns the last name of an employee if the ID of the employee is provided as an argument.", "input": "id : Integer", "output": "CREATE OR REPLACE PROCEDURE getLastName(id IN Integer)\nBEGIN\n    SELECT Last_Name\n    INTO Last_Name\n    FROM Employees\n    WHERE Employees.ID = id;\nEND;"}
{"instruction": "Create a program to output an array of words from a given string.", "input": "String = \"Welcome to the world of Geeks\"", "output": "def extract_words(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n# Driver code \nstr = \"Welcome to the world of Geeks\"\nwords = extract_words(str) \nfor i in words: \n    print(i)"}
{"instruction": "Find the longest increasing subsequence of a given array of numbers.", "input": "[10,22,9,33,21,50,41,60]", "output": "def longest_increasing_subsequence(arr):\n\n    n = len(arr)\n    lis = [1] * n \n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n    return max(lis)\n\narr = [10,22,9,33,21,50,41,60]\nlongest_increasing_subsequence(arr) # Returns 5"}
{"instruction": "How would you write a Swift program to swap the values of two variables?", "input": "", "output": "var a = 10\nvar b = 20\n\n(a, b) = (b, a)\n\nprint(a)  // Outputs 20\nprint(b)  // Outputs 10"}
{"instruction": "Write a SQL query to find all students who have a GPA greater than 3.0", "input": "", "output": "SELECT * \nFROM students \nWHERE GPA > 3.0"}
{"instruction": "Using Java, create a program to find the highest value in this array.", "input": "arr = [1, 2, 4, 7, 10]", "output": "public class HighestValue {\n  public static int findHighest(int[] arr) { \n    int highest = arr[0]; \n    for (int i = 1; i < arr.length; i++) {\n      highest = Math.max(highest, arr[i]); \n    }\n    return highest; \n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 4, 7, 10}; \n    System.out.println(findHighest(arr)); \n  }\n}"}
{"instruction": "Write an HTML page to display a given data table.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Table Display</title>\n    </head>\n    <body>\n        <table>\n            <tr>\n                <th>Name</th>\n                <th>Age</th>\n            </tr>\n            <tr>\n                <td>John</td>\n                <td>21</td>\n            </tr>\n            <tr>\n                <td>Jane</td>\n                <td>25</td>\n            </tr>\n            <tr>\n                <td>Joe</td>\n                <td>30</td>\n            </tr>\n        </table>\n    </body>\n</html>"}
{"instruction": "Write a code to initialize an array with 10 elements of value 0.", "input": "", "output": "int[] array = new int[10];\nArrays.fill(array, 0);"}
{"instruction": "Offer a solution to the following programming problem", "input": "Given a list of strings, return the longest string", "output": "def longest_string(string_list):\n    longest_string = \"\"\n    for s in string_list:\n        if len(s) > len(longest_string): \n            longest_string = s\n    return longest_string"}
{"instruction": "Write a Python program to create a nested dictionary from two lists.", "input": "l1 = ['a', 'b', 'c'] \nl2 = [1, 2, 3]", "output": "{'a': 1, 'b': 2, 'c': 3}"}
{"instruction": "Write a C program that prints out a pyramid of numbers.", "input": "", "output": "#include <stdio.h>\n\nvoid printPyramid(int n) \n{ \n    int i, j; \n   \n    for (i=0; i<n; i++) \n    { \n        for (j=0; j<=i; j++) \n            printf(\"%d \", j+1); \n        printf(\"\\n\"); \n    } \n} \n  \nint main() \n{ \n    int n = 5; \n    printPyramid(n); \n    return 0; \n}"}
{"instruction": "Re-write the following function to use list comprehension.", "input": "def negative_list(numbers):\n    negative = []\n    for num in numbers:\n        if num < 0:\n            negative.append(num)\n    return negative", "output": "def negative_list(numbers):\n    return [num for num in numbers if num < 0]"}
{"instruction": "How to create an HTML form to accept user input?", "input": "", "output": "<form>\n  <input type=\"text\" name=\"username\" placeholder=\"Username\">\n  <input type=\"password\" name=\"password\" placeholder=\"Password\">\n  <input type=\"submit\" value=\"Submit\">\n</form>"}
{"instruction": "Submit an optimized solution to the following leetcode problem.", "input": "Problem: Given two binary trees, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.", "output": "def isSameTree(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    if p.val != q.val:\n        return False\n    return isSameTree(p.left, q.left) and isSameTree(p.right, q.right)"}
{"instruction": "Create a switch statement to provide different output depending on the given input", "input": "Input: \"5\"", "output": "switch (input) {\n case \"5\":\n  System.out.println(\"Input is 5\");\n  break;\n default:\n  System.out.println(\"No match\");\n  break;\n}"}
{"instruction": "How can you access the last element of the following Python array?", "input": "arr = [\"A\",\"B\",\"C\",\"D\",\"E\"]", "output": "arr[-1]"}
{"instruction": "Write an algorithm to store the data in a 2D array.", "input": "[[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]", "output": "def storeDataIn2DArray(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\n        for column in range(columnLength):\n            twoDArrayRow.append(data[column][row])\n\n        twoDArray.append(twoDArrayRow)\n\n    return twoDArray"}
{"instruction": "Create a function that takes two arguments, a list of strings and a string and returns the number of times the passed in string appears in the list.", "input": "words = ['hello', 'hi', 'world', 'foo', 'bar', 'hello']\ngiven_string = 'hello'", "output": "def find_words(words, given_string):\n    count = 0\n    for word in words:\n        if word == given_string:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    words = ['hello', 'hi', 'world', 'foo', 'bar', 'hello']\n    given_string = 'hello'\n    print(find_words(words, given_string))"}
{"instruction": "Given a list of words and a target word, determine if the target word is in the list", "input": "list_words = [\"apple\", \"banana\", \"orange\", \"mango\"]\ntarget_word = \"pineapple\"", "output": "list_words = [\"apple\", \"banana\", \"orange\", \"mango\"]\ntarget_word = \"pineapple\"\n\nif target_word in list_words:\n  print (\"Target word is in the list\")\nelse:\n  print (\"Target word is not in the list\")"}
{"instruction": "Write a JavaScript code snipplet that append the contents of one array to another array.", "input": "let arr1 = [1,2,3];\nlet arr2 = [4,5,6];", "output": "let arr1 = [1,2,3];\nlet arr2 = [4,5,6];\narr2.push(...arr1);\n// arr2 is [4,5,6,1,2,3]"}
{"instruction": "Write a query in MySQL to display the top 3 highest salaries.", "input": "", "output": "SELECT salary\nFROM employees\nORDER BY salary DESC\nLIMIT 3"}
{"instruction": "Write an Iterative program in Java to print the first n terms of the Fibonacci sequence.", "input": "", "output": "public static void printFibonacciIterative(int n) \n{ \n    int prev1=0, prev2=1, sum=0; \n  \n    for (int i = 0; i < n; i++) \n    { \n        System.out.print(sum + \" \"); \n        prev2 = sum; \n        sum = prev1 + prev2; \n        prev1 = prev2; \n    } \n}"}
{"instruction": "Create a HTML page that displays the current time.", "input": "", "output": "<html>\n    <head>\n    <title>Time Display</title>\n    <script>\n        function updateTime() {\n            let currTime = new Date();\n            document.getElementById(\"currentTime\").innerHTML = currTime.toLocaleTimeString();\n        }\n    </script>\n    </head>\n    <body onload=\"updateTime()\">\n        <div id=\"currentTime\"></div>\n    </body>\n</html>"}
{"instruction": "Write a JavaScript code to calculate the sum of two numbers and return the result.", "input": "num1 = 5;\nnum2 = 7;", "output": "let result = num1 + num2;\nreturn result; // 12"}
{"instruction": "Construct a code to print elements of a given list in reverse order.", "input": "[1, 2, 3, 4, 5]", "output": "def reverse_list(numbers):\n    return numbers[::-1]"}
{"instruction": "Construct a query using MongoDB to find all the documents with a \"city\" field that equals \"New York\".", "input": "", "output": "db.collection.find({city: \"New York\"})"}
{"instruction": "Create a new table in an existing SQL database.", "input": "The database called \"airports\" has the following table structure:\n\nAirport (aid, name, city, state, country, longitude, latitude)", "output": "CREATE TABLE Airport (\naid INT, \nname VARCHAR(100), \ncity VARCHAR(100), \nstate VARCHAR(100), \ncountry VARCHAR(100), \nlongitude DECIMAL(18,14), \nlatitude DECIMAL(18,14),\nPRIMARY KEY(aid) \n);"}
{"instruction": "Compute the sum of numbers in a given tree.", "input": "Tree Structure\n    5\n   / \\\n  3   7", "output": "def compute_sum(root):\n    if not root:\n        return 0\n    left_sum = compute_sum(root.left)\n    right_sum = compute_sum(root.right)\n    return root.val + left_sum + right_sum"}
{"instruction": "Write a script that prints out the first 100 prime numbers.", "input": "", "output": "# Python program to print first n prime numbers\n  \nnum = 100\n# prime numbers are greater than 1\nif num > 1:\n   # check for factors\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           break\n   else:\n       print(num,\"is a prime number\")\n  \nelse:\n   print(num,\"is not a prime number\")\n\n# Program to print the first N prime numbers\n\n# Taking input from the user\nN = 100\n\n# Initializing a list to store prime numbers\nprime_list = []\n\n# Initializing a variable to store each prime number\nnum = 2\n\n# Iterating over the range of numbers\nwhile len(prime_list) < N:\n    # Initializing a flag to determine if the number is prime or not\n    flag = True\n    # Iterating over the already identified prime numbers and dividing the number by each\n    for prime_num in prime_list:\n        # Checking the remainder\n        if num % prime_num == 0:\n            flag = False\n            break\n    # Checking if the number is prime\n    if flag:\n        prime_list.append(num)\n    # Incrementing the number\n    num += 1\n\n# Printing the first N prime numbers\nprint(\"First\", N , \"prime numbers are:\")\nfor prime_num in prime_list:\n    print(prime_num, end=\" \")"}
{"instruction": "Using the re library, trim the following string of all whitespace.", "input": "my_string = \"  Hello, World!  \"", "output": "import re\n\nmy_string = \"  Hello, World!  \"\n\nmodified_string = re.sub('\\s+', '', my_string)\n\nprint(modified_string)"}
{"instruction": "Determine whether the given string is a valid IPv4 address", "input": "ip_address = \"192. 426.4.4\"", "output": "No, the string is not a valid IPv4 address."}
{"instruction": "Write code to merge two data dictionaries into one new dictionary.", "input": "dic1 = {\"a\":1, \"b\":2}\ndic2 = {\"c\":3, \"d\":4}", "output": "new_dict = {**dic1, **dic2}"}
{"instruction": "Please write a program that prints out the Fibonacci sequence from 1 to n.", "input": "n = 10", "output": "\"\"\"\nPlease write a program that prints out the Fibonacci sequence from 1 to n.\n\"\"\"\ndef fibonacci(n):\n    fib = [1, 1]\n    for i in range(2, n):\n        a = fib[i-2]\n        b = fib[i-1]\n        fib.append(a+b)\n    return fib[:n]\n\nprint(fibonacci(n)) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]"}
{"instruction": "Construct an array of 10 elements in Java and initialize each element to 0.", "input": "", "output": "int[] array = new int[10];\nfor (int i = 0; i < array.length; i++) {\n    array[i] = 0;\n}"}
{"instruction": "Write a JSON parser to read the following data and output it in a 3-column table.", "input": "{\"name\": \"John Doe\", \"age\": 29, \"address\": \"123 Main Street\"}", "output": "name | age | address\n-----|-----|---------\nJohn Doe|29|123 Main Street"}
{"instruction": "Using the given list of names, create a new set that contains only the names with length greater than 6.", "input": "names = [\"John\", \"Jacob\", \"Sophia\", \"Olivia\", \"Michael\"]", "output": "names = [\"John\", \"Jacob\", \"Sophia\", \"Olivia\", \"Michael\"]\n\nlong_names = {name for name in names if len(name) > 6}\nprint(long_names) # Output: {'Sophia', 'Olivia', 'Michael'}"}
{"instruction": "You need to create a dictionary that contains five elements with their associated values.", "input": "", "output": "myDictionary = {\n 'apple': 'fruit',\n 'celery': 'vegetable',\n 'sun': 'star',\n 'earth': 'planet',\n 'light': 'energy'\n}"}
{"instruction": "Find the most commonly used element in a given list.", "input": "List: [8, 1, 7, 7, 4, 8, 8, 7]", "output": "from collections import Counter\n\nlist = [8, 1, 7, 7, 4, 8, 8, 7]\n\nmost_common = Counter(list).most_common(1)[0]\n\nprint(\"Most common element is {}\".format(most_common[0]))"}
{"instruction": "Group the elements in this array into pairs and print them.", "input": "arr = [1, 2, 3, 4, 5]", "output": "i = 0\nwhile i < len(arr):\n    pair = (arr[i], arr[i+1])\n    print(pair)\n    i += 2\n# Output: (1, 2) (3, 4) (5, None)"}
{"instruction": "How to redirect a page using JavaScript", "input": "", "output": "window.location.replace(\"http://www.example.com\");"}
{"instruction": "Find the maximum sum of a subarray of size 'k' in a given array.", "input": "arr = [1, 4, 2, 10, 23, 3, 1, 0, 20]\nk = 4", "output": "def max_sum_subarray(arr, k):\n    max_sum = 0\n    for i in range(len(arr) - k + 1):\n        curr_sum = 0\n        for j in range(i, i + k):\n            curr_sum += arr[j]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"}
{"instruction": "Generate a JavaScript solution to print all prime numbers between 1 and 50.", "input": "", "output": "for(var i = 2; i <= 50; i++) {\n     var isPrime = true;\n     for(var j = 2; j < i; j++) {\n         if(i % j == 0) {\n             isPrime = false;\n         }\n     }\n     if(isPrime) {\n         console.log(i);\n     }\n}"}
{"instruction": "Find and replace all occurrences of \"cat\" with \"dog\" in the given string.", "input": "I have a cat and two cats", "output": "I have a dog and two dogs"}
{"instruction": "Create a code in Python to get the current stock price of a company from yahoo finance.", "input": "ticker = \"AAPL\"", "output": "\"\"\"\nCreate a code in Python to get the current stock price of a company from yahoo finance.\n\nInput: ticker = \"AAPL\"\n\"\"\"\n\nimport requests\n\ndef get_stock_price(ticker):\n    url = 'https://finance.yahoo.com/quote/' + ticker\n    response = requests.get(url)\n    data = response.text.split('\"regularMarketPrice\":{\"raw\":')[1].split(',\"fmt\"')[0]\n    return float(data)\n\nprint(get_stock_price('AAPL'))"}
{"instruction": "Construct a program to print the Pyramid pattern using asterisks.", "input": "", "output": "\"\"\"\nConstruct a program to print the Pyramid pattern using asterisks\n\"\"\"\nfor i in range(0, 5):\n    for j in range(0, i+1):\n        print(\"*\", end=\"\")\n    print()"}
{"instruction": "Make a regex pattern that checks if a string is in the valid phone number format 555-555-5555.", "input": "", "output": "import re\n\npattern = r\"^\\d{3}-\\d{3}-\\d{4}$\"\n\nif re.match(pattern, \"555-555-5555\"):\n    print(\"Valid Phone Number Format\")\nelse:\n    print(\"Invalid Phone Number Format\")\n\n# Output: Valid Phone Number Format"}
{"instruction": "Using C#, write a code to convert a Fahrenheit temperature to its equivalent in Celsius.", "input": "50", "output": "public static double FahrenheitToCelsius(double fahrenheitTemperature)\n{\n    double celsiusTemperature = (fahrenheitTemperature - 32) / 1.8;\n    \n    return celsiusTemperature;\n}"}
{"instruction": "Create a function to generate a random password of length n", "input": "", "output": "import random\n\ndef generate_password(n):\n    \"\"\"\n    Create a function to generate a random password of length n\n    :param n: the length of the password\n    :return: a random password of length n\n    \"\"\" \n    # create a character list of symbols, alphabets, and numbers\n    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-='\n    # create a list of length n with random characters\n    password = [random.choice(characters) for _ in range(n)] \n    # convert the list to a string\n    password = ''.join(password)  \n    # return the password\n    return password"}
{"instruction": "Write a Python algorithm to find the most common value in an array.", "input": "arr = [1, 2, 3, 3, 3, 3, 4, 4, 5]", "output": "def most_common(arr):\n    freq = {}\n    \n    # Count the frequency of each element\n    for el in arr:\n        if el not in freq:\n            freq[el] = 1\n        else:\n            freq[el] += 1\n            \n    # Find the maximum frequency\n    max_freq = -1\n    for el, freq in freq.items():\n        max_freq = max(max_freq, freq)\n    \n    # Find the element with maximum frequency\n    most_common_el = None\n    for el, freq in freq.items():\n        if freq == max_freq:\n            most_common_el = el\n    \n    return most_common_el"}
{"instruction": "Create a CSS rule for a class called \"main-text\" which sets the font weight of the text to bold and the font color to blue.", "input": "", "output": ".main-text {\n  font-weight: bold;\n  color: blue;\n}"}
{"instruction": "Replace all the negative numbers in an array to zero using Ruby.", "input": "arr = [3, 4, -2, -1]", "output": "# Replace all negative numbers in an array to zero \narr.each_with_index do |num, i|\n  arr[i] = 0 if num < 0\nend"}
{"instruction": "Edit the SQL query to get the users from Canada who joined within the last 6 months.", "input": "SELECT * FROM users", "output": "SELECT * FROM users\nWHERE country = 'Canada' \nAND CAST(DATEDIFF(MONTH, joined_date, GETDATE()) AS INT) <= 6;"}
{"instruction": "Take the string \u2018hello world\u2019 and convert it to uppercase.", "input": "", "output": "string = 'hello world'\nprint(string.upper()) # Output: 'HELLO WORLD'"}
{"instruction": "How could you add a classname of \"main\" to the div element in this HTML code?", "input": "<div>Hello World!</div>", "output": "<div class=\"main\">Hello World!</div>"}
{"instruction": "Use the given array to find distinct values.", "input": "arr = [1, 2, 3, 3, 4, 5]", "output": "def find_distinct(arr):\n    distinct_list = []\n    for num in arr:\n        if num not in distinct_list:\n            distinct_list.append(num)\n\n    return distinct_list\n\narr = [1, 2, 3, 3, 4, 5]\nprint(find_distinct(arr))  # Output: [1, 2, 3, 4, 5]"}
{"instruction": "Write a JavaScript program for finding the sum of two numbers.", "input": "numbers: 10, 15", "output": "var first = 10; \nvar second = 15; \n\n// finding sum of two numbers \nvar sum = first + second; \n  \n// printing the result \nconsole.log(\"Sum of two numbers is \" + sum);"}
{"instruction": "Create a validation rule to check if an email address is valid for an input field in JavaScript.", "input": "", "output": "function validateEmail(email) {\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}"}
{"instruction": "Create a script to fetch the information from the following API endpoint.", "input": "https://dummyapi.io/data/api/user", "output": "import requests\n\n# Make the API call\nurl = \"https://dummyapi.io/data/api/user\"\nresponse = requests.get(url)\n\n# Fetch the information\nif response.status_code == 200:\n    data = response.json()\n    username = data['username']\n    email = data['email']\n    # Print the obtained info\n    print(f'Username: {username}, Email: {email}')"}
{"instruction": "Design a code to divide two integers without using division operator.", "input": "38, 4", "output": "def divide_without_operator(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n    return result * sign"}
{"instruction": "Create a function which will take two strings as parameters and will return a concatenated string.", "input": "", "output": "def concat_strings(str1, str2):\n    \"\"\"Function to concatenate two strings\"\"\"\n    return str1 + str2\n\nif __name__ == '__main__':\n    result = concat_strings('Hello ', 'World!')\n    print(result) #Hello World!"}
{"instruction": "Create a program to print the sum of all first 10 natural numbers.", "input": "", "output": "def sum_first_ten_natural_numbers():\n    sum = 0\n    for i in range(1, 11):\n        sum = sum + i\n    return sum\n\nprint(sum_first_ten_natural_numbers()) \n# Output: 55"}
{"instruction": "Write code to replace the first letter of a string with an underscore (_).", "input": "string = \"Hello World!\"", "output": "string = list(string)\nstring[0] = '_'\nstring = ''.join(string)\nprint(string) # Output: _ello World!"}
{"instruction": "Retrieve the third character from a string using its index.", "input": "word = \"Hello\"", "output": "// program to retrieve the third character from a string using its index \nlet third_char = word[2]\nconsole.log(third_char)"}
{"instruction": "Use the given string and convert it to hexadecimal representation.", "input": "Python", "output": "0x50797468"}
{"instruction": "Find the first 10 numbers that are divisible by 4 and 7", "input": "", "output": "numbers = [] \nnum = 0\nwhile len(numbers) < 10:\n    num += 1\n    if (num % 4 == 0) and (num % 7 == 0):\n        numbers.append(num) \nprint(numbers)"}
{"instruction": "Create a CSS rule to set the font-size of all elements in a div to 10px.", "input": "", "output": "div {\n\tfont-size: 10px;\n}"}
{"instruction": "Develop a Node.js program that prints out the current time in a specified timezone.", "input": "", "output": "const moment = require('moment-timezone');\n\nconst timezone = 'America/New_York';\nconst currentTime = moment().tz(timezone).format('h:mm a z');\n\nconsole.log(`The current time in ${timezone} is ${currentTime}`);"}
{"instruction": "Edit the existing code to focus the cursor in the input field.", "input": "<html>\n    <body>\n        <input type=\"text\" id=\"myInput\" />\n        <script type=\"text/javascript\">\n            document.getElementById('myInput').focus();\n        </script>\n    </body>\n</html>", "output": "<html>\n    <body>\n        <input type=\"text\" id=\"myInput\" autofocus />\n        <script type=\"text/javascript\">\n            document.getElementById('myInput').focus();\n        </script>\n    </body>\n</html>"}
{"instruction": "Write a Python code that prints out the following patterns:", "input": "", "output": "# Pattern 1\nfor i in range(1, 10):\n    for j in range(1, i + 1):\n        print(\"*\", end=\" \")\n    print(\" \")\n\n# Pattern 2\nfor i in range(10, 0, -1):\n    for j in range(i, 0, -1):\n        print(\"*\", end=\" \")\n    print(\" \")"}
{"instruction": "Convert the following English sentence into a Python function definition: \"Prints a string on the screen\".", "input": "", "output": "def printString(string):\n  print(string)"}
{"instruction": "Compute median of a given set of integers", "input": "[1, 6, 5, 8, 14, 9]", "output": "8"}
{"instruction": "Produce a 3D array from a given list of numbers.", "input": "[1, 2, 3, 4, 5, 6]", "output": "[[[1], [2], [3]], [[4], [5], [6]]]"}
{"instruction": "Explain how expression-oriented programming works in Java.", "input": "", "output": "Expression-oriented programming is a programming paradigm where all commands are based on expressions. In Java, expression-oriented programming is used with Java Lambda Expressions, where an expression is executed by passing the command inside parentheses and executing that expression in the context of the method. This approach enables the expression to be executed immediately, as opposed to the traditional approach of declaring a variable, calling a method, and assigning a value to it."}
{"instruction": "Provide a function to find the length of a string.", "input": "", "output": "def length(s):\n    i = 0\n    for ch in s:\n        i += 1\n    return i"}
{"instruction": "Write a SQL query to select customer names whose city is Tokyo and age is greater than 25.", "input": "TABLE customers\nColumns:\ncustomer_id \nname\ncity\nage", "output": "SELECT name FROM customers WHERE city = 'Tokyo' AND age > 25"}
{"instruction": "Design an algorithm to traverse a tree in level-order.", "input": "", "output": "def traverseLevelOrder(root): \n    if root is None: \n        return\n  \n    # Create an empty queue for level order traversal \n    queue = [] \n  \n    # Enqueue root and initialize height \n    queue.append(root) \n  \n    while (len(queue) > 0): \n        # Print front of queue and remove it from queue \n        node = queue.pop(0) \n        print node.data, \n  \n        # Enqueue left child \n        if node.left is not None: \n            queue.append(node.left) \n  \n        # Enqueue right child \n        if node.right is not None: \n            queue.append(node.right)"}
{"instruction": "Write an SQL query to calculate the maximum salary earned by each employee in the table \"salary\" which has columns \"employee_name\" and \"salary\".", "input": "", "output": "SELECT employee_name, MAX(salary) FROM salary GROUP BY employee_name;"}
{"instruction": "Write a CSS code to display a page element with a border-radius of 5px on all sides.", "input": "", "output": ".page-element {\n    border-radius: 5px;\n}"}
{"instruction": "Sort a list of words in alphabetical order using C.", "input": "words = [\"hello\", \"world\", \"apple\", \"zebra\"]", "output": "#include<stdio.h> \n#include<string.h> \n  \nint main() \n{ \n    char words[][10] = {\"hello\", \"world\", \"apple\", \"zebra\"};\n    int n = 4;\n    int i, j; \n  \n    // sorting the phrases\n    for (i = 0; i < n-1; i++) \n       for (j = i+1; j < n; j++) \n          if (strcmp(words[i], words[j]) > 0) \n          { \n              char temp[10]; \n              strcpy(temp, words[i]); \n              strcpy(words[i], words[j]); \n              strcpy(words[j], temp); \n          } \n  \n    printf(\"In lexicographical order: \\n\"); \n    for (i = 0; i < n; i++) \n       printf(\"%s\\n\", words[i]); \n  \n    return 0; \n}"}
{"instruction": "Modify the code provided so it prints the first 10 prime numbers.", "input": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "output": "def is_prime(n): \n    if n == 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True\n\ndef print_primes():\n    count = 0\n    number = 2\n    while(count != 10):\n        if is_prime(number):\n            print(number)\n            count += 1\n        number += 1\n\nprint_primes()"}
{"instruction": "Rewrite the following SQL query into its equivalent MongoDB query.", "input": "SELECT * FROM customers WHERE age > 30", "output": "db.customers.find({ age: { $gt: 30 } });"}
{"instruction": "Create an HTML page to display the attendance of students in an academic year.", "input": "Attendance Data:\n\nStudent Name: John Doe\nAttendance in 2020-21 academic year - 91%.\n\nStudent Name: Jane Smith\nAttendance in 2020-21 academic year - 94%.", "output": "<!DOCTYPE html>\n<html>\n<head>\n<title> Student Attendance </title>\n<style type=\"text/css\">\nh1 {\n font-family: sans-serif; \n}\ntable {\n font-family: sans-serif;\n border-collapse: collapse;\n}\ntd {\n border: 1px solid #dddddd;\n padding: 8px;\n}\n</style>\n</head>\n\n<body>\n<h1> Student Attendance </h1>\n<table>\n<tr>\n<th>Student Name</th>\n<th>Attendance (%)</th>\n</tr>\n<tr>\n <td>John Doe</td>\n <td>91%</td>\n</tr>\n<tr>\n <td>Jane Smith</td>\n <td>94%</td>\n</tr>\n</table>\n</body>\n</html>"}
{"instruction": "Write a code to sum all the values of the following dictionary.", "input": "d = {'a':2, 'b':3, 'c':4}", "output": "d = {'a':2, 'b':3, 'c':4}\n\ndef dictSum(d):\n    total = 0\n    for key in d:\n        total += d[key]\n    return total\n\nif __name__ == \"__main__\":\n    print(dictSum(d))"}
{"instruction": "Create a regular expression pattern to detect valid 4-digit numeric codes", "input": "", "output": "^\\d{4}$"}
{"instruction": "Design a MySQL table with 3 columns to store the order details", "input": "The columns should include Product No, Quantity, and Price.", "output": "CREATE TABLE order_details (\n  product_no VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL,\n  price DECIMAL(10,2)\n);"}
{"instruction": "Write code to take two numbers and determine if their product is even.", "input": "8, 12", "output": "def is_sum_even(num1, num2):\n    \"\"\"Checks if the product of two numbers is even or odd.\"\"\"\n    sum = num1 * num2\n    return sum % 2 == 0\n\nif __name__ == \"__main__\":\n    is_even = is_sum_even(8, 12)\n    print(\"Is the sum even? \", is_even)"}
{"instruction": "Identify the Python statement used for looping.", "input": "", "output": "for"}
{"instruction": "Describe the difference between an abstract class and an interface in Java", "input": "", "output": "The main difference between an abstract class and an interface in Java is that abstract classes can contain concrete (implemented) methods, while interfaces cannot. An abstract class is a class that cannot be instantiated, used as a base class that provides basic functionality and shared code to its derived classes. An interface is a purely abstract class and specifies what its derived classes must implement. Interfaces can also contain constants. A class can implement multiple interfaces but can only extend one abstract class."}
{"instruction": "Find the position of a string within another string.", "input": "haystack = \"This is a sample string with the word 'sample' in it\"\nneedle = \"sample\"", "output": "const position = haystack.indexOf(needle)\nconsole.log(position) // 15"}
{"instruction": "Create a CSS selector to target the inputs elements with a class 'button'.", "input": "", "output": "input.button { ... }"}
{"instruction": "Given a binary tree, write a program to calculate the sum of all its nodes.", "input": "", "output": "def calculateSumOfBinaryTree(root):\n    if root == None:\n        return 0\n    else:\n        return root.data + calculateSumOfBinaryTree(root.left) + calculateSumOfBinaryTree(root.right)"}
{"instruction": "Create a Spring boot program to find the area of a triangle.", "input": "", "output": "import org.springframework.boot.autoconfigure.SpringBootApplication; \n\n@SpringBootApplication \npublic class App \n{ \n    // Function to calculate the area of triangle \n    public static double calculateArea(int a, int b, int c) \n    { \n        double s = (a + b + c) / 2; \n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c)); \n        return area; \n    } \n  \n    public static void main( String[] args ) \n    { \n        int a = 3; \n        int b = 4; \n        int c = 5; \n        System.out.println(\"The area of the triangle is: \" + calculateArea(a, b, c)); \n    } \n}"}
{"instruction": "Write a line of code to print the summation of all elements in a list.", "input": "list1 = [1, 2, 3, 4, 5]", "output": "print(sum(list1))"}
{"instruction": "Create a MySQL query to select all the employees who have 100 or more sales.", "input": "", "output": "SELECT * \nFROM Employees \nWHERE Sales >= 100;"}
{"instruction": "Given a Python dictionary, create a function to return the most common key in the dictionary.", "input": "d = {\n  'a': 4,\n  'b': 3,\n  'c': 2,\n  'd': 2\n}", "output": "def most_common_key(d):\n  counts = [(key, value) for key, value in d.items()]\n  max_count = max(counts, key=lambda item: item[1])\n  return max_count[0]"}
{"instruction": "generate a JavaScript function to check whether a string is a palindrome.", "input": "", "output": "function isPalindrome(str) {\n    let start = 0;\n    let end = str.length - 1;\n    while (start < end) {\n        if (str[start] !== str[end]) {\n            return false;\n        }\n    start++;\n    end--;\n    }\n    return true;\n}"}
{"instruction": "Using HTML, write a page structure for a basic web page.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"utf-8\">\n <title>Web Page</title>\n</head>\n<body>\n \n</body>\n</html>"}
{"instruction": "Create a function that encodes a message into a Vigenere cipher", "input": "", "output": "def vigenere_encode(message, key):\n    encoded_message = \"\"\n    key_index = 0\n    for character in message:\n        if character.isalpha():\n            shift_amount = ord(key[key_index]) % 26\n            key_index += 1\n            if key_index == len(key):\n                key_index = 0  \n            shifted_char_code = ord(character) + shift_amount\n            if shifted_char_code > ord('z'):\n                shifted_char_code -= 26\n            encoded_message += chr(shifted_char_code)\n        else:\n            encoded_message += character\n    return encoded_message"}
{"instruction": "Choose the correct output for following code snippet.", "input": "x = \"hello world\"\ny = x\ny[0] = \"H\"", "output": "x = \"Hello world\""}
{"instruction": "Write a JavaScript program to log the numbers from 1 to 100 in the console.", "input": "", "output": "for (let i = 1; i <= 100; i++) {\n console.log(i);\n}"}
{"instruction": "Generate a code that concatenates a reversed copy of a given string to itself.", "input": "Python", "output": "def concatenate_reversed(s):\n    \"\"\"This function takes a string as input and concatenates a reversed copy of it to itself\"\"\"\n    return s + s[::-1]"}
{"instruction": "Create a string variable from a tuple.", "input": "tuple_to_string = (\"This\", \"is\", \"a\", \"tuple\")", "output": "string_from_tuple = \" \".join(tuple_to_string)"}
{"instruction": "Construct a python class to store a person's data like name, age, and hobbies.", "input": "", "output": "class Person:\n     def __init__(self, firstname, lastname, age, hobbies):\n           self.firstname = firstname\n           self.lastname = lastname\n           self.age = age\n           self.hobbies = hobbies"}
{"instruction": "Create a program in JavaScript that takes in a positive integer and returns the sum of its digits.", "input": "824", "output": "function sumDigits(num) {\n  let str = num.toString();\n  let result = 0;\n  for (let char of str) {\n    result += Number(char);\n  }\n  return result;\n}"}
{"instruction": "Using the input list, generate a random permutation of the given list.", "input": "[1, 2, 3, 4, 5]", "output": "import random\ndef get_random_permutation(list):\n    random.shuffle(list)\n    return list"}
{"instruction": "Generate a regular expression that matches strings containing at least one digit and one uppercase letter.", "input": "", "output": "^(?=.*[A-Z])(?=.*[0-9])[A-Z0-9]+$"}
{"instruction": "Construct an Express route for handling browser requests for a web page named 'Home'.", "input": "", "output": "app.get(\"/Home\", (req, res) => {\n    // Handle Home page request here\n});"}
{"instruction": "Create a for loop in Java to find the sum of the first 20 numbers.", "input": "", "output": "int sum = 0;\nfor (int i=1; i <= 20; i++){\n   sum = sum + i;\n}\nSystem.out.printf(\"The sum of the first 20 numbers is %d\", sum);"}
{"instruction": "Develop a for loop in Javascript to output integers from 0 to 10", "input": "", "output": "for (let i = 0; i < 11; i++) {\n    console.log(i);\n}"}
{"instruction": "Create a Ruby program that takes a number input from the user and creates a loop that prints out each number from 1 to the input number.", "input": "8", "output": "(1..8).each do |x| \n  puts x \nend"}
{"instruction": "Create an MySQL table with four columns: \"id\", \"name\", \"age\", and \"city\".", "input": "", "output": "CREATE TABLE table_name (\n    id int(11) NOT NULL AUTO_INCREMENT,\n    name varchar(50) NOT NULL,\n    age int(11) NOT NULL,\n    city varchar(50) NOT NULL,\n    PRIMARY KEY (id)\n);"}
{"instruction": "Parse a string containing HTML markups and extract the text content.", "input": "html_string = '<html><body><h1>Sample HTML String</h1>Hello there!</body></html>'", "output": "import html\n\n# Parse the string\nparsed_string = html.unescape(html_string)\n\n# Extract the text content\ntext_content = parsed_string.split('>')[-1]\n\n# Print the content\nprint(text_content)"}
{"instruction": "Create a program to determine the intersecting elements of two lists", "input": "list1 = [1, 2, 3]\nlist2 = [3, 4, 5]", "output": "def intersection(list1, list2): \n    l1_set = set(list1) \n    l2_set = set(list2) \n  \n    commons = l1_set.intersection(l2_set) \n      \n    return list(commons) \n\n# Example \nlist1 = [1, 2, 3]\nlist2 = [3, 4, 5]\n\nprint(intersection(list1, list2))"}
{"instruction": "What is the command to install Flask using pip?", "input": "", "output": "The command to install Flask using pip is \"pip install flask\"."}
{"instruction": "Construct a switch statement for the given pseudo-code.", "input": "switch (day)\n  case Sunday:\n    print(\"Sunday is a Day of Rest\");\n    break;\n  case Saturday:\n    print(\"Saturday is a Day of Work\");\n    break;", "output": "switch (day)\n{\n  case \"Sunday\":\n    printf(\"Sunday is a Day of Rest\");\n    break;\n  case \"Saturday\":\n    printf(\"Saturday is a Day of Work\");\n    break;\n  default:\n    printf(\"Default Action\");\n    break;\n}"}
{"instruction": "Generate C# code that creates an instance of the Customer class.", "input": "", "output": "Customer customer = new Customer();"}
{"instruction": "Modify the given code to be able to print an asterisk pyramid as specified in the output.", "input": "rows = 5\n\nfor i in range(0, rows):\n    for j in range(0, i + 1):\n        print(\"*\", end=' ')\n    print(\"\\r\")", "output": "rows = 5\n\nfor i in range(0, rows):\n    for j in range(0, rows-i-1):\n        print(end=\" \")\n    for j in range(0, i + 1):\n        print(\"*\", end=' ')\n    print(\"\\r\")"}
{"instruction": "Predict the output of this JavaScript function.", "input": "function divideThree(x) {\n\treturn x / 3;\n}\n\nconsole.log(divideThree(9));", "output": "The output of this function is 3."}
{"instruction": "What is Machine Learning?", "input": "", "output": "Machine Learning is a subset of Artificial Intelligence that enables computers to learn from patterns in data without explicitly being programmed. It enables them to improve over time by recognizing patterns and adjusting to new data. Machine Learning algorithms are used in a wide variety of applications, such as facial recognition, image recognition, natural language processing, predictive analytics, and robotics."}
{"instruction": "Create a web server in Java to handle a POST request.", "input": "", "output": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class WebServer {\n    public static void main(String[] args) throws Exception {\n        // listen for a connection from a client\n        ServerSocket connection = new ServerSocket(80);\n        Socket clientSocket = connection.accept();\n        BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n        // get the request data\n        String line;\n        String requestData = \"\";\n        while ((line = in.readLine()) != null) {\n            if (line.startsWith(\"POST\")) {\n                requestData = line.split(\"\\\\s+\")[1];\n                break;\n            }\n        }\n        // send a response\n        PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);\n        out.print(\"HTTP 200 OK\\n\");\n        // respond to the request\n        out.write(handleRequest(requestData));\n        out.flush();\n        out.close();\n    }\n\n    public static String handleRequest(String requestData) {\n        return \"Received request data: \" + requestData;\n    }\n}"}
{"instruction": "Create a program to insert the given character at a particular position in a given string.", "input": "String = \"Geek university\"\nCharacter = 's'\nPosition = 8", "output": "def insertStr(str, char, pos): \n\treturn str[:pos] + char + str[pos:] \n\nstr = \"Geek university\"\nchar = 's'\npos = 8\nprint(insertStr(str, char, pos))"}
{"instruction": "Explain what an object-oriented programming language is.", "input": "", "output": "Object-oriented programming (OOP) is a programming language model in which programs are organized around objects rather than actions and data rather than logic. OOP languages allows the programmer to think in terms of classes and objects which makes it easier to maintain and modify existing code. In an OOP language, objects are collections of related variables and methods, and classes are templates of objects. Classes allow objects of the same type to be created with the same properties, while still allowing flexibility as new objects can be created with different properties."}
{"instruction": "Rewrite the following code snippet so that it is compatible with Python 3", "input": "sum = 0\nfor num in range(10):\n   sum = sum + num\nprint sum", "output": "sum = 0\nfor num in range(10):\n   sum += num\n\nprint(sum)"}
{"instruction": "Define a class in C++ to represent a point in 3-dimensional space.", "input": "", "output": "#include<iostream>\n\nclass Point {\nprivate:\n    int x;\n    int y;\n    int z;\npublic:\n    Point(int x, int y, int z) {\n        this->x = x;\n        this->y = y;\n        this->z = z;\n    }\n    int getX() { return x; }\n    int getY() { return y; }\n    int getZ() { return z; }\n};\n\nint main() {\n    Point p(1, 2, 3);\n    return 0;\n}"}
{"instruction": "Define a function that takes a string as input and returns true if it is a valid IP address.", "input": "ip_str = \"127.0.0.1\"", "output": "def is_valid_ip(ip_str):\n    ip_addr = ip_str.split('.')\n\n    if len(ip_addr) != 4:\n        return False\n    for item in ip_addr:\n        if not 0 <= int(item) <= 255:\n            return False\n    return True"}
{"instruction": "Identify the data type for this expression: \"Hello World!\"", "input": "", "output": "The data type for this expression \"Hello World!\" is a string."}
{"instruction": "Write a SQL query to find the average population of a city.", "input": "Table \"Cities\":\ncity_name | population\n--------------------------\nNew_York  | 8000000\nLondon     | 9000000\nBerlin    | 700000", "output": "SELECT AVG(population) FROM Cities;"}
{"instruction": "Write a function to generate the Cartesian product of 2 sets in Python.", "input": "A = {1, 2}; B = {'a', 'b'}", "output": "from itertools import product\n \ndef get_cartesian_product(A, B):\n  return set(product(A, B))\n \nA = {1, 2}; B = {'a', 'b'}\nprint(get_cartesian_product(A,B))"}
{"instruction": "Create a MongoDB query to find all documents that have a field called 'city' with a value of 'New York'", "input": "", "output": "db.collection.find({city: 'New York'});"}
{"instruction": "Design an algorithm in Java for solving a linear search problem.", "input": "", "output": "// Returns index of x if it is present in arr[], \n// else return -1 \nint search(int arr[], int n, int x) \n{ \n    int i; \n    for (i = 0; i < n; i++) \n        if (arr[i] == x) \n            return i; \n    return -1; \n}"}
{"instruction": "Create a Python class called \"Person\" with name and age as attributes.", "input": "", "output": "class Person:\n def __init__(self, name, age):\n     self.name = name\n     self.age = age"}
{"instruction": "Using HTML and CSS, create a basic website with three sections.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>My Website</title>\n    <style>\n        .section{\n            width: 75%; \n            padding: 25px; \n            margin: auto;\n        }\n        #section1, #section2, #section3{\n            background-color: #f1f1f1;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"section1\" class=\"section\">\n        <h1>Section 1</h1>\n    </div>\n    <div id=\"section2\" class=\"section\">\n        <h1>Section 2</h1>\n    </div>\n    <div id=\"section3\" class=\"section\">\n        <h1>Section 3</h1>\n    </div>\n</body>\n</html>"}
{"instruction": "Create a class called Team that has two attributes - name and players.", "input": "", "output": "class Team:\n    def __init__(self, name, players):\n        self.name = name\n        self.players = players"}
{"instruction": "Create a C# method to get the current system time", "input": "None", "output": "public DateTime GetCurrentTime() {\n    return DateTime.Now;\n}"}
{"instruction": "Identify the output of the following code snippet written in Scala.", "input": "var number = 42 \nval message = if (number > 10) \"This number is greater than 10\" else \"This number is not greater than 10\"", "output": "This number is greater than 10"}
{"instruction": "Take input of a Python list and return its reversed version", "input": "list_in = [3,5,7,9]", "output": "list_in.reverse() \nlist_out = list_in \nprint(list_out) \n\n# Output \n# [9,7,5,3]"}
{"instruction": "Write a function in Python to remove the element with the value of \u2018apple\u2019 from the list.", "input": "fruits =[\"banana\", \"apple\", \"mango\", \"orange\"]", "output": "def removeValue(fruits, elem):\n    for e in fruits:\n        if e == elem:\n            fruits.remove(e)\n            break\n\nremoveValue(fruits, \"apple\")\n\nprint(fruits) # ['banana', 'mango', 'orange']"}
{"instruction": "Create a JavaScript function that takes two parameters, an integer and a character, and returns a string with the character repeated that many times.", "input": "2, '#'", "output": "const repeatCharacter = (num, character) => {\n  let str = '';\n  for (let i = 0; i < num; i++) {\n    str += character;\n  }\n  return str;\n};\n\nrepeatCharacter(2, '#'); // returns '##'"}
{"instruction": "Explain the main differences between Java and Python.", "input": "", "output": "The main differences between Java and Python include speed of development, execution speed, type safety, readability and syntax ease, standard libraries, and code scalability. Java is more popular in enterprise applications and is generally faster to develop than Python because of its statically typed language. Java has a JVM (Java Virtual Machine) making it faster to compile and execute than Python, which is dynamically typed. Java is more type-safe and easier to debug, while Python is more readable and easier to learn. Python also has wider range of standard libraries than Java, making development faster. Python is more scalable than Java, making it applicable for larger projects."}
{"instruction": "Write an `int main()` routine to print the following sequence of numbers.", "input": "10", "output": "#include <iostream>\n\nint main() {\n for(int i = 0; i < 10; i++) {\n  if(i % 2 == 0) {\n   std::cout << i << \", \";\n  }\n  else {\n   std::cout << i+1 << \", \";\n  }\n }\n std::cout << std::endl;\n return 0;\n}"}
{"instruction": "Identify the longest consecutive sequence of zeros in a binary string.", "input": "110010001", "output": "public static int longestSequenceOfZeros(String s) {\n\tint max_len = 0;\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) == '0') {\n            count++;\n            max_len = Math.max(max_len, count);\n        } else {\n            count = 0;\n        }\n    }\n    return max_len;\n}"}
{"instruction": "How to convert a pandas DataFrame to a python list?", "input": "", "output": "The DataFrame can be converted to a list using the tolist() method. For example:\n\nimport pandas as pd\n\ndf = pd.DataFrame([[1, 2], [3, 4], [5, 6]])\nmy_list = df.tolist()\nprint(my_list)\n\n# Output: [[1, 2], [3, 4], [5, 6]]"}
{"instruction": "Create a variable called myName and assign your name to it.", "input": "", "output": "myName = \"John Doe\""}
{"instruction": "Discuss the purpose of data cleaning", "input": "", "output": "The purpose of data cleaning is to ensure that the data is in an accurate and usable form. This involves eliminating or correcting errors such as missing data, incorrect data, duplicate data, and outliers. It also involves replacing invalid values with valid ones, standardizing data formats and converting data from one format to another, and filling in missing values with imputed values. Data cleaning is an important step in the data analysis pipeline, and it is necessary to ensure that your data is in an appropriate and reliable form before performing any analysis on it."}
{"instruction": "Name at least three sorting algorithms that can be implemented in PHP.", "input": "", "output": "1. Bubble Sort. \n2. Selection Sort. \n3. Insertion Sort."}
{"instruction": "Construct a lambda function to find all odd numbers in a given list.", "input": "List of numbers: [2, 3, 7, 8, 10]", "output": "list_of_nums = [2, 3, 7, 8, 10]\nodd_nums = list(filter(lambda num: num % 2 != 0, list_of_nums))"}
{"instruction": "Create a class called Ball which has three dimensional coordinates x, y and z.", "input": "", "output": "class Ball:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z"}
{"instruction": "Implement a function to implement Bubble Sort.", "input": "", "output": "def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"}
{"instruction": "how to implement a recursive function for computing Fibonacci numbers?", "input": "max_num = 5", "output": "def Fibonacci(n):\n    if n==0 or n==1:\n        return n \n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)\n\ndef Fibonacci_Series(max_num):\n    for n in range(max_num+1):\n        print(Fibonacci(n))\n\n# Output: 0 1 1 2 3 5"}
{"instruction": "Create a PHP script to print out Fibonacci numbers up to 50.", "input": "", "output": "<?php \nfunction Fibonacci($n){ \n  \n    if ($n == 0) \n        return 0;     \n    else if ($n == 1) \n        return 1;     \n      \n    else\n        return (Fibonacci($n-1) +  \n                Fibonacci($n-2)); \n} \n  \n$n = 50; \nfor ($i = 0; $i < $n; $i++) \n    echo Fibonacci($i),' '; \n  \n?>"}
{"instruction": "Translate a given string of comma-separated words into a list of words in Python.", "input": "\"apple, orange, grape\"", "output": "words = \"apple, orange, grape\".split(\", \")\nprint(words) # ['apple', 'orange', 'grape']"}
{"instruction": "Identify the language used in this code snippet.", "input": "string a = \"Hello\";\nstring b = \" World\";\n\ncout << a + b << endl;", "output": "C++"}
{"instruction": "Write a correct implementation of the following algorithm", "input": "Binary search for an element x in a sorted array", "output": "def binary_search(arr, x): \n    low = 0\n    high = len(arr) - 1\n    while low <= high: \n        mid = (high+low)//2\n        if arr[mid] < x: \n            low = mid + 1\n        elif arr[mid] > x: \n            high = mid - 1\n        else: \n            return mid \n  \n    return -1"}
{"instruction": "Generate a for loop to iterate over all div elements on a website and print their content.", "input": "", "output": "var divs = document.getElementsByTagName('div');\nfor (var i = 0; i < divs.length; i++) {\n    console.log(divs[i].innerHTML);\n}"}
{"instruction": "Create a SQL query to select the name, address and email of customers who placed an order in the last 30 days.", "input": "", "output": "SELECT name, address, email FROM customers\nWHERE last_order_date > CURRENT_DATE - INTERVAL 30 DAY"}
{"instruction": "Write a snippet of code to swap two variables without using the third variable", "input": "a = 5\nb = 10", "output": "a, b = b, a"}
{"instruction": "Identify the dependent clause in the given sentence.", "input": "Sentence: Although he was sad, he still managed to go to the party.", "output": "Although he was sad."}
{"instruction": "Describe the following heuristic optimization algorithm.", "input": "[Algorithm Name] \nHill Climbing Algorithm", "output": "Hill climbing is a heuristic optimization algorithm that starts with a random solution and gradually iterates over it to find the best solution. In each iteration, the algorithm looks for its neighbors and checks if they are better than the current solution. If so, then the algorithm moves to its neighbor and repeats the same process iteratively. It will terminate when it reaches the local optimum solution."}
{"instruction": "Output the sum of the largest and smallest numbers from the provided list.", "input": "list2 = [3, 4, 5, 8, 9]", "output": "#Get the largest and smallest numbers and assign them to variables\nlargestNumber = max(list2)\nsmallestNumber = min(list2)\n\n#Calculate the sum\nsumOfExtremes = largestNumber + smallestNumber\n\n#Print the sum\nprint(sumOfExtremes)"}
{"instruction": "What data structure should we use to solve this problem?", "input": "We want to store a list of names and their associated addresses, and then look up names quickly.", "output": "A HashMap is the best data structure for this use case because it provides the ability to quickly look up values when given the associated key (name in this case)."}
{"instruction": "Generate valid HTML for a table with three columns", "input": "", "output": "<table>\n  <tr>\n    <th>Column1</th>\n    <th>Column2</th> \n    <th>Column3</th>\n  </tr>\n</table>"}
{"instruction": "How to find the number of elements within a list in Python?", "input": "", "output": "The number of elements in a list can be obtained using the len() method in Python.\nFor example, if the list is named my_list, the number of elements can be obtained as len(my_list)."}
{"instruction": "Construct a class in Java that creates methods for finding the area and circumference of a circle.", "input": "", "output": "public class Circle {\n  double radius;\n \n  public Circle(double radius) {\n    this.radius = radius;  \n  }\n \n  public double getArea(){\n    return Math.PI * Math.pow(radius, 2);\n  }\n \n  public double getCircumference(){\n    return 2 * Math.PI * radius;\n  }\n}"}
{"instruction": "Write a function to multiply two numbers in Java.", "input": "5, 8", "output": "public static int multiply(int x, int y){\n  return x * y;\n}\n\nSystem.out.println(multiply(5, 8));"}
{"instruction": "Create a valid input format for the calculation of the average of the given numbers.", "input": "[3, 8, 10]", "output": "3, 8, 10"}
{"instruction": "Determine if the given list is ascending or not.", "input": "List: [5, 4, 3, 9, 8]", "output": "False"}
{"instruction": "Identify common elements between two given lists", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8, 10]", "output": "def common_elements(list1, list2):\n    return set(list1).intersection(list2)\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8, 10]\n\nprint(common_elements(list1, list2))"}
{"instruction": "Explain the use of try-except statements in Python", "input": "", "output": "Try-except statements are used to handle errors and exceptions in Python. The general syntax for a try-except statement is try: ...except: ... The code that could potentially raise an exception is put inside the try block, while the code to handle the exception is put inside the except block. If an exception occurs, the code inside the except block is executed and the program execution continues normally afterwards. If no exception occurs, the code inside the except block is skipped."}
{"instruction": "Create a NodeJS server that listens on port 8080 and serves a simple HTML page.", "input": "", "output": "const http = require('http');\nconst port = 8080;\n\nconst server = http.createServer(function (request, response) {\n    response.writeHead(200, { \"Content-Type\": \"text/html\" }); \n    response.write('<html><body><h1>Hello, World!</h1></body></html>');  \n    response.end(); \n});\n\nserver.listen(port);\nconsole.log(\"Listening at port\", port);"}
{"instruction": "Write a function that takes three parameters; a list of strings, an index of integers, and an alphabet string. The function should return only the items from the list at the specified indexes using letters from the alphabet as keys.", "input": "list_of_strings = [\"Foo\", \"Bar\", \"Baz\"]\nindexes = [0,2]\nalphabet_string = \"abc123\"", "output": "def select_list_items(list_of_strings, indexes, alphabet_string):\n    new_list = []\n    for index in indexes: \n        new_list.append(list_of_strings[alphabet_string.index(str(index))])\n    return new_list\n\nprint(select_list_items(list_of_strings, indexes, alphabet_string)) # Output: [\"Foo\", \"Baz\"]"}
{"instruction": "Given the following HTML code, add a class attribute to the <nav> element:", "input": "<nav>\n    <ul>\n        <li><a href=\"/\">Home</a></li>\n        <li><a href=\"/about/\">About</a></li>\n        <li><a href=\"/contact/\">Contact</a></li>\n    </ul>\n</nav>", "output": "<nav class=\"main-nav\">\n    <ul>\n        <li><a href=\"/\">Home</a></li>\n        <li><a href=\"/about/\">About</a></li>\n        <li><a href=\"/contact/\">Contact</a></li>\n    </ul>\n</nav>"}
{"instruction": "Given a matrix, write a program that finds its determinant in Python.", "input": "[[a, b], \u00a0[c, d]]", "output": "def determinant(matrix): \n  a = matrix[0][0]\n  b = matrix[0][1]\n  c = matrix[1][0]\n  d = matrix[1][1]\n  return a*d - b*c"}
{"instruction": "Create a SQL query to find all the flights departing from city X that are operated by carrier Y.", "input": "", "output": "SELECT * FROM flights\nWHERE origin_city='X' AND carrier='Y';"}
{"instruction": "Write a code in Python to convert a string of text to its equivalent uppercase characters.", "input": "str_lower_case = \"hello world\"", "output": "str_upper_case = str_lower_case.upper()"}
{"instruction": "Identify which of the two strings is a valid URL.", "input": "str1 = \"http://example.com/blog\"\nstr2 = 'example.com/blog'", "output": "str1 is a valid URL, whereas str2 is not."}
{"instruction": "Given an array of integers, write an algorithm to find the first repeating element.", "input": "[2, 5, 1, 2, 3, 5]", "output": "int findFirstRepeating(int arr[], int n) \n{ \n    unordered_set<int> s; \n  \n    for (int i = 0; i < n; i++) { \n        if (s.find(arr[i]) != s.end()) \n            return arr[i];         \n        s.insert(arr[i]); \n    }  \n  \n    return -1; \n}"}
{"instruction": "Convert the following array of integers to a string: [1, 2, 3, 4, 5]", "input": "[1, 2, 3, 4, 5]", "output": "\"1 2 3 4 5\""}
{"instruction": "Write a computer program to print all primes in an inputted range.", "input": "", "output": "def print_primes(start, end):\n    for num in range(start, end + 1):\n        # all prime numbers are greater than 1\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)"}
{"instruction": "Create a class \u2018Student\u2019 and a constructor that allows the user to initialize the student name and age.", "input": "", "output": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age"}
{"instruction": "Create a function that takes a string as input and returns a copy of the string with all punctuation marks removed", "input": "", "output": "def remove_punctuation(text):\n    punctuation_chars = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    output = \"\"\n    for char in text:\n        if char not in punctuation_chars:\n            output += char\n    return output"}
{"instruction": "Write a function to generate the next line of Pascal's Triangle given the parent line.", "input": "Parent line: [1, 2, 1]", "output": "def next_pascals_triangle(parent):\n    next_line = [1]\n    for i in range(len(parent)-1):\n        next_line.append(parent[i] + parent[i+1])\n    next_line.append(1)\n    return next_line"}
{"instruction": "Write a Pandas code to drop all rows with missing values from a given dataframe.", "input": "Dataframe name: df", "output": "df.dropna(inplace=True)"}
{"instruction": "Write a PHP script to create a simple contact form", "input": "", "output": "<?php\nif(isset($_POST['submit'])){\n \n$name = $_POST['name'];\n$subject = $_POST['subject'];\n$mailFrom = $_POST['email'];\n$message = $_POST['message'];\n\n$mailTo = \"example@gmail.com\";\n$headers = \"From: \".$mailFrom;\n$txt = \"You have received an email from \".$name.\".\\n\\n\".$message;\n \nmail($mailTo, $subject, $txt, $headers);\nheader(\"Location: index.php?mailsend\");\n}\n?>"}
{"instruction": "Create a function to extract the top 10 keywords from a given text.", "input": "text = \"This is some text that I am using to test the extractKeywords function.\"", "output": "import nltk\n\ndef extractKeywords(text):\n    tokens = nltk.word_tokenize(text)\n    tags = nltk.pos_tag(tokens)\n    keywords = [word for word,pos in tags \n            if (pos == 'NN' or pos == 'NNP' or pos == 'NNS' or pos == 'NNPS')]\n    freqs = nltk.FreqDist(keywords)\n    top_ten = freqs.most_common(10)\n    return top_ten\n \nif __name__ == \"__main__\": \n    text = \"This is some text that I am using to test the extractKeywords function.\"\n    top_ten = extractKeywords(text)\n    print(top_ten)"}
{"instruction": "Evaluate the following JavaScript expression: 15 * (3 + 7)", "input": "", "output": "The result of 15 * (3 + 7) is 150."}
{"instruction": "Write a JavaScript program to compare two given strings, and count the number of common characters between them.", "input": "str1 = \u201cApple\u201d, str2 = \u201cBanana\u201d", "output": "function countCommon(str1, str2) {\n    let count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str2.includes(str1[i])) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"instruction": "Create a PHP program to store data submitted by an HTML form.", "input": "", "output": "<?php\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $name = $_POST['name'];\n    $age = $_POST['age'];\n\n    // Store data in database\n    $servername = \"localhost\";\n    $username = \"root\";\n    $password = \"\";\n    $dbname = \"myDB\";\n\n    // Connect to database\n    $conn = new mysqli($servername, $username, $password, $dbname);\n    if (!$conn) {\n        die(\"Connection failed: \" . mysqli_connect_error());\n    }\n    // Insert data\n    $sql = \"INSERT INTO users (name, age)\n    VALUES ('$name', '$age')\";\n\n    if (mysqli_query($conn, $sql)) {\n        echo \"Data stored successfully\";\n    } else {\n        echo \"Error: \" . $sql . \"<br>\" . mysqli_error($conn);\n    }\n\n    mysqli_close($conn);\n}\n?>"}
{"instruction": "Construct a query in PostgreSQL to find the names and emails of all users who have \"google.com\" in their emails.", "input": "", "output": "SELECT name, email\nFROM users\nWHERE email LIKES '%google.com%';"}
{"instruction": "Write a function to return the index of an item in an array.", "input": "arr = [1, 2, 3, 4, 5]\nx = 4", "output": "def index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"}
{"instruction": "Write a function that given a string of character, returns the number of vowels in it.", "input": "Example string: \"hello world\"", "output": "def count_vowels(s): \n    vowels = 'aeiou'\n    count = 0\n    for char in s: \n        if char in vowels: \n            count += 1\n    return count"}
{"instruction": "Write a code in Java to print the Fibonacci series till a given number.", "input": "", "output": "public static void FibonacciSeries(int limit) {\n    int prevNum = 0, nextNum = 1;\n    for (int i = 0; i < limit; i++) {\n        System.out.print(prevNum + \" \");\n        int sum = prevNum + nextNum;\n        prevNum = nextNum;\n        nextNum = sum;\n    }\n}"}
{"instruction": "Generate a working C program to accept a sentence as an input and count the occurrences of each letter in the sentence", "input": "", "output": "#include <stdio.h>\n#include<string.h>\n\n// function to count the occurrence of letters\nint countOccurrences(char *str)\n{\n    int count = 0;\n    int i;\n    int j;\n    int len = strlen(str);\n\n    // Iterate through each letter in the string\n    for (i = 0; i < len; i++)\n    {\n        int numberCount = 0;\n        // Check if the current character matches with any of the other character\n        for (j = 0; j < len; j++)\n        {\n            if (str[i] == str[j])\n            {\n                numberCount++;\n            }\n        }\n\n        // If number of occurrence of current character is more than 1, then increments 'count'\n        if (numberCount > 1)\n        {\n            count++;\n        }\n    }\n\n    return count;\n}\n\nint main()\n{\n    char str[] = \"This is a sentence\";\n\n    int count = countOccurrences(str);\n    printf(\"\\nNumber of letters having more than one occurrence : %d\\n\", count);\n    return 0;\n}"}
{"instruction": "Transform a given text into a valid JSON format with indentation and proper spacing", "input": "hello world", "output": "{\n \"hello\": \"world\"\n}"}
{"instruction": "Implement a function in Python that takes two array-like structures and returns a new array containing all elements from the first one that do not appear in the second one.", "input": "list_1 = [9, 4, 2, 1, 5]\nlist_2 = [4, 6, 2]", "output": "def difference_array(list_1, list_2):\n  new_list = []\n  for i in list_1:\n    if i not in list_2:\n      new_list.append(i)\n  return new_list"}
{"instruction": "Write a JavaScript method for validating a form.", "input": "", "output": "function validateForm(form){\n  let valid = true;\n  for(let i=0; i < form.length; i++){\n    let field = form[i];\n    if(field.value.trim() === ''){\n      valid = false;\n    }\n  }\n  return valid;\n}"}
{"instruction": "Write a Python function which takes a number as an argument and print \"even\" if the number is even and print \"odd\" if the number is odd.", "input": "", "output": "def print_even_odd(number):\n if number % 2 == 0:\n print(\"even\")\n else:\n print(\"odd\")"}
{"instruction": "Write a code to process a given array and add 10 to each value stored in the array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "#Process a given array and add 10 to each value\narr = [1, 2, 3, 4, 5]\n\n#Loop through the array\nfor i in range(len(arr)):\n    #Add 10 to the current element\n    arr[i] = arr[i] + 10\n\n#Print the modified array\nprint(arr)\n\n\"\"\"\nOutput:\n[11, 12, 13, 14, 15]\n\"\"\""}
{"instruction": "Add a 3x3 identity matrix to the following matrix.", "input": "[[1, 2, -3] \n [0, 1, 3] \n [-2, 0, 4]]", "output": "[[4, 2, -3], \n [0, 4, 3], \n [-2, 0, 7]]"}
{"instruction": "Write code in Java to sort an array of integers in ascending order.", "input": "[5, 2, 8, 10, 4, 9]", "output": "public static void sortAscending(int[] arr) {\n    for(int i = 0; i < arr.length - 1; i++) {\n        int min = i;\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[min]) {\n                min = j;\n            }\n        }\n        int tmp = arr[i];\n        arr[i] = arr[min];\n        arr[min] = tmp;\n    }\n}"}
{"instruction": "Update the following code to use a while loop instead of a for loop", "input": "`# Define an array\narr = [1, 2, 3, 4]\n\n# Iterate over the array and print each element\nfor i in arr:\n    print(i)`", "output": "# Define an array\narr = [1, 2, 3, 4]\n\n# Initialize the index\ni = 0\n\n# Iterate over the array and print each element\nwhile i < len(arr):\n    print(arr[i])\n    i += 1"}
{"instruction": "Generate a character frequency histogram of a sentence.", "input": "Distribution of characters in \u201cThe quick brown fox jumps over the lazy dog.\u201d", "output": "def get_char_freq_histogram(string):\n    char_freq_dict = {}\n    for char in string:\n        if char in char_freq_dict:\n            char_freq_dict[char] += 1\n        else:\n            char_freq_dict[char] = 1\n    return char_freq_dict\n\nif __name__ == \"__main__\":\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    char_freq_histogram = get_char_freq_histogram(sentence)\n    print(char_freq_histogram)"}
{"instruction": "Choose a suitable data structure to store a collection of products.", "input": "", "output": "The most suitable data structure for storing a collection of products is a dictionary where a unique identifier is used as the key and the product attributes are stored in values associated with that key."}
{"instruction": "Find the difference between the objects in the following JavaScript code.", "input": "", "output": "The difference between the objects in the JavaScript code is that the first object is created using the object literal syntax where key-value pairs are declared directly, while the second object is created using the new keyword which calls a constructor to create an object and assign key-value pairs to it."}
{"instruction": "Given a JSON string, write a program to convert it into an equivalent XML string.", "input": "{\"name\":\"John\",\"city\":\"New York\"}", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<root> \n    <name>John</name> \n    <city>New York</city> \n</root>"}
{"instruction": "Print out the number of items in the following list.", "input": "my_list = [1, 2, 3, 4, 5, 6, 7]", "output": "7"}
{"instruction": "Write a code snippet to cut the first 10 characters from a string.", "input": "String: \"Hello World!\"", "output": "```\nstring = \"Hello World!\"\nstring = string[10:]\nprint(string)\n```"}
{"instruction": "Implement a function in Python to find the maximum number from a list of integers.", "input": "[3, 5, 1, 6, 10]", "output": "def findMax(list): \n    max = list[0] \n  \n    for i in list: \n        if i > max: \n            max = i \n  \n    return max"}
{"instruction": "Calculate the total number of unique elements in this array.", "input": "array = [[1, 1], [2, 2], [3, 3], [4, 4]]", "output": "total_items = len(array)\nunique_items = len(set(sum(array, [])))\ntotal_unique_items = total_items - unique_items\nprint(total_unique_items)\n# Output: 4"}
{"instruction": "Insert a given value in the middle of a linked list.", "input": "Linked list: [1, 2, 3]\nValue: 4", "output": "[1, 2, 4, 3]"}
{"instruction": "Train a logistic regression classifier on the given dataset.", "input": "[Dataset details]\n\nThis dataset contains information on Belgian bank customers, including their credit score and risk profile. It consists of 1000 rows and 5 columns. The columns are:\n- Age\n- Credit Score\n- Gender\n- Risk Profile\n- Status", "output": "model = LogisticRegression()\nmodel.fit(X, y)"}
{"instruction": "Create a function in C++ that takes in two integers, multiplies them and then prints the result.", "input": "", "output": "#include <iostream>\n \n// Function that takes in two integers, multiplies them and then prints the result\nvoid multiplyAndPrint(int num1, int num2)\n{\n    int result = num1 * num2;\n    std::cout << \"The result is: \" << result << std::endl;\n}"}
{"instruction": "Modify a jQuery code to make an element translucent", "input": "", "output": "$(document).ready(function(){\n  $(\"#targetElement\").css(\"opacity\", \"0.5\");\n});"}
{"instruction": "Use JavaScript to illustrate the concept of inheritance with an example.", "input": "", "output": "In JavaScript, inheritance is an object-oriented programming concept where an object inherits the properties and methods from its parent object. To illustrate this concept, consider the example of a Person being a parent object and a Student being the child object. The Person object would have properties such as age, name, and gender, while the Student object would inherit all of those properties and have additional properties such as grade and student_ID."}
{"instruction": "Modify the 'Bike' class so that when instances are created they are assigned a unique ID.", "input": "", "output": "# Define a class for a bike\nclass Bike:\n _id = 0\n\n def __init__(self, color, make, description): \n  Bike._id += 1\n  self.id = Bike._id\n  self.color = color\n  self.make = make\n  self.description = description"}
{"instruction": "Write Angular code to bind a variable to the HTML view.", "input": "", "output": "<div> \n  {{my_variable}}\n</div>"}
{"instruction": "Generate a random valid email address.", "input": "", "output": "import random\n\ndef generate_email():\n characters = 'abcdefghijklmnopqrstuvwxyz0123456789'\n email_address = ''.join(random.choice(characters) for i in range(10))\n return email_address + '@example.com'"}
{"instruction": "Convert a number from decimal to octal in Python.", "input": "number = 109", "output": "decimal  = 109    \noctal = format(decimal, 'o')  \n\nprint(\"Decimal:\", decimal)\nprint(\"Octal:\", octal)"}
{"instruction": "Write a web page in HTML to view a list of books", "input": "", "output": "<html>\n  <head>\n    <title>List of Books</title>\n  </head>\n  <body>\n    <h1>List of Books</h1>\n    <ul>\n      <li>The Alchemist</li>\n      <li>Life of Pi</li>\n      <li>The Great Gatsby</li>\n      <li>The Catcher in the Rye</li>\n      <li>Harry Potter and the Sorcerer's Stone</li>\n    </ul>\n  </body>\n</html>"}
{"instruction": "Output the Fibonacci sequence up to 50", "input": "", "output": "0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55"}
{"instruction": "Write a code snippet for a function that deletes a specific element from an array.", "input": "", "output": "def delete_element(arr, element):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            while count < len(arr)-1:\n                arr[i] = arr[i+1]\n                i+=1\n            count+=1\n    arr.pop()\n    return arr"}
{"instruction": "Generate a Java program that creates a class Student with attributes name and age, and a constructor to initialize the attributes.", "input": "", "output": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}"}
{"instruction": "Create a script that can predict the next letter in a given string of text.", "input": "Hello", "output": "\"\"\"\nCreate a script that can predict the next letter in a given string of text\n\"\"\"\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\ndef predict_next_letter(text):\n  data = [ord(char) for char in text]\n  data = pad_sequences([data], maxlen=10, truncating='post')\n  prediction = model.predict(data)\n  index = tf.argmax(prediction[0]).numpy()\n  \n  return chr(index)\n\nif __name__ == '__main__':\n    print(predict_next_letter('Hello'))"}
{"instruction": "Write CSS code to style a web page with a white background and black text.", "input": "", "output": "body {\n    background-color: white; \n    color: black;\n}"}
{"instruction": "Create a PHP script to find the factorial of a given integer.", "input": "", "output": "<?php \nfunction factorial($num) { \n    if ($num == 0) { \n        return 1; \n    } \n    else { \n    return $num * factorial($num - 1); \n    } \n} \n  \n$num = 5; \necho \"Factorial of $num is  \" . factorial($num); \n?>"}
{"instruction": "Suggest a SQL query to retrieve the 10 most populous cities in the USA.", "input": "", "output": "SELECT city, population\nFROM cities\nWHERE country = 'USA'\nORDER BY population DESC\nLIMIT 10;"}
{"instruction": "Write a JavaScript function to replace all non-alphabetical characters in a string with the symbol \u2018#\u2019.", "input": "Given string: \"Hello, world!\"", "output": "function replaceNonAlphabets(str){\n  return str.replace(/[^a-zA-Z]/g, '#');\n}"}
{"instruction": "Rewrite the following jQuery code to its vanilla JavaScript equivalent.", "input": "$(\"#list li\").each(function(){\n  //some code\n});", "output": "document.querySelectorAll(\"#list li\").forEach(function (el) {\n  //some code\n});"}
{"instruction": "Edit the following code so that it prints out a right triangle of size n", "input": "int n = 5;\nfor (int i = 0; i < n; i++) {\n  for (int j = 0; j <= i; j++) {\n    System.out.print(\"*\");\n  }\n  System.out.println();\n}", "output": "int n = 5;\nfor (int i = n; i > 0; i--) {\n  for(int j = 0; j < i; j++) {\n    System.out.print(\"*\");\n  }\n  System.out.println();\n}"}
{"instruction": "Describe the working of a set in Python.", "input": "", "output": "A set in Python is an unordered collection of unique elements. It is an efficient data structure which provides a variety of operations such as membership testing, intersection, union and difference. Sets in Python do not allow duplicate elements and also do not maintain any particular order of the elements. Sets are mutable meaning that elements can be added or removed from them."}
{"instruction": "How is data stored in a binary tree in C++?", "input": "", "output": "Data is typically stored in a binary tree in C++ using a linked list with each node representing a data item. A node consists of a data element and two child nodes, known as the left and right nodes. The left node represents the lesser element, while the right node represents the greater element. Each node also includes a link to each of its children and a link to its parent node. This structure allows for efficient searching and insertion of elements in the binary tree."}
{"instruction": "Edit the given SQL query to find the maximum salary", "input": "SELECT MIN(salary) FROM employees", "output": "SELECT MAX(salary) FROM employees;"}
{"instruction": "Create a program in SQL to display the name and salary of the employees whose salary is equal to the average salary of the employees.", "input": "Table A\n\nid | name  | salary\n-----------------\n1 | John  | 35000\n2 | Peter | 50000 \n3 | Dave  | 70000", "output": "SELECT name, salary \nFROM TableA\nWHERE salary = (SELECT AVG(salary) FROM TableA);"}
{"instruction": "Convert the following hexadecimal value to its decimal equivalent.", "input": "hex_value = \"0xFF\"", "output": "hex_value = \"0xFF\"\n\ndec_value = int(hex_value, 16)\nprint(dec_value) # output: 255"}
{"instruction": "Create a new MySQL table to store user data.", "input": "Table structure: \nUser_ID, FirstName, LastName, Email", "output": "CREATE TABLE User_Data (\nUser_ID INT,\nFirstName VARCHAR (20) NOT NULL,\nLastName VARCHAR (20) NOT NULL,\nEmail VARCHAR (50) NOT NULL,\n PRIMARY KEY (User_ID)\n);"}
{"instruction": "Create a function to print all permutations of a string without duplicates.", "input": "string = \"abc\"", "output": "def permutations(string):\n    res = set()\n    if len(string) == 1:\n        res.add(string)\n    else:\n        for i, char in enumerate(string):\n            for perm in permutations(string[:i], string[i+1:]):\n                res.add(char + perm)\n    return res\n\n# Output\n{'abc', 'acb', 'bac', 'bca', 'cab', 'cba'}"}
{"instruction": "Write a PHP script that prints the current hour, minute, and second.", "input": "", "output": "<?php\n$time = getdate(); \necho \"Hour: \".$time['hours'].\"<br>\"; \necho \"Minutes: \".$time['minutes'].\"<br>\"; \necho \"Seconds: \".$time['seconds']; \n?>"}
{"instruction": "Write a queries for finding the second highest salary of an employee in Employee table.", "input": "", "output": "SELECT MAX(Salary) \nFROM Employee \nWHERE Salary < (SELECT MAX(Salary) FROM Employee);"}
{"instruction": "Construct a RegEx pattern to identify a number followed by three uppercase letters.", "input": "", "output": "^[0-9][A-Z]{3}$"}
{"instruction": "Write a regular expression to match a string that contains the word \"Hello\" at the start of the string.", "input": "", "output": "^Hello.*"}
{"instruction": "Using the Pandas library, parse the given json object.", "input": "{\n   \"name\": \"James\",\n   \"age\": \"60\",\n   \"address\":{\n      \"street\": \"123 Fake Street\",\n      \"city\": \"Springfield\",\n      \"state\": \"MA\"\n }\n}", "output": "import pandas as pd\n\ndata = {\n    'name': [\"James\"],\n    'age': [60],\n    'street': [\"123 Fake Street\"],\n    'city': [\"Springfield\"],\n    'state': [\"MA\"],\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n# Output: \n  name  age         street       city state\n0 James   60  123 Fake Street  Springfield    MA"}
{"instruction": "Write a JavaScript program that allows the user to input two numbers and shows the bigger number.", "input": "", "output": "function biggestNum(){\nvar num1 = parseInt(prompt(\"Please enter the first number: \")); \nvar num2 = parseInt(prompt(\"Please enter the second number: \")); \n  \nif(num1 > num2){\n  alert(\"The largest number is: \" + num1); \n}\nelse if(num2 > num1){\n  alert(\"The largest number is: \" + num2); \n}\nelse{\n  alert(\"Both numbers are equal.\");\n}\n}\nbiggestNum();"}
{"instruction": "Write a Java method which will print the Fibonacci sequence based on a given number.", "input": "", "output": "public void fibonacciSeries(int number) \n    { \n        int prev = 0; \n        int current = 1; \n        System.out.print(\"Fibonacci Series of \"+number+\" numbers:\"); \n  \n        for (int i = 1; i <= number; i++) \n        { \n            System.out.print(prev+\" \"); \n            int sum = prev + current; \n            prev = current; \n            current = sum; \n        } \n    }"}
{"instruction": "Change the following variable to a string.", "input": "a_variable = 8", "output": "a_variable = str(8)"}
{"instruction": "Explain the meaning of the term \u2018data encapsulation\u2019 in Object-Oriented Programming.", "input": "", "output": "Data encapsulation is an important feature of Object-Oriented Programming (OOP). It is a technique of combining data and functions into a single unit called class. data encapsulation hides the implementation details of a class and exposes only the necessary and relevant information which is known as abstraction. This helps to reduce complexity and increase robustness of a program as the implementation details are hidden from the user."}
{"instruction": "Write a MySQL query to find all the customers who have placed an order in the last 30 days.", "input": "", "output": "SELECT * FROM customers\nWHERE EXISTS (SELECT *\n              FROM orders\n              WHERE customers.CustomerID = orders.CustomerID\n              AND orders.OrderDate > NOW() - INTERVAL 30 DAY)"}
{"instruction": "Write a function to rearrange a given string in alphabetical order", "input": "myString = \u2018 Hello World\u2019", "output": "def rearrange_string(myString):\n    myString = myString.lower().strip()\n    words = myString.split(' ') \n    words.sort() \n    return ' '.join(words)\n\nprint(rearrange_string(myString))"}
{"instruction": "List the books in alphabetical order using JavaScript.", "input": "Books = [\"Alice in Wonderland\", \"To Kill a Mockingbird\", \"The Cat in the Hat\", \"Wuthering Heights\"];", "output": "Books.sort();\nconsole.log(Books);"}
{"instruction": "Convert the following JavaScript code to a for loop:", "input": "let num = 0;\nwhile (num < 5) {\n  console.log(num);\n  num++;\n}", "output": "for (let num = 0; num < 5; num++) {\n    console.log(num);\n}"}
{"instruction": "Create a function to merge two lists and remove duplicates.", "input": "list1 = [1, 3, 5, 7] \nlist2 = [2, 3, 8, 10]", "output": "def merge_lists(list1, list2):\n  merged_list = list1 + list2\n  return list(dict.fromkeys(merged_list))"}
{"instruction": "Write a JavaScript program to rotate an array by a given number", "input": "let arr = [1, 2, 3, 4, 5];\nlet n = 2;", "output": "function rotateArray(arr, n) {\n    while (n > 0) {\n        let temp = arr[arr.length-1];\n        for (let i = arr.length-2; i >= 0; i--) { \n            arr[i+1] = arr[i];\n        }\n        arr[0] = temp;\n        n--;\n    }\n    return arr;\n}"}
{"instruction": "Explain the following PHP code.", "input": "$string1 = \"Hello\";\n$string2 = \"World\";\necho $string1 . \" \" . $string2;", "output": "The above PHP code first initializes two string variables, $string1 and $string2, with the strings \"Hello\" and \"World\" respectively. Then, it uses the string concatenation operator (.) to combine the two strings together, separated by a space, and prints the result using the echo function. The result of the above code will be \"Hello World\"."}
{"instruction": "Create an array of the first 10 natural numbers in JavaScript.", "input": "", "output": "let numbers = [1,2,3,4,5,6,7,8,9,10];"}
{"instruction": "Create a function in python that takes a string as an argument and prints out two copies of the string.", "input": "string = \"Hello World!\"", "output": "def print_twice(string):\n    print(string)\n    print(string)\n    \nprint_twice(string)"}
{"instruction": "In JavaScript, write a function which can split a string into its constituent words.", "input": "", "output": "function split_string_to_words(string) {\n    return string.split(' ');\n}"}
{"instruction": "Write an HTML code to display a table of 3 columns and 5 rows.", "input": "", "output": "<table>\n  <tr>\n    <th>Column1</th>\n    <th>Column2</th>\n    <th>Column3</th>\n  </tr>\n  <tr>\n    <td>Row1_data1</td>\n    <td>Row1_data2</td>\n    <td>Row1_data3</td>\n  </tr>\n  <tr>\n    <td>Row2_data1</td>\n    <td>Row2_data2</td>\n    <td>Row2_data3</td>\n  </tr>\n  <tr>\n    <td>Row3_data1</td>\n    <td>Row3_data2</td>\n    <td>Row3_data3</td>\n  </tr>\n  <tr>\n    <td>Row4_data1</td>\n    <td>Row4_data2</td>\n    <td>Row4_data3</td>\n  </tr>\n  <tr>\n    <td>Row5_data1</td>\n    <td>Row5_data2</td>\n    <td>Row5_data3</td>\n  </tr>\n</table>"}
{"instruction": "Given an array with n elements, find the maximum element of the array.", "input": "[1, 10, 5, 33, 4]", "output": "33"}
{"instruction": "What is the ASCII character for the code \u201c97\u201d?", "input": "", "output": "The ASCII character for the code \u201c97\u201d is 'a'."}
{"instruction": "Implement a vector class in Python that allows for basic vector operations such as vector addition, subtraction and scalar multiplication.", "input": "", "output": "class Vector(object):\n \n  def __init__(self, components):\n    self.components = components\n \n  def add(self, vector):\n    if len(self.components) != len(vector.components):\n      return None\n    components = [x + y for x, y in zip(self.components, vector.components)]\n    return Vector(components)\n \n  def sub(self, vector):\n    if len(self.components) != len(vector.components):\n      return None\n    components = [x - y for x, y in zip(self.components, vector.components)]\n    return Vector(components)\n \n  def scalar_mul(self, scalar):\n    components = [x * scalar for x in self.components]\n    return Vector(components)"}
{"instruction": "Write an SQL query to select all rows from the table 'users' where the 'last_name' is 'Smith'.", "input": "", "output": "SELECT * FROM users WHERE last_name = 'Smith'"}
{"instruction": "Write a Java program to define a class for a Dice object.", "input": "", "output": "class Dice {\n    private int number;\n    private int roll_count = 0;\n    Random random = new Random();\n\n    public int roll() {\n        roll_count++;\n        number = random.nextInt(6) + 1;\n        return number;\n    }\n\n    public int getNumber() {\n        return number;\n    }\n\n    public int getRollCount() {\n        return roll_count;\n    }\n}"}
{"instruction": "Edit the following code to increment a variable by one when its value is less than 10.", "input": "int i = 5;", "output": "int i = 5;\nif (i < 10) {\n    i++;\n}"}
{"instruction": "Generate code to rearrange a given array of integers.", "input": "[2, 4, 6, 8]", "output": "def rearrange_array(arr):\n  arr.sort()\n  return arr"}
{"instruction": "Create an array of five numbers and output the result in reverse order.", "input": "1, 2, 3, 4, 5", "output": "ans = [5,4,3,2,1]"}
{"instruction": "Write a Python program to sort the list of dictionaries by values in ascending order.", "input": "data = [{'name': 'John', 'age': 23}, \n        {'name': 'Joe', 'age': 28}, \n        {'name': 'Jack', 'age': 25}]", "output": "def sort_by_age(data):\n  return sorted(data, key=lambda k: k['age'], reverse=False)\n\nsorted_list = sort_by_age(data)\nprint(sorted_list)"}
{"instruction": "Create Java classes to represent a user and a post.", "input": "", "output": "public class User { \n  private String name; \n  private String email; \n\n  //getters and setters\n  ...\n}\n\npublic class Post {\n  private int id;\n  private String title;\n  private User author;\n  private String content;\n\n  //getters and setters \n  ... \n}"}
{"instruction": "Extract a numeric value from the following string in Python.", "input": "myString = \"The length of the tree is 25 meters\"", "output": "import re\n\nnewString = re.findall(r\"[\\d.]+\", myString)\nprint(newString[0]) # 25"}
{"instruction": "In Java, how do I create an array of integers from a given array of strings with integer values?", "input": "", "output": "String[] strArray = {\"1\", \"2\", \"3\", \"4\"};\nint[] intArray = Arrays.stream(strArray)\n                            .mapToInt(Integer::parseInt)\n                            .toArray();"}
{"instruction": "Implement a function that swaps the places of two elements in a list.", "input": "my_list = [1,2,3,4,5]", "output": "def swap(my_list, index_1, index_2):\n    # Store the two elements \n    temp = my_list[index_1]\n    my_list[index_1] = my_list[index_2]\n    my_list[index_2] = temp"}
{"instruction": "Develop a web page that displays the current temperature in various cities.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Weather Tracker</title>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n</head>\n<body>\n    <h1>Current Weather</h1>\n    <div class=\"data-table\"></div>\n\n    <script>\n        $(function() {\n            $.get('https://weather-tracker-server.herokuapp.com', function(data) {\n                var cityNames = [];\n                var temperatures = [];\n                $(data).each(function(index, item) {\n                    cityNames.push(item.name);\n                    temperatures.push(item.temperature);\n                });\n                $('.data-table').append(`<span>City</span><span>Temperature</span>`);\n                for (var i = 0; i < data.length; i++) {\n                    $('.data-table').append(`<span>${cityNames[i]}</span><span>${temperatures[i]}</span>`);\n                }\n            });\n        });\n    </script>\n</body>\n</html>"}
{"instruction": "Given a collection of email addresses, group them by the domain", "input": "emails = [\"test@example.com\", \"example@example.org\", \"test@test.co.uk\"]", "output": "emails = [\"test@example.com\", \"example@example.org\", \"test@test.co.uk\"]\n\nfrom collections import defaultdict\n\nby_domain = defaultdict(list)\n\nfor email in emails:\n    domain = email.split(\"@\")[-1]\n    by_domain[domain].append(email)\n\nprint(dict(by_domain))"}
{"instruction": "Reverse the string given in the input", "input": "Hello world", "output": "s = \"Hello world\" \ns = s[::-1] \nprint(s)"}
{"instruction": "Design a CSS class to set the color of text.", "input": "", "output": ".text-color {\n  color: #000000;\n}"}
{"instruction": "Create a function to determine if a given string is an anagram of another. An anagram is a word or phrase formed by rearranging the letters of another word or phrase.", "input": "", "output": "def is_anagram(str1, str2):\n   sorted_str1 = \"\".join(sorted(str1))\n   sorted_str2 = \"\".join(sorted(str2))\n   \n   if sorted_str1 == sorted_str2: \n       return True \n   return False"}
{"instruction": "What data type is suitable for this data?", "input": "Data: \"apple\"", "output": "The suitable data type for this data is a string."}
{"instruction": "Write code that takes in two numeric variables x and y, and if x is divisible by y, it should print \"x is divisible by y\"Otherwise it should print \"x is not divisible by y\".", "input": "x = 9, y = 3", "output": "def is_divisible(x, y):\n    if x % y == 0:\n        print(\"x is divisible by y\")\n    else:\n        print(\"x is not divisible by y\")\n\n# testing\nx = 9\ny = 3\nprint(is_divisible(x ,y)) # Output: x is divisible by y"}
{"instruction": "Create a Python class for circles with radius and color as its properties.", "input": "", "output": "class Circle:\n \n    # Constructor\n    def __init__(self, radius, color):\n        self.radius = radius\n        self.color = color\n \n    # To get radius\n    def getRadius(self):\n        return self.radius\n \n    # To get color\n    def getColor(self):\n        return self.color"}
{"instruction": "Write a function that takes a name as a parameter and returns its reverse counterpart.", "input": "name = \"John\"", "output": "def reverse_name(name):\n    return name[::-1]"}
{"instruction": "Design a SQL query to retrieve data from multiple tables.", "input": "", "output": "SELECT t1.col1, t1.col2, t2.col1, t2.col2 \nFROM table1 t1 \nINNER JOIN table2 t2 \nON t1.col1 = t2.col1"}
{"instruction": "Calculate the sum of squares of the numbers till 10", "input": "", "output": "385"}
{"instruction": "You need to rearrange the characters in a given string such that no two same characters are adjacent to each other.", "input": "abccab", "output": "def rearrange(string):\n    seen = set()\n    result = []\n    for char in string:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n        else:\n            for ch in string:\n                if ch not in seen:\n                    seen.add(ch)\n                    result.append(ch)\n    return ''.join(result)"}
{"instruction": "Construct a JSON object from an array of objects.", "input": "// Given Array\n[\n    {\n        \"name\": \"John\",\n        \"age\": 24\n    },\n    {\n        \"name\": \"Max\",\n        \"age\": 27\n    }\n]", "output": "{\"people\": [\n  {\n        \"name\": \"John\",\n        \"age\": 24\n    },\n    {\n        \"name\": \"Max\",\n        \"age\": 27\n    }\n]}"}
{"instruction": "Extract the country code from a given phone number of the format +cc xxx-xxx-xxxx", "input": "+91 983-741-3256", "output": "def extract_country_code(number):\n    # Check if number is valid\n    if len(number) == 13 and number[0] == '+':\n        # Extract the country code\n        cc = number[1:3]\n        return cc\n\nif __name__ == \"__main__\":\n    number = \"+91 983-741-3256\"\n    print(extract_country_code(number))"}
{"instruction": "Design a Data Structure in Javascript to store a list of tasks.", "input": "", "output": "class TaskList {\n  constructor() {\n    this.tasks = []\n  }\n\n  add_task(task) {\n    this.tasks.push(task);\n  }\n\n  remove_task(task) {\n    const i = this.tasks.indexOf(task);\n    if (i !== -1) {\n      this.tasks.splice(i, 1);\n    }\n  }\n\n  count_tasks() {\n    return this.tasks.length;\n  }\n}"}
{"instruction": "Generate HTML code for a table that displays the result of multiplication for the numbers from 1 to 10.", "input": "", "output": "<table>\n  <thead>\n    <tr>\n      <th>x</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>6</td>\n      <td>8</td>\n      <td>10</td>\n      <td>12</td>\n      <td>14</td>\n      <td>16</td>\n      <td>18</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>3</td>\n      <td>6</td>\n      <td>9</td>\n      <td>12</td>\n      <td>15</td>\n      <td>18</td>\n      <td>21</td>\n      <td>24</td>\n      <td>27</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>4</td>\n      <td>8</td>\n      <td>12</td>\n      <td>16</td>\n      <td>20</td>\n      <td>24</td>\n      <td>28</td>\n      <td>32</td>\n      <td>36</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>5</td>\n      <td>10</td>\n      <td>15</td>\n      <td>20</td>\n      <td>25</td>\n      <td>30</td>\n      <td>35</td>\n      <td>40</td>\n      <td>45</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>6</td>\n      <td>12</td>\n      <td>18</td>\n      <td>24</td>\n      <td>30</td>\n      <td>36</td>\n      <td>42</td>\n      <td>48</td>\n      <td>54</td>\n      <td>60</td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td>7</td>\n      <td>14</td>\n      <td>21</td>\n      <td>28</td>\n      <td>35</td>\n      <td>42</td>\n      <td>49</td>\n      <td>56</td>\n      <td>63</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <td>8</td>\n      <td>8</td>\n      <td>16</td>\n      <td>24</td>\n      <td>32</td>\n      <td>40</td>\n      <td>48</td>\n      <td>56</td>\n      <td>64</td>\n      <td>72</td>\n      <td>80</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td>9</td>\n      <td>18</td>\n      <td>27</td>\n      <td>36</td>\n      <td>45</td>\n      <td>54</td>\n      <td>63</td>\n      <td>72</td>\n      <td>81</td>\n      <td>90</td>\n    </tr>\n    <tr>\n      <td>10</td>\n      <td>10</td>\n      <td>20</td>\n      <td>30</td>\n      <td>40</td>\n      <td>50</td>\n      <td>60</td>\n      <td>70</td>\n      <td>80</td>\n      <td>90</td>\n      <td>100</td>\n    </tr>\n  </tbody>\n</table>"}
{"instruction": "Explain what a Python dictionary is.", "input": "", "output": "\"\"\"\nExplain what a Python dictionary is.\n\"\"\"\n\nA Python dictionary is a collection of key-value pairs. Each key is associated with a single value, and each key is unique. Dictionaries are mutable, meaning that their values can be changed after they are created. Dictionaries are commonly used for storing data in a structured form, as well as for rapidly looking up values associated with a given key. They are also commonly used for storing metadata and other related information."}
{"instruction": "Suggest a suitable data structure to hold a series of student records.", "input": "", "output": "A dictionary would be the best data structure to hold student records, since it allows easy mapping of student identifiers (e.g. a student's ID number or username) to associated data about that student, such as their name, age, and academic results."}
{"instruction": "Using SQL, return all unique books from the library database.", "input": "Table name: Library\n\nColumns: Id, Title", "output": "SELECT DISTINCT Title\nFROM Library;"}
{"instruction": "Create a C# function that takes 2 input strings and returns true if one string is a permutation of the other.", "input": "", "output": "static bool IsPermutation(string s1, string s2)\n{\n    if (string.ReferenceEquals(s1, s2))\n        return true;\n    if (s1 == null || s2 == null)\n        return false;\n    if (s1.Length != s2.Length)\n        return false;\n\n    int[] charCount = new int[256];\n\n    foreach (char c in s1){\n        charCount[c]++;\n    }\n\n    foreach (char c in s2) {\n        if (--charCount[c] < 0)\n            return false;\n    }\n\n    return true;\n}"}
{"instruction": "Which of the following is a valid operator in Python?", "input": "", "output": "The following are valid Python operators: '+', '-', '*', '/', '%', '//', '**', '&', '|', '^', '<<', '>>'."}
{"instruction": "Generate an HTML list with the following entries:", "input": "Apple\nBanana\nCherry", "output": "<ul>\n <li>Apple</li>\n <li>Banana</li>\n <li>Cherry</li>\n</ul>"}
{"instruction": "Create a dictionary in Python whose keys are the integers from 1 to 10 and whose values are the squares of the keys.", "input": "", "output": "d = {i: i*i for i in range(1, 11)} # {1:1, 2:4, etc.}"}
{"instruction": "Clean up the following function so that there are no redundant parentheses:", "input": "def foo ( ( a ) ,  (b) ):\nreturn a + b", "output": "def foo(a,b):\n    return a + b"}
{"instruction": "Create a Swift closure to calculate the power of a number.", "input": "", "output": "let powerCalc = { (base: Int, exp: Int) -> Int in\n  return Int(pow(Double(base), Double(exp)))\n}"}
{"instruction": "Perform string manipulation to generate the word 'happy' by starting with the word 'sad'", "input": "", "output": "word = 'sad'\nword = word[0] + word[2:] + 'py'"}
{"instruction": "Change the HTML code to open a link in a new tab when the button is clicked.", "input": "<button>Visit example.com</button>", "output": "<button onclick=\"window.open('https://example.com/','_blank')\">Visit example.com</button>"}
{"instruction": "Write a function in C++ that takes an integer array as a parameter and returns the average value in the array.", "input": "", "output": "float getAverage(int arr[], int n){ \n    int sum=0;\n    for (int i=0; i<n; i++) \n        sum += arr[i];\n  \n    return (sum/n); \n}"}
{"instruction": "Describe the purpose of a hash table.", "input": "", "output": "A hash table is a data structure that is used to store key-value pairs. It allows efficient insertion, retrieval, and deletion of items by using a hash function to map keys to values. Hash tables are typically used for faster lookups, and they can be used to implement associative arrays, symbolic dictionaries, and many other data structures."}
{"instruction": "Reverse a string of characters and words.", "input": "Hello World", "output": "dlroW olleH"}
{"instruction": "Write SQL query to list the names of all products whose stock is more than 50", "input": "", "output": "SELECT name FROM products WHERE stock > 50;"}
{"instruction": "Suggest an API endpoint for updating an existing blog post in Ruby on Rails.", "input": "", "output": "put \"/posts/:id\" do\n  post = Post.find(params[:id])\n  if post.update(params[:post])\n    status 200\n    json post.to_json\n  else\n    status 400\n    json post.errors\n  end\nend"}
{"instruction": "Build a graphical user interface using Java.", "input": "", "output": "import java.awt.*;\nimport javax.swing.*;\n\npublic class GUIExample {\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"GUI Example\");\n        frame.setSize(400, 600);\n \n        JPanel panel = new JPanel();\n \n        JLabel label = new JLabel(\"This is a simple GUI.\");\n        JButton button = new JButton(\"Click Me!\");\n \n        panel.add(label);\n        panel.add(button);\n \n        frame.add(panel);\n        frame.setVisible(true);\n    }\n}"}
{"instruction": "Create a UI Automation test that validates the text field is populated with the value \"Hello World!\".", "input": "", "output": "describe('Populated Text Field Test', () => { \n    it('Should validate the text field has the value of \"Hello World!\"', () => {\n        const value = textField.getAttribute('value');\n        expect(value).toEqual('Hello World!');\n    }); \n});"}
{"instruction": "Write a script that sorts an array of numbers from smallest to largest.", "input": "var numbers = [3, 7, 4, 2, 9, 1];", "output": "numbers.sort(function(a, b){\n    return a-b\n});\nconsole.log(numbers); //output: [1, 2, 3, 4, 7, 9]"}
{"instruction": "Create an array of five elements using the language of your choice.", "input": "", "output": "my_list = [1, 2, 3, 4, 5]"}
{"instruction": "Create a variable to store the age of a person and print a corresponding message.", "input": "age = 20", "output": "age = 20\nprint(f\"The age of the person is {age}.\")"}
{"instruction": "Perform the following operation on this array and print the result: remove the last two elements and add them to the beginning.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr.splice(-2); \narr.unshift(4,5);"}
{"instruction": "Write a function in Python to remove all 'null' values from a nested dictionary.", "input": "", "output": "def remove_nulls(dictionary):\n    if isinstance(dictionary, dict):\n        return {key: remove_nulls(value) \n        for key, value in dictionary.items() if not value == None}\n    else:\n        return dictionary"}
{"instruction": "Come up with Java code to find the square root of a given number.", "input": "9", "output": "public double squareRoot(double x) {\n    double start = 0;\n    double end = x;\n    double precision = 0.00001;\n\n    while (end - start > precision) {\n        double mid = (start + end) / 2;\n        double midSqr = mid * mid;\n\n        if (midSqr > x) {\n            end = mid;\n        } else {\n            start = mid;\n        }\n    }\n    return (start + end) / 2;\n}"}
{"instruction": "Write a SQL query to find the most expensive item in the table.", "input": "", "output": "SELECT * FROM items ORDER BY price DESC LIMIT 1;"}
{"instruction": "Update the HTML structure with a <p> tag that contains the text \"Welcome to my website\".", "input": "<html>\n<head>\n <title>My Website</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<html>\n<head>\n <title>My Website</title>\n</head>\n<body>\n <p>Welcome to my website</p>\n</body>\n</html>"}
{"instruction": "Explain the purpose of try and except blocks when writing code.", "input": "", "output": "Try and except blocks are used in Python to catch and handle errors in code. The basic structure of a try-except block is a try statement followed by one or more except statements. The try block includes code that may throw an error and the except block includes code that will be executed if an error is thrown. This is useful for code that needs to handle any potential errors that may arise from its execution."}
{"instruction": "Output the result of a line of code snippet.", "input": "list_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\nlist_1 + list_2", "output": "[1, 2, 3, 4, 5, 6]"}
{"instruction": "Create an array with 5 numbers 0-9 randomly.", "input": "", "output": "[3, 9, 4, 5, 0]"}
{"instruction": "Debug the following C++ program.", "input": "#include<iostream> \nusing namespace std;\n  \nint main() \n{ \n    int a, b \n    cin>>a,b;\n  \n    cout<<\"The product is \"<<a*b;\n    return 0;\n}", "output": "#include<iostream> \nusing namespace std;\n  \nint main() \n{ \n    int a, b;\n    cin>>a>>b; // change \",\" to \">>\"\n  \n    cout<<\"The product is \"<<a*b;\n    return 0;\n}"}
{"instruction": "Write a HTML code snippet to create a table with three columns.", "input": "", "output": "<table>\n  <tr>\n    <th>column 1</th>\n    <th>column 2</th>\n    <th>column 3</th>\n  </tr>\n</table>"}
{"instruction": "Create a function in Python to find all pairs of integers that sum up to k.", "input": "", "output": "def find_pair(arr,k):\n  pairs = []\n  found_elements = set()\n  for num in arr:\n    diff = k - num\n    if diff in found_elements:\n      pairs.append([min(num,diff), max(num,diff)])\n    found_elements.add(num)\n  return pairs"}
{"instruction": "Design a function to input an array and sort it using QuickSort algorithm.", "input": "", "output": "def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n  \n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)"}
{"instruction": "Here is a list of strings and a specific string pattern. Write a code to return a list of all strings that match the pattern.", "input": "strings = [\"abc\",\"bcd\",\"cde\",\"def\",\"efg\"]\npattern = \"?ef\"", "output": "matched_strings = []\nfor string in strings:\n    if string[1:3] == pattern[1:3]:\n        matched_strings.append(string)\nprint(matched_strings) # [\"bcd\", \"def\"]"}
{"instruction": "Design an algorithm in Python to retrieve all elements in a given array that occur only once.", "input": "", "output": "def singleOccurence(arr): \n    ans = []\n    for i in range(len(arr)): \n        count = 0\n        for j in range(len(arr)): \n            if arr[i] == arr[j]: \n                count+=1\n        if count == 1: \n            ans.append(arr[i]) \n    return ans"}
{"instruction": "You need to clean a given string by removing all the special characters.", "input": "let str = 'Hello.., World!';", "output": "function removeSpecialChars(str) {\n    let regex = /[^a-zA-Z0-9]/g;\n    let cleanString = str.replace(regex, '');\n    return cleanString;\n}\n\nlet result = removeSpecialChars(str);\nconsole.log(result); // HelloWorld"}
{"instruction": "Change the last line of the code to assign the output of the function call to the variable n.", "input": "def add_two_numbers(x, y):\n    return x + y\n\n# TODO:", "output": "def add_two_numbers(x, y):\n    return x + y\n\nn = add_two_numbers(x, y)"}
{"instruction": "What should be written in place of \"___\" to make the following code a valid if-else statement in Python?", "input": "if x >= 0:\n ___", "output": "if x >= 0:\n    print(\"x is positive\")"}
{"instruction": "Rewrite the following JavaScript code to jQuery.", "input": "document.querySelector('#main').addEventListener('click', event => {\n    console.log('The element was clicked!')\n})", "output": "$('#main').click(function(event) {\n    console.log('The element was clicked!');\n});"}
{"instruction": "Strip the white spaces from a given string.", "input": "my_string = \"   Hello World     \"", "output": "stripped_string = my_string.strip()"}
{"instruction": "Add 10 to the last element of a given array.", "input": "[1, 2, 3, 4]", "output": "arr = [1, 2, 3,4]\narr[-1] += 10\nprint(arr)"}
{"instruction": "Create an efficient algorithm that finds the intersection between two sorted arrays.", "input": "arr1 = [1, 2, 6, 8, 9]\narr2 = [2, 3, 5, 6, 7]", "output": "def intersection(arr1, arr2): \n\n    result = []\n    \n    i = 0\n    j = 0\n  \n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr2[j] < arr1[i]: \n            j += 1\n        else: \n            result.append(arr2[j]) \n            j += 1\n            i += 1\n  \n    return result"}
{"instruction": "What is the minimum number of arguments needed to call the function \"foo\".", "input": "", "output": "The minimum number of arguments needed to call the function \"foo\" is 0."}
{"instruction": "Create a CSS page for styling a header.", "input": "", "output": "h1 {\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 28px;\n    font-style: normal;\n    font-weight: bold;\n    line-height: 32px;\n    letter-spacing: 0.5px;\n    color: #000000;\n    text-align: center;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    margin-bottom: 0px;\n}"}
{"instruction": "Define a constructor in Java to create an instance of a class.", "input": "", "output": "public class MyClass {\n    // Constructors\n    public MyClass() {\n        // Default constructor\n    }\n    \n    // Constructor with parameters\n    public MyClass(int a, int b) {\n        // Do something with the parameters\n    }\n }"}
{"instruction": "Implement a JavaScript function to find all distinct prime factors of a given number.", "input": "", "output": "function findPrimeFactors(num) { \n    let factors = []; \n    while (num % 2 === 0) { \n        factors.push(2); \n        num = num / 2; \n    } \n  \n    // num must be odd at this point \n    for (let i = 3; i <= Math.sqrt(num); i += 2) { \n        while (num % i === 0) { \n            factors.push(i); \n            num = num / i; \n        } \n    } \n  \n    // This condition is to handle the case \n    // when num is a prime number greater than 2 \n    if (num > 2) \n        factors.push(num); \n  \n    // Distinct prime factors\n    let uniqFactors = new Set(factors);\n    return [...uniqFactors];\n}"}
{"instruction": "Write a SQL query to select the top 3 highest salaries in a employees table.", "input": "", "output": "SELECT TOP 3 salary FROM employees ORDER BY salary DESC;"}
{"instruction": "Generate code to create an array of 5 random integers between 0 and 10.", "input": "", "output": "arr = [];\nfor(let i=0; i<5; i++){\n    arr.push(Math.floor(Math.random() * 11));\n}\n\n// Result: arr = [4, 6, 8, 2, 9]"}
{"instruction": "Using PHP, write a code to print out the current date and time in the following format: Thursday, December 18 at 4:30 PM", "input": "", "output": "echo date('l, F j \\a\\\\t g:i A');"}
{"instruction": "Modify the following JavaScript code to find all of the prime numbers from 1 to 100", "input": "for (let i = 1; i <= 10; i++) {\n    console.log(i);\n}", "output": "for (let i = 1; i <= 100; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n        if (i % j == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime) {\n        console.log(i);\n    }\n}"}
{"instruction": "Extract the first 3 characters of an input string using Python.", "input": "String = \"Hello World!\"", "output": "string = \"Hello World!\"\n\n#Extract first 3 characters \nfirst_3_characters = string[0:3]\n\nprint(first_3_characters)"}
{"instruction": "Create a Python class for Animal", "input": "", "output": "class Animal:\n    def __init__(self, name, type):\n        self.name = name\n        self.type = type"}
{"instruction": "Create a shell script for printing Hello World.", "input": "", "output": "#!/bin/sh\necho \"Hello World!\""}
{"instruction": "Reorganize the provided data into an HTML table.", "input": "students = [\n  {name: 'John', age: 23},\n  {name: 'Sarah', age: 26 },\n]", "output": "<table>\n <tr>\n  <th>Name</th>\n  <th>Age</th>\n </tr>\n <tr>\n  <td>John</td>\n  <td>23</td>\n </tr>\n <tr>\n  <td>Sarah</td>\n  <td>26</td>\n </tr>\n</table>"}
{"instruction": "Classify the following sentence as positive, negative, or neutral: \"I am so happy to be here.\"", "input": "", "output": "Positive"}
{"instruction": "Determine whether a given number is an armstrong number or not", "input": "153", "output": "def is_armstrong_number(num):\n  digits = [int(x) for x in str(num)]\n  sum_ = 0\n  for digit in digits:\n    sum_ += pow(digit, len(digits))\n  return num == sum_\n\nprint(is_armstrong_number(153))\n# Output: True"}
{"instruction": "Create a Java program to output the Fibonacci series upto the given number.", "input": "Number: 10", "output": "public class Fibonacci {\n    public static void main(String[] args) {\n        int num = 10;\n        int first = 0; \n        int second = 1;\n        \n        System.out.println(\"Fibonacci Series of \" + num + \" numbers:\");\n        for (int i = 0; i < num; i++) {\n            System.out.print(first + \" \");\n            int sum = first + second;\n            first = second;\n            second = sum;\n        }\n    }\n}"}
{"instruction": "Write a Python code to create two empty lists.", "input": "", "output": "list_one = []\nlist_two = []"}
{"instruction": "Given a sentence, write the code to extract the third word from the sentence.", "input": "sentence = \"I am a coder\"", "output": "sentence = \"I am a coder\"\n\nwords = sentence.split(' ')\nthird_word = words[2]\nprint(third_word)\n#output: 'a'"}
{"instruction": "What is the output of the following C code?\n\nint main() {\n    int x = 10;\n    x = x * -0.5;\n    printf(\"%d\", x);\n    return 0;\n}", "input": "", "output": "The output of the above program is -5."}
{"instruction": "Encrypt a given string using a Caesar cipher.", "input": "String: \"Hello World\"", "output": "Encrypted string: \"Khoor Zruog\""}
{"instruction": "Create code that given two binary search trees, determine if they are identical", "input": "Two Binary Search Trees: Tree1 and Tree2", "output": "def are_identical(Tree1, Tree2): \n    # Both trees are empty \n    if Tree1==None and Tree2==None: \n        return True\n  \n    # If only one of them is empty \n    if (Tree1==None or Tree2==None): \n        return False\n  \n    # Both non-empty, compare the data and \n    # recur for left and right sub-tree \n    if (Tree1.data==Tree2.data and \n        are_identical(Tree1.left, Tree2.left)and\n        are_identical(Tree1.right, Tree2.right)): \n        return True \n    else: \n        return False"}
{"instruction": "Combine the two given strings into one string in the given order.", "input": "string1 = \"hello\"\nstring2 = \"world\"", "output": "string1 + string2 = \"helloworld\""}
{"instruction": "Design a basic game of rock, paper, scissors", "input": "", "output": "import random\n\ndef game():\n    options = ['rock', 'paper', 'scissors']\n\n    player1 = random.choice(options)\n    player2 = random.choice(options)\n\n    if player1 == 'rock' and player2 == 'scissors':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'paper' and player2 == 'rock':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'scissors' and player2 == 'paper':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'scissors' and player2 == 'rock':\n        print(\"Player 2 Wins!\")\n    elif player1 == 'rock' and player2 == 'paper':\n        print(\"Player 2 Wins!\")\n    elif player1 == 'paper' and player2 == 'scissors':\n        print(\"Player 2 Wins!\")\n    else:\n        print(\"It's a draw!\")"}
{"instruction": "Write a C# program to find the maximum and minimum of three numbers.", "input": "", "output": "public void Maximum_Minimum(int num1, int num2, int num3)\n{\n    int max = Math.Max(Math.Max(num1, num2),num3);\n    int min =  Math.Min(Math.Min(num1,num2),num3);\n    Console.WriteLine(\"Maximum Number is : \" + max);\n    Console.WriteLine(\"Minimum Number is : \" + min);\n}"}
{"instruction": "Create a C++ program that finds the first 8 prime numbers.", "input": "", "output": "#include <iostream>\n \nusing namespace std;\n \nint main()\n{\n    int n, i, c;\n \n    for (n = 2; n <= 16; n++)\n    {\n        c = 0;\n \n        for (i = 1; i <= n; i++)\n        {\n            if (n % i == 0)\n            {\n                c++;\n            }\n        }\n \n        if (c == 2)\n        {\n            cout << n << endl;\n        }\n    }\n \n    return 0;\n}"}
{"instruction": "Create a C++ program to merge two arrays of different lengths.", "input": "", "output": "#include <iostream>\nusing namespace std;\n \nvoid mergeArrays(int arr1[], int arr2[], int n1, int n2, int arr3[]) \n{ \n    int i = 0, j = 0, k = 0; \n  \n    while (i<n1 && j <n2) \n    { \n        if (arr1[i] < arr2[j]) \n            arr3[k++] = arr1[i++]; \n        else\n            arr3[k++] = arr2[j++]; \n    } \n   \n    while (i < n1) \n        arr3[k++] = arr1[i++]; \n  \n    while (j < n2) \n        arr3[k++] = arr2[j++]; \n} \n\n// Driver Code\nint main() \n{ \n    int arr1[] = {1, 3, 5, 7}; \n    int n1 = sizeof(arr1) / sizeof(arr1[0]); \n  \n    int arr2[] = {2, 4, 6, 8}; \n    int n2 = sizeof(arr2) / sizeof(arr2[0]); \n  \n    int arr3[n1+n2]; \n    mergeArrays(arr1, arr2, n1, n2, arr3); \n  \n    for (int i=0; i < n1+n2; i++) \n        cout << arr3[i] << \" \"; \n  \n    return 0; \n}"}
{"instruction": "Given a list of integers, how can you find the second smallest number in the list?", "input": "my_list = [4, 8, 19, 6, 17, 11]", "output": "def find_second_smallest_number(lst):\n    sorted_list = sorted(lst)\n    return sorted_list[1]\n\nsecond_smallest_number = find_second_smallest_number(my_list)"}
{"instruction": "Create a lambda function in Python to fetch the age of a person from their given DOB.", "input": "", "output": "import datetime\n\ncalculate_age = lambda dob: int((datetime.date.today() - dob).days / 365.25)"}
{"instruction": "How to check if a given number is an Armstrong number in Python?", "input": "", "output": "#Function to check if a number is an Armstrong number\ndef isArmstrong(number):\n   sum  = 0\n   temp = number\n\n   while temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n \n   if number == sum:\n       return True\n   else:\n       return False\n   \n#Usage\nnumber = 9\nif(isArmstrong(number)):\n    print(f\"{number} is an Armstrong number\")\nelse:\n    print(f\"{number} is not an Armstrong number\")"}
{"instruction": "Create a script to find the most and least frequent words in a given text", "input": "Text: This is a sample text with a few words that should be counted and analyzed.", "output": "def frequent_words(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\n    for w in words:\n        if w not in word_count:\n            word_count[w] = 1\n        else:\n            word_count[w] += 1\n    \n    most_frequent_word = max(word_count, key=word_count.get)\n    least_frequent_word = min(word_count, key=word_count.get)\n\n    return most_frequent_word, least_frequent_word"}
{"instruction": "Write a SQL query to find all the names of people born before 1990.", "input": "", "output": "SELECT name FROM people WHERE year_of_birth <1990;"}
{"instruction": "Compose a SQL query that returns the total number of employees for each department in a given company.", "input": "", "output": "SELECT d.DepartmentName, COUNT(e.DepartmentId) AS TotalEmployees\nFROM Departments d\nINNER JOIN Employees e ON d.DepartmentId = e.DepartmentId\nGROUP BY d.DepartmentName"}
{"instruction": "Write a query with window functions in PostgreSQL to calculate the average salary per department.", "input": "salary", "output": "SELECT AVG(salary) OVER (PARTITION BY department) AS department_avg_salary \nFROM salary;"}
{"instruction": "Write a function to identify leap year.", "input": "", "output": "def isLeapYear(year): \n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0: \n        return True \n    else: \n        return False"}
{"instruction": "Utilizing the SQL language, write a query to select the longest word from the given table.", "input": "Table: words\nColumn Names: id, name", "output": "SELECT name\nFROM words\nORDER BY LENGTH(name) DESC\nLIMIT 1;"}
{"instruction": "How would you design the data structure to store and process results from a 5-choice multiple choice test.", "input": "", "output": "class TestResults {\n    // A map containing the question id as key and the selected answer as value\n    Map<Integer, Integer> answers;\n  \n    // A map containing the question id as key and a boolean indicating whether the answer was correct or not as value\n    Map<Integer, Boolean> scores;\n  \n    // A map containing the question id as key and a list of all the possible answers as value\n    Map<Integer, List<String>> questions;\n  \n    public TestResults(Map<Integer, Integer> answers, Map<Integer, Boolean> scores, Map<Integer, List<String>> questions) {\n        this.answers = answers;\n        this.scores = scores;\n        this.questions = questions;\n    }\n  \n    public Map<Integer, Integer> getAnswers() {\n        return answers;\n    }\n  \n    public Map<Integer, Boolean> getScores() {\n        return scores;\n    }\n    \n    public Map<Integer, List<String>> getQuestions() {\n        return questions;\n    }\n}"}
{"instruction": "How can we create an array of ten zeroes in JavaScript?", "input": "", "output": "In JavaScript, we can create an array of ten zeroes using the Array.from() method. For example:\n\nconst array = Array.from({length: 10}, () => 0);\n\nconsole.log(array);"}
{"instruction": "Create a regular expression to validate a URL string.", "input": "", "output": "# Regular expression to validate a URL string\n^(http:\\/\\/|https:\\/\\/|ftp:\\/\\/)?(www\\.)?([a-zA-Z0-9]+(-?[a-zA-Z0-9])*\\.)+[\\w]{2,5}(\\/\\S*)?$"}
{"instruction": "Write a Python program to output an array with dimensions [N, M] filled with random numbers between 0 and 1", "input": "N = 5\nM = 4", "output": "import numpy as np\nnp.random.seed(0)\nnums=np.random.rand(N,M)\nprint(nums)"}
{"instruction": "Write a compare() function in Java that takes two values and returns -1, 0, or 1 if the first value is less than, equal to, or greater than the second value.", "input": "", "output": "public static int compare(Object o1, Object o2) {\n\n    if (o1 < o2) {\n        return -1;\n    } else if (o1 == o2) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}"}
{"instruction": "Write a Java code to read a string from the user and print it reversed.", "input": "", "output": "import java.util.Scanner;\n\npublic class ReverseString \n{\n    public static void main(String[] args) \n    {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String str = in.nextLine();\n        in.close();\n\n        char[] arr = str.toCharArray();\n\n        for (int i = arr.length - 1; i >= 0; i--) \n        {\n            System.out.print(arr[i]);\n        }\n    }\n}"}
{"instruction": "Write a Python function to convert temperatures from Fahrenheit to Celsius.", "input": "", "output": "def fahrenheit_to_celsius(f):\n return (f - 32) * 5 / 9"}
{"instruction": "Define an F# array and initialize it with even numbers from 0 to 10", "input": "", "output": "let evenNumbers = [|0;2;4;6;8;10|]"}
{"instruction": "Create a loop in Python with the given requirements.", "input": "Print out the numbers from 1 to 10, inclusive", "output": "for x in range(1, 11):\n  print(x)"}
{"instruction": "Design a class in python to find the reverse of a number.", "input": "", "output": "class ReverseNumber(): \n    def __init__(self): \n        pass\n    \n    def reverse_number(self, num): \n      \n        reverse = 0\n  \n        # Iterate over the given number \n        while(num > 0): \n            reminder = num % 10\n  \n            # Constructing the reverse number\n            reverse = (reverse * 10) + reminder \n  \n            # Floor division\n            num = num // 10\n  \n        return reverse \n  \n# Driver Code \nif __name__ == '__main__': \n    rev = ReverseNumber()\n    print(rev.reverse_number(123))"}
{"instruction": "What is the syntax for creating an object of the \"Car\" class in Java?", "input": "", "output": "The syntax for creating an object of the \"Car\" class in Java is:\nCar myCar = new Car();"}
{"instruction": "Write C++ code to create a class 'Fruit' that has two attributes - 'name' and 'color'.", "input": "", "output": "class Fruit {\n   private:\n      string name;\n      string color;\n \n   public:\n      Fruit(string name, string color) {\n         this->name = name;\n         this->color = color;\n      }\n      // other methods to access and manipulate attributes\n};"}
{"instruction": "Write a C program to print all numbers between 1 to 100 with the exception of those divisible by 3.", "input": "", "output": "#include <stdio.h>\n\nint main(void) {\n  for (int i=1; i<=100; i++) {\n    if (i % 3 != 0) \n      printf(\"%d \", i);\n  }\n  printf(\"\\n\");\n  return 0;\n}"}
{"instruction": "Create an SQL query to select only the rows from a table where the second column is not empty.", "input": "", "output": "SELECT * FROM TABLE_NAME WHERE COL2 <> '';"}
{"instruction": "Create an input validation function in Python which checks that the input is an integer between 2-6.", "input": "", "output": "def input_validation(input):\n    try:\n        input = int(input)\n        if input >= 2 and input <= 6:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"}
{"instruction": "Construct a python code to print the following text in reverse.", "input": "Hello World", "output": "text = 'Hello World'\nprint(text[::-1])"}
{"instruction": "Create a function in R that will return the maximum number in a given vector.", "input": "vec <- c(3,2,5,1,4,0)", "output": "max_num <- function(v){\n  return(max(v))\n}\nmax_num(vec)"}
{"instruction": "Compose a Java program that finds the factorial of a number.", "input": "n = 5", "output": "public class Factorial {\n\tpublic static void main(String[] args) {\n\t\tint n = 5;\n\t\tint result = 1;\n\t\t\n\t\tfor (int i = n; i >= 1; i--) {\n\t\t\tresult = result * i;\n\t\t}\n\t\t\n\t\tSystem.out.println(result);\n\t}\n}"}
{"instruction": "Write a function in HTML for creating a table of n rows and m columns.", "input": "", "output": "<table>\n  <tbody>\n    <% for (let i = 0; i < n; i++) { %>\n      <tr>\n        <% for (let j = 0; j < m; j++) { %>\n          <td>Cell Content</td>\n        <% } %>\n      </tr>\n    <% } %>\n  </tbody>\n</table>"}
{"instruction": "Create a function that takes two strings's, two string length's and returns true if the second string is a rotation of the first.", "input": "string1 = \"Hello World\"\nstring2 = \"WorldHello\"\nlength1 = 11\nlength2 = 11", "output": "def isRotation(string1, string2, length1, length2):\n    if length1 == length2 and len(string1)>0:\n        string1string1 = string1 + string1\n        return string2 in string1string1"}
{"instruction": "Develop an HTML page with three sections, each containing different colors.", "input": "", "output": "<html>\n    <head>\n        <style>\n            #section1 {\n                background-color: red;\n            }\n            #section2 {\n                background-color: blue;\n            }\n            #section3 {\n                background-color: yellow;\n            }\n        </style>\n    </head>\n    <body>\n        <div id=\"section1\"></div>\n        <div id=\"section2\"></div>\n        <div id=\"section3\"></div>\n    </body>\n</html>"}
{"instruction": "Create a function that returns the longest substring of the string given.", "input": "string = \"Hello world!\"", "output": "def longest_substring(string):\n    curr_len = 1\n    max_len = 1\n    prev_index = 0\n    n = len(string)\n    visited = [-1] * 256\n    visited[ord(string[0])] = 0\n    for i in range(1,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = i - prev_index\n        visited[ord(string[i])] = i\n    if curr_len > max_len:\n        max_len = curr_len\n    return max_len"}
{"instruction": "Generate an array of random numbers with a size of 10.", "input": "", "output": "import random\n\nmy_arr = [random.randint(1,100) for _ in range(10)]\n\nprint(my_arr) # Output: [76, 64, 26, 62, 59, 35, 66, 18, 52, 49]"}
{"instruction": "Create a React app that loads data from a given REST API endpoint.", "input": "", "output": "import React from 'react';\nimport Axios from 'axios';\n\nclass App extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n        };\n    }\n\n    async componentDidMount() {\n        const res = await Axios.get(<api_url>)\n        this.setState({data: res.data});\n    }\n\n    render(){\n        return (\n            <div>\n                {this.state.data.map(item => <p>{item.name}</p>)}\n            </div>\n        )\n    }\n}\n\nexport default App;"}
{"instruction": "Suggest an algorithm to search an element in a sorted array using Java.", "input": "", "output": "public int binarySearch(int[] arr, int element){\n    int low = 0;\n    int high = arr.length - 1;\n    while(low <= high){\n        int mid = (low + high) / 2;\n        if(arr[mid] == element)\n            return mid;\n        else if(arr[mid] > element)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}"}
{"instruction": "Create a while loop to iterate over the elements in the given list", "input": "my_list = [1, 2, 3, 4]", "output": "i = 0 \nwhile i < len(my_list): \n    print(my_list[i]) \n    i += 1"}
{"instruction": "Write a function in PHP that takes in two arrays, and returns a new array that contains only elements present in both arrays.", "input": "[1, 3, 4], [2, 4, 6]", "output": "function intersect_arrays($arr1, $arr2)\n{\n  return array_intersect($arr1, $arr2);\n}"}
{"instruction": "Fix the code so that the loop terminates after 10 iterations.", "input": "# Start of code\ni = 1\nwhile i<100:\n    print(i)\n    i += 1\n# End of code", "output": "# Start of code\ni = 1\nwhile i<=10:\n    print(i)\n    i += 1\n# End of code"}
{"instruction": "Write a C++ function to calculate the maximum subarray sum of a given array.", "input": "", "output": "int maxSumSubArray(vector<int> arr) \n{ \n    int max_so_far = arr[0]; \n    int curr_max = arr[0]; \n  \n    for (int i = 1; i < arr.size(); i++) \n    { \n        curr_max = max(arr[i], curr_max+arr[i]); \n        max_so_far = max(max_so_far, curr_max); \n    } \n    return max_so_far; \n}"}
{"instruction": "Write a Python program to find the minimum cost of a path from top left cell to bottom right cell of a matrix.", "input": "matrix = [[2, 0, 3, 5],\n          [4, 5, 1, 2],\n          [3, 1, 2, 7]]", "output": "def min_path_sum(matrix):\n\n    # initialize the solution matrix\n    res = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n\n    # copying the first row elements\n    res[0] = matrix[0]\n\n    # iterate over the remaining rows\n    for i in range(1, len(matrix)):\n        # copy the first element\n        res[i][0] = res[i-1][0] + matrix[i][0]\n\n        for j in range(1, len(matrix[0])):\n            # choose the smaller of the two\n            res[i][j] = min(res[i-1][j], res[i][j-1]) + matrix[i][j]\n\n    # return the bottom-right element\n    return res[len(matrix)-1][len(matrix[0])-1]"}
{"instruction": "Create a new class in Python that extends the existing class named 'Base'.", "input": "", "output": "Class NewClass (Base):\n  def __init__(self):\n    super().__init__()"}
{"instruction": "Design a code to generate a histogram from given data.", "input": "[2, 3, 5, 6, 9]", "output": "def histogram(lst): \n    frequency = {} \n  \n    for item in lst: \n        frequency[item] = frequency.get(item, 0) + 1 \n  \n    for item in frequency: \n        print(item, '-->', '*' * frequency[item])"}
{"instruction": "Compute the result of the following mathematical expression in Python.", "input": "(4 + 5 * 7 - 9) / 2", "output": "result = 17"}
{"instruction": "How would you find the area of a rectangle in Python?", "input": "", "output": "\"\"\"\nFind the area of a rectangle in Python\n\"\"\"\n\ndef area_of_rectangle(width, height):\n    \"\"\"\n    Returns the area of a rectangle given its width and height.\n    \"\"\"\n    return width * height\n\nif __name__ == \"__main__\":\n   print(area_of_rectangle(2, 4))"}
{"instruction": "Write a SQL query to return the names of all employees who make over $50,000.", "input": "", "output": "SELECT name FROM employees WHERE salary > 50000;"}
{"instruction": "Create a class in Java that can store a list of students and the courses they are enrolled in.", "input": "", "output": "public class StudentList {\n  private ArrayList<Student> students;\n  private ArrayList<String> courses;\n\n  public StudentList() {\n    this.students = new ArrayList<Student>();\n    this.courses = new ArrayList<String>();\n  }\n\n  public void addStudent(Student student) {\n    this.students.add(student);\n  }\n  \n  public void addCourse(String course) {\n    this.courses.add(course);\n  }\n  \n  public ArrayList<Student> getStudents() {\n    return this.students;\n  }\n  \n  public ArrayList<String> getCourses() {\n    return this.courses;\n  }\n}"}
{"instruction": "Write a Bash script to print the sum of all even numbers between 0 and 100.", "input": "", "output": "#!/bin/bash\nsum=0\nfor(( i = 0; i <= 100; i+=2 ))\ndo\n   sum=$((sum + i))\ndone\n\necho \"The sum of even numbers between 0 and 100 is $sum\""}
{"instruction": "Create a Python program to analyze a given list of URL requests and count the number of unique requests.", "input": "", "output": "def count_unique_requests(url_list):\n    return len(set(url_list))"}
{"instruction": "Create a regex to extract the first name from a string \"John Doe is a programmer\".", "input": "\"John Doe is a programmer\"", "output": "/John(\\s[A-Za-z]+)*/"}
{"instruction": "Update the code to ensure that an error is raised if the input is the wrong type.", "input": "def age_calc(age):\n return age + 5", "output": "def age_calc(age):\n if not isinstance(age, int):\n raise TypeError(\"Input for age calculation must be int\")\n return age + 5"}
{"instruction": "Output the number of \"a\"s in the following sentence.", "input": "The quick brown fox jumps over the lazy dog.", "output": "There are 3 \"a\"s in the sentence."}
{"instruction": "Given an array of numbers, write a Python function to remove even numbers from the array.", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def remove_even_numbers(arr):\n    return [x for x in arr if x % 2 != 0]"}
{"instruction": "Create a SQL query that returns the name, age and salary for all employees whose age is greater than 40.", "input": "", "output": "SELECT name, age, salary \nFROM Employees \nWHERE age > 40;"}
{"instruction": "What data type in JavaScript corresponds to a finite set of distinct values?", "input": "", "output": "In JavaScript the data type that corresponds to a finite set of distinct values is an Enum. An Enum is a collection of related values that can be represented as a set of named constants. These constants can be used to represent a single value in many different forms. Each Enum value can be represented numerically or by a String literal value."}
{"instruction": "Code an assembly language program to calculate the sum of series 1 + 3 + 5 +.....+ (2*n-1).", "input": "n = 6", "output": ".MODEL SMALL \n.DATA \n        N DB ? \n        I DB ? \n        S DB ? \n.CODE \n    MOV AX,@DATA\n    MOV DS,AX\n    MOV DX,N\n    MOV AL,2\n    MUL DX\n    SUB AL,1\n    MOV N,AL\n    MOV I,N\n    MOV S,0\nAGAIN:\n    MOV AX,S\n    ADD AX,I\n    MOV S,AX\n    DEC I\n    CMP I,0\n    JNZ AGAIN\n    MOV DX,S\n    MOV AH,4CH\n    INT 21H \nEND"}
{"instruction": "Edit the Python code snippet to remove the syntax error.", "input": "def calculate_area(length, width):\n    area = length * width\n    return \u201cThe area is\u201d + area", "output": "def calculate_area(length, width):\n    area = length * width\n    return \"The area is \" + str(area)"}
{"instruction": "Write a Python snippet that prints out each item in a given list.", "input": "list = [\"Apple\", \"Banana\", \"Cherry\"]", "output": "for item in list:\n  print(item)"}
{"instruction": "Write a Python function to remove all elements from a set in another set", "input": "Set A = {1, 2, 3, 4} \nSet B = {2, 3}", "output": "def remove_from_set(A, B):\n  for element in B:\n    A.discard(element)\n  return A\n\nA = {1, 2, 3, 4} \nB = {2, 3}\n\nprint(remove_from_set(A,B)) \n# Output: {1, 4}"}
{"instruction": "Add a try-catch block around the code example that catches an exception if it is thrown.", "input": "with open(\"myfile.txt\") as f:\n    for line in f:\n        print(line)", "output": "try:\n    with open(\"myfile.txt\") as f:\n        for line in f:\n            print(line)\nexcept:\n    print(\"An exception has been thrown\")"}
{"instruction": "Debug the following code and explain why it gave an error.", "input": "def sum(a, b):\n    try:\n      return a + b\n    except TypeError: \n        return \"inputs should be numbers\"\n    finally:\n        print(\"This function has successfully executed\")\noutput = sum(1, '2')", "output": "The code gave an error because a TypeError was raised due to trying to add an integer and a string. The error can be resolved by adding type-checking in the code: \n\ndef sum(a, b):\n    try:\n      if type(a) == int and type(b) == int:\n        return a + b\n      else:\n        return \"inputs should be numbers\"\n    except TypeError: \n        return \"inputs should be numbers\"\n    finally:\n        print(\"This function has successfully executed\")\noutput = sum(1, '2')"}
{"instruction": "Using the given Python class, write a constructor and a method to display the details.", "input": "class Customer:", "output": "class Customer:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n   \n    def display_details(self):\n        print(f\"Name: {self.name}\\nAge: {self.age}\\nAddress: {self.address}\")"}
{"instruction": "Using Java, write the code to calculate the sum of elements in a two-dimensional array.", "input": "int[][] arr = { \n                {2, 3, 8}, \n                {4, 5, 1}, \n                {7, 0, 6} \n              };", "output": "public class SumOfEle{ \n    public static void main(String[] args) { \n        // creating a two-dimensional array \n        int[][] arr = { \n            {2, 3, 8}, \n            {4, 5, 1}, \n            {7, 0, 6} \n        }; \n        // Creating an int variable to store the value. \n        int sum = 0;\n\n        for (int i=0; i<arr.length; i++){ \n            for (int j=0; j<arr[i].length; j++) {\n                sum += arr[i][j]; \n            }\n        } \n        System.out.println(\"Sum of Array Elements = \"+sum); \n    } \n}"}
{"instruction": "Write a C program to find the difference between the maximum and minimum values in an array.", "input": "arr = {2, 8, 10, 9}", "output": "#include<stdio.h> \n  \n\nint diffMaxMin(int arr[], int n) \n{ \n    int max_num = arr[0], min_num = arr[0]; \n  \n    int i; \n    for (i = 0; i < n; i++) { \n        max_num = max_num > arr[i] ? max_num : arr[i]; \n        min_num = min_num < arr[i] ? min_num : arr[i]; \n    } \n  \n    return (max_num - min_num); \n} \n  \nint main() \n{ \n    int arr[] = {2, 8, 10, 9}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n    printf(\"%d\\n\", diffMaxMin(arr, n)); \n    return 0; \n}"}
{"instruction": "Evaluate the given algebraic expression by substituting 4 for x.", "input": "expression = 2x + 6", "output": "expression = 2 * 4 + 6 = 14"}
{"instruction": "Formulate a query to select the records from the customers table where the gender is not equal to 'female'.", "input": "Table Name: customers", "output": "SELECT * FROM customers WHERE gender != 'female';"}
{"instruction": "Change the code to allow two parameters to be passed.", "input": "function sum(a) {\n  return a;\n}", "output": "function sum(a, b) {\n  return a + b;\n}"}
{"instruction": "Create an array of strings containing the names of the seven days of the week.", "input": "", "output": "let daysOfWeek = [\"Monday\", \"Tuesday\", \"Wednesday\", \n                  \"Thursday\", \"Friday\", \"Saturday\", \n                  \"Sunday\"];"}
{"instruction": "Given the input dictionary below, create a list containing all the items of the dictionary.", "input": "my_dict = {\n    \"name\": \"John\",\n    \"age\": 21,\n    \"place\": \"Delhi\"\n}", "output": "my_list = list(my_dict.values())\nprint(my_list)\n# Output: [\"John\", 21, \"Delhi\"]"}
{"instruction": "You need to read a code and count the number of lines of code.", "input": "def function(a, b):\n    c = a + b\n    d = a * b\n    return c + d", "output": "def count_lines_of_code(code):\n    lines = code.splitlines()\n    return len(lines)\n\nif __name__ == '__main__':\n    code=\"\"\"\ndef function(a, b):\n    c = a + b\n    d = a * b\n    return c + d\n    \"\"\"\n    print(count_lines_of_code(code))"}
{"instruction": "Create a Python function to print out a string in reverse order.", "input": "\"This is a string\"", "output": "def reverse_string(input_str):\n    return input_str[::-1]\n \nprint(reverse_string(\"This is a string\"))"}
{"instruction": "Update the C++ code below to generate a Fibonacci sequence of up to the 6th number.", "input": "#include <iostream>\n \nint main ()\n{\nint x = 0, y = 1;\nstd::cout << x << \" \" << y;\n\nreturn 0;\n}", "output": "#include <iostream>\n \nint main ()\n{\n    int x = 0, y = 1, z = 0;\n    std::cout << x << \" \" << y;\n    for (int i = 0; i < 6; i++) {\n        z = x + y;\n        x = y;\n        y = z; \n        std::cout << \" \" << z;\n    }\n\n    return 0;\n}"}
{"instruction": "Create an SQL query to select all records from a table", "input": "", "output": "SELECT * FROM table_name;"}
{"instruction": "Implement a binary search on the given array.", "input": "Array = [1, 4, 5, 6, 7, 9]", "output": "\"\"\"\nImplement a binary search on a given array\n\"\"\"\n\ndef binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == element:\n            return True\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n\nif __name__ == '__main__':\n    arr = [1, 4, 5, 6, 7, 9]\n    element = 7\n    result = binary_search(arr, element)\n    print(result)\n\n# Output\n# True"}
{"instruction": "You need to sort the given array in descending order.", "input": "array = [23, 16, 11, 45, 32]", "output": "sorted_array = sorted(array, reverse=True)"}
{"instruction": "Write a code to find the maximum of 3 arguments.", "input": "", "output": "def find_max(a, b, c):\n    max_value = a\n    if b > max_value:\n        max_value = b\n    if c > max_value:\n        max_value = c\n    return max_value\n\nprint(find_max(1, 2, 3))  # Output: 3"}
{"instruction": "Construct a SQL query to get all the rows of a table ordered by the largest value in each row first.", "input": "SELECT ...", "output": "SELECT * \nFROM Table \nORDER BY MAX(column1, column2, ...) DESC;"}
{"instruction": "Create a pseudocode to solve the FizzBuzz problem.", "input": "", "output": "```\n#For numbers from 1 through 100\nfor i from 1 to 100:\n    #If the number is divisible by both 3 and 5\n    if i is divisible by 3 and 5:\n        #Print FizzBuzz\n        print \"FizzBuzz\"\n    #If the number is divisible only by 3\n    elif i is divisible by 3:\n        #Print Fizz\n        print \"Fizz\"\n    #If the number is divisible only by 5\n    elif i is divisible by 5:\n        #Print Buzz\n        print \"Buzz\"\n    #Otherwise\n    else: \n        #Print the number\n        print i\n```"}
{"instruction": "Create an HTML form with a textbox, a submit button, and two radio buttons.", "input": "", "output": "<form>\n  <input type=\"text\" id=\"textbox\">\n  <input type=\"submit\" value=\"Submit\">\n  <input type=\"radio\" name=\"choice\" value=\"yes\">Yes\n  <input type=\"radio\" name=\"choice\" value=\"no\">No\n</form>"}
{"instruction": "Create a program that prompts the user to enter two strings. The program will compare the two strings and, if the two strings are the same, print out \"Equal strings\" otherwise, print out \u201cUnequal strings\u201d", "input": "", "output": "# Take two strings from user \nstr1 = input('Enter first string: ') \nstr2 = input('Enter second string: ') \n\n# Compare strings \nif str1 == str2: \n    print (\"Equal strings\") \nelse : \n    print (\"Unequal strings\")"}
{"instruction": "Design a Python program to print all numbers between 0 and 100 that are divisible by 3 and 5.", "input": "", "output": "for i in range(101):\n    if i % 3 == 0 and i % 5 == 0:\n        print(i)"}
{"instruction": "Write an SQL query to find the names of all students who have scored more than 80% marks in their exams.", "input": "", "output": "SELECT name FROM Student\n  WHERE marks > 80;"}
{"instruction": "Create a python function that computes the area of a rectangle given the length and width.", "input": "", "output": "def calculateRectangleArea(length, width):\n  area = length * width\n  return area"}
{"instruction": "Replace the placeholder in the given HTML document with the corresponding table.", "input": "<html>\n  <body>\n    <!-- replace placeholder with table -->\n  </body>\n</html>\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Firstname</th>\n    <th>Lastname</th> \n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Jill</td>\n    <td>Smith</td> \n    <td>50</td>\n  </tr>\n  <tr>\n    <td>Eve</td>\n    <td>Jackson</td> \n    <td>94</td>\n  </tr>\n</table>", "output": "<html>\n  <body>\n    <table style=\"width:100%\">\n  <tr>\n    <th>Firstname</th>\n    <th>Lastname</th> \n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Jill</td>\n    <td>Smith</td> \n    <td>50</td>\n  </tr>\n  <tr>\n    <td>Eve</td>\n    <td>Jackson</td> \n    <td>94</td>\n  </tr>\n</table>\n  </body>\n</html>"}
{"instruction": "Using the given code, implement the function \"add_two_numbers\" which will take two integers and return their sum.", "input": "def add_two_numbers(x, y):\n    #TODO\n    pass", "output": "def add_two_numbers(x, y):\n    return x + y"}
{"instruction": "How would you find the maximum depth of a tree data structure?", "input": "", "output": "One way to find the maximum depth of a tree data structure is to start at the root node and then recursively traverse down each branch, keeping track of the maximum depth. This is known as a depth-first search and can be implemented using a recursive algorithm. Alternatively, the maximum depth can also be found using a breadth-first search, where the tree is traversed level-by-level."}
{"instruction": "Store the output of the following statement into a variable called `result`.", "input": "a = [1, 2, 3]", "output": "result = a[::-1]"}
{"instruction": "Write a CSS code snippet to make the <h1> text bold with font size of 24px.", "input": "", "output": "h1 {\n font-weight: bold;\n font-size: 24px;\n}"}
{"instruction": "Create a function in Java that changes a given string to uppercase.", "input": "This is a sample string.", "output": "String input = \"This is a sample string\";\n\nString upper = input.toUpperCase();\n\nSystem.out.println(upper);"}
{"instruction": "Find the product of all values in a given dictionary.", "input": "Dictionary: {'a': 10, 'b': 20, 'c': 30}", "output": "The product of all values in the given dictionary is 6000."}
{"instruction": "Design a neural network for facial recognition using TensorFlow.", "input": "", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    # First convolutional layer\n    tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(64, 64, 3)),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Second convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Third convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Fourth convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Flatten the output\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(2048, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(1024, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    # Output decode layer\n    tf.keras.layers.Dense(2, activation='softmax')\n])"}
{"instruction": "Write an if statement to check if a string is equal to \"Hello\".", "input": "word = \"Hello\"", "output": "// program to check if a string is equal to \"Hello\"\nif (word == \"Hello\") {\n    console.log(\"String is equal to 'Hello'\")\n}"}
{"instruction": "Edit the following code to calculate the standard deviation of a given list", "input": "", "output": "def calculate_std_dev(nums):\n    mean = sum(nums)/len(nums)\n    sum_deviation = 0\n    for num in nums:\n        diff = num - mean\n        squared_deviation = diff ** 2\n        sum_deviation += squared_deviation\n    std_dev = (sum_deviation/(len(nums)-1)) ** 0.5\n    return std_dev"}
{"instruction": "Classify the given input text into one of the 4 categories (\"sports\", \"weather\", \"finance\", \"technology\").", "input": "Apple Inc. reported earnings today", "output": "technology"}
{"instruction": "Write a function to detect the smallest window in a string containing all characters of another string.", "input": "string1 = \"abcde\", string2 = \"ade\"", "output": "def smallest_window(str1, str2):\n min_str = \"\"\n min_size = float(\"inf\")\n \n for i in range(len(str1)):\n  for j in range(i+1, len(str1)):\n   curr_str = str1[i:j+1]\n   count = 0\n   for ch in str2:\n    if ch in curr_str:\n     count += 1\n   if len(curr_str) < min_size and count == len(str2):\n    min_str = curr_str\n    min_size = len(curr_str)\n return min_str\n \nprint(smallest_window(\"abcde\", \"ade\"))"}
{"instruction": "Write a C# code snippet to create a list with the following string payload and print it out.", "input": "\"apple\",  \"banana\", \"mango\"", "output": "List<string> fruits = new List<string> { \"apple\", \"banana\", \"mango\" };\n\nforeach (string fruit in fruits)\n{\n   Console.WriteLine(fruit);\n}"}
{"instruction": "You are passed an array and a value. Write a Python program to insert the value in the array at the end.", "input": "array = [1, 2, 3, 4], value = 7", "output": "array = [1, 2, 3, 4, 7]"}
{"instruction": "Execute this JavaScript Promise chain and explain the output.", "input": "new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(1);\n  }, 1000);\n}).then((result) => {\n  console.log(result); // 1\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(result * 2);\n    }, 1000);\n  });\n}).then((result) => {\n  console.log(result); // 2\n  return result * 2;\n}).then((result) => {\n  console.log(result); // 4\n});", "output": "This JavaScript promise chain prints out the following output:\n1\n2\n4\n\nThe first console.log() logs the result of the first promise when it resolves, which is the number 1.\n\nThe second console.log() logs the result of the second promise when it resolves, which is the number 2 (1 * 2).\n\nThe third console.log() logs the result of the final promise when it resolves, which is the number 4 (2 * 2)."}
{"instruction": "Create an algorithm to determine whether the given array contains an odd number of elements.", "input": "[1, 2, 3, 4, 5]", "output": "def is_odd(arr):\n    return len(arr) % 2 != 0"}
{"instruction": "Change the code to make it a valid Python program.", "input": "x = \"hello world", "output": "x = \"hello world\""}
{"instruction": "Write a code to find the first non-duplicate character in a given string.", "input": "var s = \"apple\";", "output": "function findFirstNonDuplicateChar(s) {\n  var character = '';\n  var checker = {};\n  for (var i = 0; i < s.length; i++) {\n    var char = s[i];\n    if (checker[char]) {\n      checker[char]++;\n    } else {\n      checker[char] = 1;\n    }\n  }\n  for (var i = 0; i < s.length; i++) {\n    var char = s[i];\n    if (checker[char] === 1) {\n      character = char;\n      break;\n    }\n  }\n  return character;\n}\n\nconsole.log(findFirstNonDuplicateChar(s)); // p"}
{"instruction": "Write a SQL query to list the names of all members who have not yet made a payment this month.", "input": "Table:  members\nFields:  member_id, name, paid_this_month", "output": "SELECT name \nFROM members \nWHERE paid_this_month IS FALSE;"}
{"instruction": "Identify the errors, if any, in the following code.", "input": "sum = 0\nfor i in range(1,10):\n    sum =+ i", "output": "The error is that the operator '=+' should be changed to '+='. This operator adds the value on the left to the current value of the variable on the right, and then assigns the result back to the variable on the right. The correct code should be:\n\nsum = 0\nfor i in range(1,10): \n    sum += i"}
{"instruction": "Write a Java program to clone an array of objects.", "input": "", "output": "public class CloneObjectArray { \n\n    public static void main(String[] args) \n    { \n        // Creating an array of objects \n        Employee[] employees = {new Employee(\"John\", 25), \n            new Employee(\"Tim\", 30), \n            new Employee(\"Tom\", 35)}; \n\n\t\t// Cloning the array \n        Employee[] clone = employees.clone(); \n\n        // Printing the current array \n        System.out.println(\"Employees array:\"); \n        for (Employee emp : employees) { \n            System.out.println(emp); \n        } \n\n        // Printing the cloned array \n        System.out.println(\"Cloned Employees array:\"); \n        for (Employee emp : clone) { \n            System.out.println(emp); \n        } \n    } \n} \n\nclass Employee implements Cloneable { \n    String name; \n    int age;\n\n    Employee(String name, int age) \n    { \n        this.name = name; \n        this.age = age; \n    } \n\n    // Override clone method \n    @Override\n    protected Object clone() throws CloneNotSupportedException \n    { \n        return super.clone(); \n    } \n\n    @Override\n    public String toString() \n    { \n        return this.name + \" \" + this.age; \n    } \n}"}
{"instruction": "Describe the necessary steps to debug a python program.", "input": "", "output": "Steps to debug a python program:\n\n1. Check the syntax of your code to look for any obvious mistakes\n2. Use print statement to understand the the variables in your program and the flow of execution.\n3. Working your way through the program line by line to identify the source of the bug.\n4. Use debugging tools such as pdb to step through the code and look for any unexpected values or flow. \n5. If the bug is in a library that you're using, try to look into its source code to look for the bug.\n6. Test small pieces of your code in isolation.\n7. Take a break and come back to it with a fresh mind.\n8. Ask for help from other programmers."}
{"instruction": "Debug this JavaScript code.", "input": "function mysteryFunction(x) {\n    let result = 0;\n    for (let i = 1; i <= x; i++) {\n        result = result * i;\n    }\n    return result;\n}", "output": "function mysteryFunction(x) {\n    let result = 1;\n    for (let i = 1; i <= x; i++) {\n        result = result * i;\n    }\n    return result;\n}"}
{"instruction": "Identify the input and output for this code snippet.", "input": "def adder(x, y):\n    return x + y", "output": "Input: two integer variables, x and y\nOutput: the sum of x and y, an integer"}
{"instruction": "Using regex, replace all occurrences of 'cat' with 'dog' in the following text.", "input": "text = \"I saw a cat in the park.\"", "output": "import re\n\ntext = \"I saw a cat in the park.\"\n\nresult = re.sub(r'cat', 'dog', text)\nprint(result)\n\n# Output\nI saw a dog in the park."}
{"instruction": "Write a PHP code snippet to validate an email address.", "input": "", "output": "<?php\nfunction validateEmail($email) {\n    // regex for validating email addresses\n    return filter_var($email, FILTER_VALIDATE_EMAIL); \n}"}
{"instruction": "Given two strings, sort them in alphabetically ascending order.", "input": "\"javascript\"\n\"python\"", "output": "def sort_str(str1, str2): \n    # extract the words from the strings \n    str1_list = list (map (str, str1)) \n    str2_list = list (map (str, str2)) \n  \n    # sort the strings \n    str1_list.sort() \n    str2_list.sort() \n  \n    # join the chars of the strings \n    sorted_str1 = ''.join(str1_list) \n    sorted_str2 = ''.join(str2_list) \n  \n    # check if the words are the same \n    if (sorted_str1 == sorted_str2): \n        return True\n    else: \n        return False\n            \nprint(sort_str(\"javascript\", \"python\"))"}
{"instruction": "Given a list of numbers, write a program to check if there exists a triplet in the list whose sum is equal to the given number.", "input": "nums = [2, 7, 11, 15], target = 24", "output": "def triplet_sum(nums, target):\n for i in range(len(nums) - 2):\n  for j in range(i+1, len(nums) - 1):\n   for k in range(j+1, len(nums)):\n    if nums[i] + nums[j] + nums[k] == target:\n     return True\n return False\n \nprint(triplet_sum(nums, target))"}
{"instruction": "Describe the Pandas feature \"DataFrame\"", "input": "", "output": "Pandas DataFrame is a two-dimensional data structure, i.e. data is aligned in a tabular fashion in rows and columns. It is a widely used tool for data manipulation and analysis in Python. It offers a variety of features such as filtering, sorting, adding/removing columns, updating the data, indexing, and many others."}
{"instruction": "Parse the following JSON data and extract the \"name\" field.", "input": "{\n  \"id\": 12345,\n  \"name\": \"John Smith\",\n  \"age\": 30\n}", "output": "import json\n\ndata = '{ \"id\": 12345, \"name\": \"John Smith\", \"age\": 30 }'\n\njson_data = json.loads(data)\n\nname = json_data[\"name\"]\n\nprint(name)\n\n# Output: John Smith"}
{"instruction": "Design a program to count the total number of even numbers in a given array.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def count_evens(arr):\n    count = 0\n    for i in arr:\n        if (i % 2)  == 0:\n            count+=1\n    return count\n\narr = [1, 2, 3, 4, 5, 6]\ncount = count_evens(arr)\n\nprint(count)"}
{"instruction": "Write a SQL query to extract all the orders placed on a given date.", "input": "order_date = \"2020-01-01\"", "output": "SELECT * \nFROM orders \nWHERE order_date = '2020-01-01';"}
{"instruction": "Create a MySQL statement to count the number of orders for each customer.", "input": "", "output": "SELECT customer_id, count(*) FROM orders GROUP BY customer_id;"}
{"instruction": "Create an SQL query that finds the average number of orders for each customer over the last year.", "input": "", "output": "SELECT\n    c.customer_id,\n    AVG(o.total_items)\nFROM\n    customers c JOIN\n    orders o ON c.customer_id = o.customer_id  \nWHERE \n    o.order_date > DATE_SUB(NOW(), INTERVAL 1 YEAR)\nGROUP BY\n    c.customer_id"}
{"instruction": "Transform the following JSON object into a Python dictionary.", "input": "{ \"name\": \"John Doe\", \"age\": 25, \"address\": { \"street\": \"123 Main Street\", \"city\": \"Los Angeles\", \"state\": \"CA\", \"zip\": 90001}}", "output": "import json\n\ndef json_to_dict(json_str):\n   \n    return json.loads(json_str)\n\nif __name__ == \"__main__\":\n    json_str = \"\"\"\n    {\n        \"name\": \"John Doe\",\n        \"age\": 25,\n        \"address\": {\n            \"street\": \"123 Main Street\",\n            \"city\": \"Los Angeles\",\n            \"state\": \"CA\",\n            \"zip\": 90001\n        }\n    }\n    \"\"\"\n    \n    print(json_to_dict(json_str))"}
{"instruction": "Construct an SQL query to select the total number of employees in the table 'Employees'.", "input": "", "output": "SELECT COUNT(*) FROM Employees;"}
{"instruction": "Create an array of 20 unique values from 1 to 50.", "input": "", "output": "[1, 5, 6, 8, 13, 16, 18, 20, 21, 24, 25, 29, 31, 32, 36, 39, 40, 43, 44, 50]"}
{"instruction": "Explain the concept of Convolutional Neural Networks.", "input": "", "output": "Convolutional Neural Networks (CNNs) are a type of deep learning neural network used primarily in image processing, computer vision, and natural language processing tasks. CNNs utilize a grid of neurons that learn to extract relevant features from an input, such as patterns or shapes, known as filters. This allows CNNs to perform hierarchical feature extraction from input data, which is useful in areas where the data has a nonlinear or highly structured nature. CNNs can be used to classify images, detect objects in images, extract features from audio and video signals, and much more."}
{"instruction": "Create a method in JavaScript to convert a string to camel case.", "input": "", "output": "function toCamelCase(input){\n  let result = \"\";\n  let words = input.split(\" \");\n  for( let i=0; i < words.length; i++){\n    let word = words[i];\n    result += word.charAt(0).toUpperCase() + word.slice(1);\n  }\n  return result;\n}"}
{"instruction": "Implement a Go program that takes a string as input and prints its reverse.", "input": "", "output": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    var str string\n    fmt.Printf(\"Enter a string: \")\n    fmt.Scanf(\"%s\\n\", &str)\n    fmt.Printf(\"The reverse of the string is %s\\n\", reverse(str))\n}\n\nfunc reverse(s string) string {\n    r := []rune(s)\n    for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n        r[i], r[j] = r[j], r[i]\n    }\n    return string(r)\n}"}
{"instruction": "Write a React component to display a list of items in an unordered list.", "input": "const listItems = [\"Apples\", \"Bananas\", \"Cherries\"", "output": "import React from 'react';\n\nconst ListItems = props => {\n  const items = props.listItems.map(item => (\n    <li key={item}>{item}</li>\n  ));\n\n  return (\n    <ul>\n      {items}\n    </ul>\n  );\n};\n\nexport default ListItems;"}
{"instruction": "Generate a code to transform the list of strings into the upper case.", "input": "list = ['apple', 'banana', 'cherry']", "output": "list = ['apple', 'banana', 'cherry']\n\ndef transform_list(list):\n    upper_list = [i.upper() for i in list]\n    return upper_list\n\nprint(transform_list(list))"}
{"instruction": "Generate a list of all the prime numbers in the range from 0 to the given number n.", "input": "", "output": "def is_prime(n):\n    \"\"\"\n    This function will check if a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_list_of_primes(n):\n    \"\"\"\n    This function will generate a list of all the prime numbers in the range from 0 to the given number n.\n    \"\"\"\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"instruction": "Create a SQL script to find the name of a teacher and his/her department given the teacher's ID.", "input": "The teacher has ID 1001.", "output": "SELECT teacher.name, department.name FROM teacher \nLEFT JOIN department ON teacher.department_id = department.id \nWHERE teacher_id = 1001;"}
{"instruction": "Create a MySQL query to find the total number of employees in the department 'Engineering'.", "input": "", "output": "SELECT COUNT(*) \nFROM employees\nWHERE department = 'Engineering';"}
{"instruction": "Write a `PHP` script to sort an associative array based on its values.", "input": "$data = array(\"John\"=>45, \"Bob\"=>67, \"Ann\"=>55);", "output": "function sortByValue($data) {\n    asort($data);\n    return $data;\n}"}
{"instruction": "Create a function in Javascript to convert hour in 24-hours format to hour in 12-hours format.", "input": "14", "output": "function convert24HourFormatTo12HourFormat(hours) {\n    if (hours > 12) {\n      return (hours - 12) + \"PM\";\n    } else if (hours == 12) {\n      return hours + \"PM\";\n    } else if (hours == 0) {\n        return 12 + \"AM\";\n    } else {\n      return hours + \"AM\";\n    }   \n}"}
{"instruction": "Compile a C program to print the given text \u201cHello World\u201d to the terminal.", "input": "", "output": "#include<stdio.h>\n\nint main()\n{\n    printf(\"Hello World\");\n    return 0;\n}"}
{"instruction": "Create a SQL table with the following schema: id (integer), name (string), city (string).", "input": "", "output": "CREATE TABLE myTable (\n  id INTEGER, \n  name VARCHAR(255), \n  city VARCHAR(255)\n);"}
{"instruction": "Write a function that takes an array of integers and returns an array of the same size with each element equal to the product of all the elements in the original array except itself.", "input": "[1, 2, 3]", "output": "def product_array(arr):\n    res = []\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    for i in range(len(arr)):\n        res.append(int(product/arr[i]))\n    return res"}
{"instruction": "When given a list of words, output the longest word.", "input": "['cat', 'elephant', 'apple', 'banana']", "output": "elephant"}
{"instruction": "Assign a value to each of the variables, x = ? and y = ?, such that x + y = 7.", "input": "", "output": "int x = 3;\nint y = 4; // x + y = 7"}
{"instruction": "Cut and paste the following Java code snippet and add a condition to ensure that the number entered is always greater than 0.", "input": "int number;\nScanner in = new Scanner (System.in);\nnumber = in.nextInt ();", "output": "int number;\nScanner in = new Scanner (System.in);\ndo {\n    number = in.nextInt ();\n} while (number <= 0);"}
{"instruction": "Write a Lambda function in Python to generate random numbers in the range of 10 to 50.", "input": "", "output": "import random\ndef random_num():\n    return random.randint(10,50)"}
{"instruction": "create a function to compare two strings and return a boolean depending on their equality or inequality.", "input": "string1 = 'hello' \nstring2 = 'world'", "output": "def compare_strings(string1, string2):\n    \"\"\"\n    This function will compare two strings and return a boolean \n    depending on their equality or inequality. \n    \"\"\"\n    is_same = string1 == string2\n    return is_same\n\nstring1 = 'hello' \nstring2 = 'world'\n\nprint(compare_strings(string1, string2))"}
{"instruction": "Create a class in Python to represent a bank account and add methods to display, withdraw, deposit and transfer money.", "input": "The bank account has the following details:\n- Customer Name: John Doe\n- Account Number: 12345\n- Balance: $1000", "output": "class BankAccount:\n    def __init__(self, customer_name, account_number, balance):\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.balance = balance\n\n    def display_balance(self):\n        print('Your balance is', self.balance)\n\n    def withdraw_amount(self, amount):\n        self.balance -= amount\n        print('You withdrew', amount, 'from your account.')\n\n    def deposit_amount(self, amount):\n        self.balance += amount\n        print('You deposited', amount, 'into your account.')\n\n    def transfer_amount(self, target_account, amount):\n        self.balance -= amount\n        target_account.balance += amount\n        print('You transferred', amount, 'to the account', target_account.account_number)"}
{"instruction": "Construct a for-loop for finding all prime numbers between 1 and 50 in Python.", "input": "", "output": "for num in range(1, 51):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)"}
{"instruction": "How does the Fibonacci number sequence work?", "input": "", "output": "The Fibonacci sequence is a sequence of numbers where each number in the sequence is the sum of the two numbers preceding it. The first two numbers in the sequence are 0 and 1. The sequence starts with 0 and 1 and continues by adding the two previous numbers to get the next number in the sequence. For example, the first six numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5. The sequence can be represented as 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and so on."}
{"instruction": "Implement a code that will group a series of numbers into groups of three.", "input": "nums = [1, 2, 3, 4, 5, 6]", "output": "def group_three(nums): \n    result = []\n    nums_length = len(nums)\n\n    for index in range(0, nums_length, 3):\n        result.append(nums[index:index + 3])\n\n    return result\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6]\n    print(group_three(nums)) # Output: [[1, 2, 3], [4, 5, 6]]"}
{"instruction": "Translate the following polar equation into a Cartesian equation.", "input": "r = 2 sin(\u03b8)", "output": "Given the equation r=2sin(\u03b8), \nthe Cartesian equation can be determined to be\n\nx=2sin(\u03b8)cos(\u03b8) and y= 2sin\u00b2(\u03b8)."}
{"instruction": "Write a Java program for encrypting the text \"Hello World!\" using the Caesar Cipher.", "input": "", "output": "public class CaesarCipher \n{ \n    // Encrypts text using a shift od \"s\" \n    public static StringBuffer encrypt(String text, int s) \n    { \n        StringBuffer result= new StringBuffer(); \n  \n        for (int i=0; i<text.length(); i++) \n        { \n            if (Character.isUpperCase(text.charAt(i))) \n            { \n                char ch = (char)(((int)text.charAt(i) + s - 65) % 26 + 65); \n                result.append(ch); \n            } \n            else\n            { \n                char ch = (char)(((int)text.charAt(i) + s - 97) % 26 + 97); \n                result.append(ch); \n            } \n        } \n        return result; \n    } \n  \n    // Driver code \n    public static void main(String[] args) \n    { \n        String text = \"Hello World!\"; \n        int s = 4; \n        System.out.println(\"Text  : \" + text); \n        System.out.println(\"Shift : \" + s); \n        System.out.println(\"Cipher: \" + encrypt(text, s)); \n    } \n} \n\n# Output: Cipher: Lipps Asvph!"}
{"instruction": "In the following Python function, insert code to check if the given number is even or odd.", "input": "def check_num(num):\n    # TODO\n    if num % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")", "output": "def check_num(num):\n    assert isinstance(num, int), \"num must be an integer value\"\n    if num % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")"}
{"instruction": "Write an algorithm to split a given list into two sublists with equal sums", "input": "[1, 4, 2, 5, 3]", "output": "def find_sublist(lst):\n    total_sum = sum(lst)\n    half = total_sum//2\n    taken = [False]*len(lst)\n    curr_sum = lst[0]\n    taken[0] = True\n    idx = 0\n    flag = False\n    for i in range(1, len(lst)):\n        if curr_sum < half:\n            taken[i] = True\n            curr_sum += lst[i]\n            flag = True\n        else:\n            if not flag:\n                taken[i] = True\n                curr_sum += lst[i]\n                flag = True\n            continue\n    list1 = list2 = []\n\n    for k in range(len(lst)):\n        if taken[k]:\n            list1.append(lst[k])\n        else:\n            list2.append(lst[k])\n    return list1, list2"}
{"instruction": "Develop a React Native application to display a list of recent news articles", "input": "", "output": "The output would involve creating a React Native application with a News List component which fetches news data from an API and displays it as a list. The application should include features to sort the news list by category and to pull to refresh for the latest news. Additionally, the application should support the navigation between different categories and be responsive for different display sizes."}
{"instruction": "Modify the given Python code to calculate the sum of the given list and print the output.", "input": "list = [1,2,3,4,5]", "output": "def sumList(list): \n    sum = 0\n    for i in list:\n        sum = sum + i\n    return sum\n\nprint(sumList(list))"}
{"instruction": "Implement the function with input parameters, described below.", "input": "Parameters: a, b (both of type int)", "output": "def add(a, b):\n    \"\"\"\n    Parameters: a, b (both of type int)\n    Returns: the sum of two input parameters, a+b (int)\n    \"\"\"\n    return a + b"}
{"instruction": "Create a Python script to add a new field of \u201ccar color\u201d to the given JSON object.", "input": "{\n\"id\": \"12345\",\n\"model\": \"Honda\",\n\"year\": 2021\n}", "output": "import json\n\ndata = [\n    {\n        \"id\": \"12345\",\n        \"model\": \"Honda\",\n        \"year\": 2021\n    }\n]\n\ndata[0][\"color\"] = \"red\"\n\njson_object = json.dumps(data, indent = 4)\nprint(json_object)\n\nOutput: \n[\n    {\n        \"id\": \"12345\",\n        \"model\": \"Honda\",\n        \"year\": 2021,\n        \"color\": \"red\"\n    }\n]"}
{"instruction": "Compare the two inputed strings to know whether the first string is a substring of the second one or not.", "input": "String 1: Ayda\nString 2: Maya", "output": "No, \"Ayda\" is not a substring of \"Maya\"."}
{"instruction": "Create a React component that renders a table containing the records from an array of objects.", "input": "const records = [\n    { id: 1, name: 'Adam', age: 25 },\n    { id: 2, name: 'James', age: 30 },\n    { id: 3, name: 'Nick', age: 28 },\n    { id: 4, name: 'John', age: 29 }\n];", "output": "import React from 'react';\n \nconst RecordTable = (props) => (\n    <div>\n        <table>\n            <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>Name</th>\n                    <th>Age</th>\n                </tr>\n            </thead>\n            <tbody>\n            {\n                props.records.map(record => (\n                    <tr key={record.id}>\n                        <td>{ record.id }</td>\n                        <td>{ record.name }</td>\n                        <td>{ record.age }</td>\n                    </tr>\n                ))\n            }\n            </tbody>\n        </table>\n    </div>\n);\n \nexport default RecordTable;"}
{"instruction": "Implement a class in C++ that creates a stack.", "input": "", "output": "#include<iostream> \n#include<vector> \n  \nusing namespace std; \n\n\n// Class to represent a Stack \nclass Stack \n{\n    // container to store elements \n    vector<int> v;    \n    \npublic: \n    void push(int data); \n    bool empty(); \n    void pop(); \n    int top(); \n}; \n\nvoid Stack::push(int data) \n{ \n    // inserting an element \n    // on the top of the stack \n    v.push_back(data); \n} \n\nbool Stack::empty() \n{ \n    // checking if the stack is empty \n    return v.size() == 0; \n} \n\nvoid Stack::pop() \n{ \n    // removing element \n    // from the top of the stack \n    if (!empty()) \n    { \n        v.pop_back(); \n    } \n} \n\nint Stack::top() \n{ \n    // returns the top element \n    // of the stack \n    return v.back(); \n}"}
{"instruction": "Create an HTML page that displays the contents of a given URL.", "input": "https://www.example.com", "output": "<html> \n <head> \n  <title>Loaded URL</title> \n </head> \n <body> \n  <iframe src=\"https://www.example.com\" width=\"100%\" height=\"100%\"></iframe> \n </body> \n</html>"}
{"instruction": "Write a code to implement insertion sort on a given list.", "input": "List: [4, 3, 6, 1, 5]", "output": "def insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \narr = [4, 3, 6, 1, 5]\ninsertionSort(arr)\nprint (\"Sorted array is: \") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])"}
{"instruction": "Swap the values of the two given numbers using a temporary variable.", "input": "a = 1\nb = 2", "output": "temp = a \na = b\nb = temp"}
{"instruction": "Given the following array and a number k, write a program to determine if it contains a pair of numbers that add up to k.", "input": "arr = [1, 2, 3, 4, 5]\nk = 7", "output": "def has_pair_with_sum(arr, k): \n    temp_set = set() \n  \n    for i in range(len(arr)): \n        temp = k - arr[i] \n        if temp in temp_set: \n            return True\n        temp_set.add(arr[i]) \n  \n    return False"}
{"instruction": "You need to write a query in SQL to calculate the total salary of the employees in the database.", "input": "", "output": "SELECT SUM(salary)\nFROM Employees;"}
{"instruction": "Create an inheritance hierarchy of three classes, \"Person\", \"Student\" and \"Professor\"", "input": "", "output": "class Person { \n  // properties and methods\n} \n  \nclass Student extends Person { \n  // properties and methods\n} \n  \nclass Professor extends Person { \n  // properties and methods\n}"}
{"instruction": "Write a function to determine if two strings are anagrams of each other", "input": "", "output": "def are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    freq1 = {}\n    freq2 = {}\n\n    for char in str1:\n        if char not in freq1:\n            freq1[char] = 1\n        else:\n            freq1[char] += 1\n\n    for char in str2:\n        if char not in freq2:\n            freq2[char] = 1\n        else:\n            freq2[char] += 1\n\n    for key in freq1:\n        if key not in freq2 or freq2[key] != freq1[key]:\n            return False\n    \n    return True"}
{"instruction": "How would you reverse the words order in a given string?", "input": "", "output": "def reverse_words(string):\n    return \" \".join(string.split(\" \")[::-1])"}
{"instruction": "Write an algorithm to count the number of pairs whose difference is k.", "input": "nums = [1, 5, 3, 4, 7, 8]\nk = 3", "output": "def count_pairs(nums, k):\n    count = 0\n    # Create a set to store all the elements of the array\n    num_set = set(nums)\n    for num in nums:\n        if num + k in num_set:\n            count += 1\n\n    return count\n\nnum_diff = 3\npair_count = count_pairs(nums, num_diff)\nprint(\"Number of pairs with difference\", num_diff, \" is :\", pair_count)"}
{"instruction": "Create an array of 10 elements using Java.", "input": "", "output": "int[] array = new int[10];"}
{"instruction": "How can a JavaScript function return multiple values?", "input": "", "output": "A JavaScript function can return multiple values by using an array or an object. For example, the following example returns two values in an array: return [value1, value2];. Similarly, an object can be used to return multiple values, for example: return { value1: val1, value2: val2 };."}
{"instruction": "Create a program in Python that takes a list of numbers as input and sorts it in ascending order.", "input": "mylist = [3, 2, 5, 4, 1]", "output": "def list_sort(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\nlist_sort(mylist)"}
{"instruction": "What is the Python library used to parse a JSON string?", "input": "", "output": "The Python library used to parse a JSON string is json. The json library provides functions for encoding and decoding a JSON string. The syntax for decoding would be: json.loads(data). The syntax for encoding would be: json.dumps(data)."}
{"instruction": "Create a SQL query to list all customer names from the table \"customers\" in ascending alphabetical order.", "input": "", "output": "SELECT name FROM customers ORDER BY name ASC;"}
{"instruction": "How would you edit the following HTML code so that it displays content in two columns?", "input": "<div>\n  <p>This is the content</p>\n</div>", "output": "<div>\n  <div style=\"float: left; width: 50%;\">\n    <p>This is the content 1</p>\n  </div>\n  <div style=\"float: right; width: 50%;\">\n    <p>This is the content 2</p>\n  </div>\n</div>"}
{"instruction": "Write a SQL query to retrieve the data from the table 'user_data'.", "input": "", "output": "SELECT * FROM user_data;"}
{"instruction": "Write a PHP function which receives an array as input and return a filtered array.", "input": "<?php \n$temp_array = array (1, 2, 3, 4, 5, 6, 7, 8, 9);", "output": "<?php\nfunction filter_array($array) {\n    // This function will filter the array and remove values that are not a number\n    $filtered_array = array();\n    foreach ($array as $value) {\n        if (is_numeric($value)) {\n            $filtered_array[] = $value;\n        }\n    }\n    return $filtered_array;\n}\n\n$temp_array = array (1, 2, 3, 4, 5, 6, 7, 8, 9);\n$filtered_array = filter_array($temp_array);"}
{"instruction": "Generate an object using JavaScript that contains the numbers from 1 to 10.", "input": "", "output": "const myObject = {\n \"1\": 1,\n \"2\": 2, \n \"3\": 3, \n \"4\": 4, \n \"5\": 5, \n \"6\": 6, \n \"7\": 7, \n \"8\": 8, \n \"9\": 9, \n \"10\": 10\n};"}
{"instruction": "Create an HTTP request to get the data from the given API and parse it into a JSON object.", "input": "https://example.com/api/getData", "output": "import requests \n\nurl = \"https://example.com/api/getData\"\nresponse = requests.get(url)\ndata = response.json()"}
{"instruction": "Create a Python loop that will iterate through the following list and will print each item's value multiplied with 5.", "input": "numbers = [5, 10, 15, 20, 25]", "output": "for number in numbers:\n    print(number*5)"}
{"instruction": "Extend the following python code to include a new field 'type' with the value 'dog'.", "input": "animal = {\n 'name': 'Rex',\n 'age': 10\n}", "output": "animal = {\n 'name': 'Rex',\n 'age': 10,\n 'type': 'dog'\n}"}
{"instruction": "Given a list of strings, write a Python function to expand each element into a set of characters.", "input": "['hello', 'world']", "output": "def expand_list(strings): \n    new_list = []\n    for string in strings: \n        for character in string: \n            new_list.append(character) \n    return new_list"}
{"instruction": "Call a user-defined function in Python.", "input": "def add_two_numbers(x, y):\nreturn x + y", "output": "result = add_two_numbers(3, 5)\nprint(result)  # Outputs 8"}
{"instruction": "Initialize an empty list in Python and then add three items to it.", "input": "", "output": "my_list = []\nmy_list.append(\"item1\")\nmy_list.append(\"item2\")\nmy_list.append(\"item3\")"}
{"instruction": "Write an SQL query to select the rows which have \"Sales\" in the Department column.", "input": "", "output": "SELECT * FROM table_name WHERE Department = 'Sales';"}
{"instruction": "Create a Node.js program for converting a temperature from Celsius to Fahrenheit.", "input": "", "output": "const celsiusToFahrenheit = celsius => {\n  let fahrenheit = (celsius * 9/5) + 32;\n  return fahrenheit;\n};\n\nconst tempCelsius = 20;\nconst tempFahrenheit = celsiusToFahrenheit(tempCelsius);\n\nconsole.log(`${tempCelsius}\u00b0C is equal to ${tempFahrenheit}\u00b0F.`);"}
{"instruction": "Build a linear regression model using Python's scikit learn library.", "input": "import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({\n    'x': [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2, 1, 1.5, 1.1],\n    'y': [2.4, 0.7, 2.9, 2.2, 3, 2.7, 1.6, 1.1, 1.6, 0.9]\n    })\n\nX = data['x'].values.reshape(-1, 1)\ny = data['y'].values.reshape(-1, 1)", "output": "from sklearn.linear_model import LinearRegression\n\n# Create linear regression model\nmodel = LinearRegression()\n\n# Train the model using the training set\nmodel.fit(X, y)\n\n# Make predictions using the testing set\ny_pred = model.predict(X)"}
{"instruction": "Given a list of numbers, design a function in Python to check if all numbers in the list are even", "input": "", "output": "def all_even(lst):\n    for num in lst:\n        if num % 2 != 0:\n            return False\n    return True"}
{"instruction": "Edit the following C program to print the right-most digit of the given number.", "input": "#include<stdio.h> \n \nint main() \n{ \n    int num; \n    scanf(\"%d\", &num); \n   \n    // Compute the rightmost digit \n       \n    printf(\"%d\", num); \n   \n    return 0; \n}", "output": "#include<stdio.h> \n \nint main() \n{ \n    int num; \n    scanf(\"%d\", &num); \n   \n    // Compute the rightmost digit \n    int right_most_digit = num % 10;  \n       \n    printf(\"%d\", right_most_digit); \n   \n    return 0; \n}"}
{"instruction": "Write a C++ program that displays the following text.", "input": "", "output": "#include<iostream>\n\nint main(){ \n  std::cout << \"Hello GPT Community!\"<< std::endl;\n  return 0;\n}"}
{"instruction": "Create a bar chart in Python, plotting the following integer data set.", "input": "[1, 2, 4, 8, 16, 32]", "output": "import matplotlib.pyplot as plt\n \ndata_set = [1, 2, 4, 8, 16, 32]\n \nplt.bar(range(len(data_set)), data_set)\nplt.show()"}
{"instruction": "Suggest an appropriate data structure to store the test scores of a class", "input": "Test scores of each student in the class", "output": "An appropriate data structure to store the test scores of a class is a nested dictionary. The outer dictionary will have the student's name as the key and the inner dictionary will have the test name as the key and the score as the value. For example, if we have the test scores for three students for two tests, we can store it as follows: \n\nscores = { \n    'John': { \n        'Test1': 95,\n        'Test2': 73\n    }, \n    'Adam': { \n        'Test1': 87, \n        'Test2': 86 \n    }, \n    'Sarah': { \n        'Test1': 76, \n        'Test2': 75 \n    }\n}"}
{"instruction": "Generate a random string of 12 characters using Python.", "input": "", "output": "import string\nimport random\n\n''.join(random.choices(string.ascii_letters + string.digits, k=12))"}
{"instruction": "Create a Flask route for handling GET requests with the path \"/hello\".", "input": "", "output": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/hello\", methods=[\"GET\"]) \ndef hello(): \n    return \"Hello!\""}
{"instruction": "Create a 3x2 matrix using nested lists.", "input": "", "output": "matrix = [[1, 2], [3, 4], [5, 6]]"}
{"instruction": "Write a reusuable function in Python that takes two string variables and returns the longest string.", "input": "", "output": "def longest_string(str1, str2):\n    if len(str1) > len(str2):\n        return str1\n    else:\n        return str2"}
{"instruction": "Draft an HTML page with a table that contains three columns and two rows.", "input": "", "output": "<html>\n  <head>\n    <title>Table Example</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Column 1</th>\n        <th>Column 2</th>\n        <th>Column 3</th>\n      </tr>\n      <tr>\n        <td>Row 1 Data 1</td>\n        <td>Row 1 Data 2</td>\n        <td>Row 1 Data 3</td>\n      </tr>\n      <tr>\n        <td>Row 2 Data 1</td>\n        <td>Row 2 Data 2</td>\n        <td>Row 2 Data 3</td>\n      </tr>\n    </table>\n  </body>\n</html>"}
{"instruction": "Create a web scraper to collect the data from the given website.", "input": "Website: https://www.example.com/", "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the HTML content of the website\nr = requests.get(\"https://www.example.com/\")\n\n# Parse the HTML content\nsoup = BeautifulSoup(r.content, \"html.parser\")\n\n# Extract the content\ndata = soup.find_all()\n\n# Store the data in a suitable format\n# ..."}
{"instruction": "Construct a regular expression for validating a 6-digit numeric zip code", "input": "", "output": "\\d{6} #This regular expression will validate a 6-digit numeric zipcode."}
{"instruction": "Create a SQL query to show all employee details with their attachments in a specific department.", "input": "Department Name: Sales", "output": "SELECT e.name, a.file_name, a.file_url\nFROM employees e\nJOIN attachments a ON e.id = a.employee_id\nWHERE e.department = 'Sales'"}
{"instruction": "Complete the following HTML template with appropriate tags:", "input": "<html>\n<head> \n</head>\n<body>\n\n</body>\n</html>", "output": "<html>\n<head> \n  <title> Title of page </title>\n</head>\n<body>\n  <h1> Header title </h1>\n  <p> This is a sample content of a web page. </p>\n</body>\n</html>"}
{"instruction": "Create a HTML page with a table containing five columns and four rows.", "input": "", "output": "<html>\n<head>\n   <title>Table with Columns and Rows</title>\n</head>\n<body>\n   <table>\n      <tr>\n         <th>Column 1</th>\n         <th>Column 2</th>\n         <th>Column 3</th>\n         <th>Column 4</th>\n         <th>Column 5</th>\n      </tr>\n      <tr>\n         <td>Cell 1</td>\n         <td>Cell 2</td>\n         <td>Cell 3</td>\n         <td>Cell 4</td>\n         <td>Cell 5</td>\n      </tr>\n      <tr>\n         <td>Cell 6</td>\n         <td>Cell 7</td>\n         <td>Cell 8</td>\n         <td>Cell 9</td>\n         <td>Cell 10</td>\n      </tr>\n      <tr>\n         <td>Cell 11</td>\n         <td>Cell 12</td>\n         <td>Cell 13</td>\n         <td>Cell 14</td>\n         <td>Cell 15</td>\n      </tr>\n   </table>\n</body>\n</html>"}
{"instruction": "Create an Angular component that displays a posts feed with the given input data.", "input": "[\n  {\n    user: 'John',\n    message: 'Hello world!'\n  },\n  {\n    user: 'Jane',\n    message: 'Hi everyone!'\n  }\n]", "output": "<div *ngFor=\"let post of posts\">\n  <h1>{{ post.user }}</h1>\n  <p>{{ post.message }}</p>\n</div>"}
{"instruction": "Edit the HTML code snippet below to add the attribute \"target='_blank'\" to the link element.", "input": "<a href=\"https://example.com\">Example Website</a>", "output": "<a href=\"https://example.com\" target='_blank'>Example Website</a>"}
{"instruction": "Create a function in Java that returns the number of days between two given dates.", "input": "", "output": "public int getDaysDifference(LocalDate startDate, LocalDate endDate) {\n    return (int) ChronoUnit.DAYS.between(startDate, endDate);\n}"}
{"instruction": "Edit the following program to improve its execution speed", "input": "#include <iostream> \n  \nint n = 100; \n  \nvoid foo(int n) \n{ \n    for (int i = 0; i < n; i++) \n        std::cout << i << \"\\n\"; \n} \n  \nint main() \n{ \n    foo(n); \n    return 0; \n}", "output": "#include <iostream> \n  \nint n = 100; \n \nvoid foo(int n) \n{ \n    int chunk_size = 5;\n    for (int i = 0; i < n; i+=chunk_size) {\n        for (int j = i; j < i + chunk_size; j++) \n            std::cout << j << \"\\n\"; \n    } \n} \n  \nint main() \n{ \n    foo(n); \n    return 0; \n}"}
{"instruction": "Given a string, write the appropriate regex pattern that checks if the string contains any digit.", "input": "", "output": "import re\n\ndef check_digits(string):\n  \"\"\"\n  This function takes a string and\n  checks if it contains any digit.\n  \"\"\"\n  regex_pattern = r\"[0-9]\" \n  return bool(re.search(regex_pattern, string))"}
{"instruction": "Select the correct code for a for-loop for a sequential array of numbers.", "input": "", "output": "for i in range(1, 10):\n    print(i)"}
{"instruction": "What does the SELECT statement in SQL do?", "input": "", "output": "The SELECT statement is used to retrieve data from one or more tables in a database. It is typically used in a query, where it specifies which columns and rows of data should be returned. The statement can also be used to perform calculations on data in the database and to group data together."}
{"instruction": "Suggest an API call in Java to generate a random number", "input": "", "output": "int randomNum = ThreadLocalRandom.current().nextInt(0, MAX_VALUE);"}
{"instruction": "Construct a Python dictionary with the countries and their total population.", "input": "countries = [\"USA\", \"Canada\", \"India\", \"China\", \"Japan\"]", "output": "population = {\"USA\": 331, \n              \"Canada\": 37, \n              \"India\": 1351, \n              \"China\": 1414, \n              \"Japan\": 126}"}
{"instruction": "Write a Python algorithm to search a list of numbers for the index of the given element.", "input": "nums = [5,7,11,23,44,30]\nx = 11", "output": "def search(nums, x):\n    for i, n in enumerate(nums):\n        if n == x:\n            return i\n    return -1"}
{"instruction": "Given a list, write a Python code snippet to print the elements of the list in reverse order.", "input": "my_list = [\"one\", \"two\", \"three\", \"four\", \"five\"]", "output": "for element in reversed(my_list):\n    print(element)"}
{"instruction": "Write a code in Java to replace all the occurrences of a given value (5) in an array with a new value (10).", "input": "arr = [2, 5, 1, 5, 8]", "output": "for (int i = 0; i < arr.length; i++) { \n    if (arr[i] == 5) \n        arr[i] = 10; \n}"}
{"instruction": "Use JavaScript to encrypt a given string using MD5 algorithm.", "input": "string = \"This is a test.\"", "output": "let encryptedString = CryptoJS.MD5(string).toString();"}
{"instruction": "Write a JavaScript code to detect whether a webpage contains a specific text or not.", "input": "Page content: \"This is the awesome page.\"\nText to be searched: \"awesome\"", "output": "if(document.body.innerHTML.indexOf('awesome') > -1){\n    console.log('Text found!');\n} else {\n    console.log('Text not found!');\n}"}
{"instruction": "What is the purpose of the for-each loop in Java?", "input": "", "output": "The for-each loop in Java is a type of loop that is used to iterate over a collection, such as an array or a list. The for-each loop simplifies the process of writing loops and makes them more readable. It also allows the loop to run faster, since the loop variable does not need to be updated or declared each time through the loop. This makes the loop more efficient, since the operations are performed on all elements of the collection, not just on some of them."}
{"instruction": "Create a function that takes two arguments, a number and a list, and returns a list with all elements from the original list multiplied by the number.", "input": "num = 2\nlst = [1, 2, 3, 4]", "output": "# function to multiply each element of list by number \ndef lst_multiply(num, lst):\n    new_lst = []\n    for num in lst:\n        new_lst.append(num * num)\n    return new_lst\n\n# main program\nprint(lst_multiply(num, lst))"}
{"instruction": "Create a SQL query for finding all books written by a given author.", "input": "", "output": "SELECT books.* \nFROM books \nJOIN authors ON books.author_id = authors.id \nWHERE authors.name = 'John Doe'"}
{"instruction": "Sort an array of strings based on their length.", "input": "[\"a\", \"abc\", \"ab\", \"abcd\", \"abcde\"]", "output": "function sortByLength(arr) {\n  return arr.sort((a, b) => a.length - b.length);\n}\n\n// Usage\nsortByLength([\"a\", \"abc\", \"ab\", \"abcd\", \"abcde\"]); // result: [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]"}
{"instruction": "Create a function to return the difference between two numbers.", "input": "", "output": "def difference(a, b):\n    return a - b"}
{"instruction": "Write a method in Swift to capitalize the first letter of a given sentence.", "input": "sentence = \"hello world\"", "output": "func capitalizeFirstLetter(sentence: String) ->String {\n    return sentence.prefix(1).uppercased() + sentence.dropFirst()\n}"}
{"instruction": "Capitalize the letters A - Z in the given string.", "input": "text = \"We are learning natural language processing\"", "output": "text = \"We Are Learning Natural Language Processing\""}
{"instruction": "You need to create a regex (regular expression) to check if a given string contains a given substring.", "input": "", "output": "import re\n\ndef check_substring(string, substring):\n    pattern = r\".*\"+substring+\".*\"\n    if re.match(pattern, string):\n        return True\n    else:\n        return False"}
{"instruction": "Improve the code to return the sum of all the numbers in the given vector.", "input": "vector<float> nums = {1.5, 2.5, 3.5, 4.5};", "output": "float get_sum(vector<float>& nums) {\n    float sum = 0;\n    for (auto n : nums) {\n        sum += n;\n    }\n    return sum;\n}"}
{"instruction": "Create a dictionary where the keys are the letters of the alphabet and the values are integers from 1 to 26.", "input": "", "output": "alphabet_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}"}
{"instruction": "Compute the product of two matrices.", "input": "A [[2, 4], [3, 7]]\nB [[9, 2], [7, 1]]", "output": "# Python Program to calculate the product of two matrices \n\nA = [[2, 4], [3, 7]] \nB = [[9, 2], [7, 1]] \n  \n\n# function to calculate the product of two matrices \ndef multiplyMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n# Print the product \nresult = multiplyMatrix(A, B) \nfor r in result: \n    print(r)"}
{"instruction": "Design a JavaScript class to instantiate objects for student records.", "input": "The student records should store the student name, age, and score of the last test.", "output": "class Student {\n  constructor(name, age, lastScore) {\n    this.name = name;\n    this.age = age;\n    this.lastScore = lastScore;\n  }\n}"}
{"instruction": "Write a Bash shell script to find the average of three numbers.", "input": "num1=2\nnum2=4\nnum3=6", "output": "#!/bin/bash\n \n# A Bash script to calculate average of three numbers.\n \n((sum = num1 + num2 + num3))\necho $((sum / 3))"}
{"instruction": "Split the string \"hello world\" into an array of individual words in JavaScript.", "input": "", "output": "\"hello world\".split(\" \") // returns [\"hello\", \"world\"]"}
{"instruction": "Identify an ideal algorithm to find the longest palindrome in a given string.", "input": "", "output": "The Manacher\u2019s Algorithm is an ideal algorithm to find the longest palindrome in a given string. This algorithm utilizes dynamic programming to find the longest palindrome in linear time complexity by iterating through the string and checking whether a substring is a palindrome or not."}
{"instruction": "Write a Python program to determine if an input string is a valid IP address.", "input": "", "output": "import re\ndef isValidIP(ip): \n    # check if the string is a valid IP address\n    regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)'''\n    # compile the regex \n    pattern = re.compile(regex) \n    \n    # Pass the string in search() method\n    if(pattern.search(ip)):  \n        return True\n    else:  \n        return False\n    \n# Driver Code\nprint(isValidIP(\"192.168.0.1\"))"}
{"instruction": "Implement a sorting algorithm for the given list of numbers.", "input": "sort_me = [10, 4, 1, 5]", "output": "def sorting_algorithm(sort_me):\n    len_sortme = len(sort_me)\n    for i in range(len_sortme):\n        for j in range(0, len_sortme-i-1):\n            if sort_me[j] > sort_me[j+1]:\n                sort_me[j], sort_me[j+1] = sort_me[j+1], sort_me[j]\n    return sort_me"}
{"instruction": "How to convert a binary string to an integer number?", "input": "binaryNum = \"1101\"", "output": "intNum = int(binaryNum, 2)"}
{"instruction": "Make a code that takes two arguments and returns a sum of the two", "input": "", "output": "def add_two_nums(a, b):\n    return a + b"}
{"instruction": "Write an SQL statement to delete all rows from a table named 'employees'.", "input": "", "output": "DELETE FROM employees;"}
{"instruction": "Determine the fraction of numbers in this list that are multiples of 3: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].", "input": "", "output": "fraction = 3/10 = 0.3"}
{"instruction": "Explain the concept of object-oriented programming.", "input": "", "output": "Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which can contain data and code: data in the form of fields and code in the form of procedures. OOP is used to design objects which contain both data and functions as one unit and help in creating reusable code."}
{"instruction": "Write a SQL query to update the price of a product with ID 1023 to 5.", "input": "", "output": "UPDATE product \n   SET price = 5 \n WHERE id = 1023;"}
{"instruction": "Insert the English equivalent of the following regular expression:", "input": "^.*[1-9].*$", "output": "This regular expression matches any string that contains at least one number."}
{"instruction": "Convert a given string to camel case.", "input": "", "output": "def to_camel_case(string):\n    result = \"\" \n    for word in string.split(' '): \n        result += word.title() \n    return result"}
{"instruction": "Implement a simple machine learning algorithm in R to classify a given dataset.", "input": "", "output": "# Load the libraries\nlibrary(caret)\nlibrary(Metrics)\n\n# Create the training and testing sets\nsplit = createDataPartition(iris$Species, p = 0.75, list = FALSE)\ntrain_set = iris[split, ]\ntest_set = iris[-split, ]\n\n# Train the model\nmodel = train(Species ~ ., data = train_set, method = \"rpart\")\n\n# Make Predictions on the test set\npredictions = predict(model, newdata = test_set)\n\n# Evaluate Model Performance\nconfusionMatrix(predictions, test_set$Species)"}
{"instruction": "Design a Python program which prints the elements in reverse order", "input": "my_list = [1,2,3,4,5]", "output": "def print_reverse(my_list):\n    for i in range(len(my_list)-1, -1, -1):\n        print(my_list[i])\n\nprint_reverse(my_list)"}
{"instruction": "Create an R function to find the mode of a given data set", "input": "data.set = c(1,2,3,3,3,4,5)", "output": "mode <- function(x) {\n  freq <- table(x)\n  maxfreq <- max(freq)\n  vars <- names(freq)[freq == maxfreq]\n  return(vars)\n}\n\nmode(data.set) \n\n# Output\n# [1] 3"}
{"instruction": "Write an Objective-C class to represent a person containing attributes like name, age, and height.", "input": "", "output": "#import <Foundation/Foundation.h>\n\n@interface Person : NSObject\n\n@property NSString *name;\n@property NSUInteger age;\n@property CGFloat height;\n\n- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age height:(CGFloat)height;\n\n@end\n\n#import \"Person.h\"\n\n@implementation Person\n\n- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age height:(CGFloat)height\n{\n    self = [super init];\n    if (self) {\n        self.name = name;\n        self.age = age;\n        self.height = height;\n    }\n    return self;\n}\n\n@end"}
{"instruction": "Construct a URL for making an HTTP POST request to the given endpoint.", "input": "Endpoint: http://example.com/building/1", "output": "http://example.com/building/1?method=POST"}
{"instruction": "Create a function to collect all the alphabets from a given string.", "input": "The string is \"My name is John!\"", "output": "//Function to collect all the alphabets\nfunction getAlphabets(str) {\n  const result = [];\n  for(let i=0; i < str.length; i++) {\n    if(str[i].match(/[a-z]/i)) {\n      result.push(str[i]);\n    }\n  }\n  return result;\n}\n\n//Call function and pass the string as parameter\nlet alphabets = getAlphabets(\"My name is John!\"); \nconsole.log(alphabets); // Output: [\"M\", \"y\", \"n\", \"a\", \"m\", \"e\", \"i\", \"s\", \"J\", \"o\", \"h\"]"}
{"instruction": "Format the following JSON string.", "input": "{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}", "output": "{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}"}
{"instruction": "Remove the extra spaces from a string so that the output does not contain any extra spaces in C++.", "input": "String:    Coding     is     Fun", "output": "#include<iostream>\n#include<string>\n\nstd::string remove_extra_spaces(const std::string& str) { \n    std::string result;\n  \n    int n = str.length(); \n    bool isPreviousCharSpace = false; \n  \n    for (int i = 0; i < n; i++) { \n        char ch = str[i]; \n  \n        if (ch == ' ' && !isPreviousCharSpace) { \n            result += ch; \n            isPreviousCharSpace = true; \n        } \n  \n        else if (ch != ' ') { \n            result += ch; \n            isPreviousCharSpace = false; \n        } \n    } \n  \n    return result; \n} \n\nint main() \n{ \n    std::string str = \"  Coding     is     Fun   \"; \n    std::cout << remove_extra_spaces(str) << std::endl; \n    return 0; \n} \n\n// Output: Coding is Fun"}
{"instruction": "Rewrite the following JavaScript code using the shorthand property syntax:", "input": "var x = 5;\nvar y = 10;\nvar obj = {x:x, y:y};", "output": "var x = 5;\nvar y = 10;\nvar obj = {x, y};"}
{"instruction": "Determine the frequency of each word in a sentence using a hashmap in JavaScript.", "input": "s = \"This is a test sentence\"", "output": "let string = \"This is a test sentence\";\nlet wordsArray = string.split(\" \"); \nlet frequencyMap = {};\nwordsArray.forEach(word => {\n    frequencyMap[word] = frequencyMap[word] ? frequencyMap[word] + 1 : 1;\n});\nconsole.log(frequencyMap);\n// Output: {This: 1, is: 1, a: 1, test: 1, sentence: 1}"}
{"instruction": "Write a regular expression to match the phrase \"hello people\"", "input": "", "output": "/hello\\s+people/"}
{"instruction": "Update the given list of numbers such that the first number is subtracted from the second one, the third is multiplied by the fourth, and the result is added to the fifth.", "input": "[2, 5, 4, 7, 9]", "output": "[2, 5, 28, 7, 37]"}
{"instruction": "Create a Dictionary where the list items are the keys and the square of the items are the values", "input": "myList1 = [1, 2, 3, 4, 5, 6]", "output": "def myDict(myList1):\n    result = {}\n    for i in myList1:\n        result[i] = i**2\n    return result\n\nmyDict = myDict(myList1)\nprint(myDict)"}
{"instruction": "Parse the following HTML code to get all the hyperlinks in the page.", "input": "<a href=\"https://example.com/about\">About</a>\n<a href=\"https://example.com/products\">Products</a>", "output": "import re\n\nhtml_code = '''\n<a href=\"https://example.com/about\">About</a>\n<a href=\"https://example.com/products\">Products</a>\n'''\n\nlinks = re.findall(r'href=\"(.*?)\"', html_code)\nprint(links)\n# Output: ['https://example.com/about', 'https://example.com/products']"}
{"instruction": "Write a function in Java to implement a Radix Sort algorithm.", "input": "", "output": "void radixSort(int arr[]) \n{ \n    int n = arr.length; \n  \n    // Find the maximum number to know number of digits \n    int max = getMax(arr, n); \n  \n    // Do counting sort for every digit. Note that instead \n    // of passing digit number, exp is passed. exp is 10^i \n    // where i is current digit number \n    for (int exp = 1; max/exp > 0; exp *= 10) \n        countSort(arr, n, exp); \n} \n\nint getMax(int arr[], int n) \n{ \n    int max = arr[0]; \n    for (int i = 1; i < n; i++) \n        if (arr[i] > max) \n            max = arr[i]; \n    return max; \n} \n  \nvoid countSort(int arr[], int n, int exp) \n{ \n    int output[n]; // output array \n    int i; \n    int count[10] = {0}; \n  \n    // Store count of occurrences in count[] \n    for (i = 0; i < n; i++) \n        count[ (arr[i]/exp)%10 ]++; \n  \n    // Change count[i] so that count[i] now contains actual \n    //  position of this digit in output[] \n    for (i = 1; i < 10; i++) \n        count[i] += count[i - 1]; \n  \n    // Build the output array \n    for (i = n - 1; i >= 0; i--) \n    { \n        output[count[ (arr[i]/exp)%10 ] - 1] = arr[i]; \n        count[ (arr[i]/exp)%10 ]--; \n    } \n  \n    // Copy the output array to arr[], so that arr[] now \n    // contains sorted numbers according to curent digit \n    for (i = 0; i < n; i++) \n        arr[i] = output[i]; \n}"}
{"instruction": "Write a function to calculate the power of two number (base^exp).", "input": "", "output": "function power(base, exp) {\n  if (exp == 0) return 1; \n  return base * power(base, exp-1)\n}\n\npower(5, 3);"}
{"instruction": "Write a function to parse a string and return a set of unique words.", "input": "string = \"Hello world this is a test string\"", "output": "def parse(string):\n    words = set()\n    for word in string.split(\" \"):\n        words.add(word)\n    return words"}
{"instruction": "Write a code that takes a numeric value and returns the factorial of that number", "input": "3", "output": "def factorial(n):\n    result = 1\n    for i in range(1,n+1):\n        result *= i\n    return result"}
{"instruction": "What is the result of 3 + 4 * 9?", "input": "", "output": "The result of 3 + 4 * 9 is 39."}
{"instruction": "Produce a code to change the case of a given string.", "input": "string = \"Hello World\"", "output": "def changeCase(string):\n  return string.swapcase()"}
{"instruction": "Write a JavaScript program to convert a Celsius temperature to Fahrenheit.", "input": "", "output": "function celsiusToFahrenheit(celsius) {\n  let temperatureInFahrenheit = celsius * (9 / 5) + 32;\n  return temperatureInFahrenheit;\n}"}
{"instruction": "Write an R program to print out the numbers from 0-50, in steps of 4.", "input": "", "output": "x <- seq(from = 0, to = 50, by = 4)\nprint(x)"}
{"instruction": "Write a code snippet that reverses a string in JavaScript.", "input": "", "output": "function reverseString(str) {\n    strArray = str.split('');\n    reversedStrArray = strArray.reverse();\n    return reversedStrArray.join('');\n}"}
{"instruction": "Create a Bash script which prints out the environment variable $HOME.", "input": "", "output": "#!/bin/bash \necho $HOME"}
{"instruction": "Write a regex pattern to check if the given string is a US phone number.", "input": "", "output": "regex = r\"^\\(?[2-9]{3}\\)?[-. ]?[2-9]{3}[-. ]?[0-9]{4}$\""}
{"instruction": "Implement an algorithm to select k elements from an array such that the sum of those elements is maximized", "input": "", "output": "def maximize_sum(arr, k):\n    arr.sort()\n    result = 0\n    for i in range(len(arr)-1, len(arr)-k-1, -1):\n        result += arr[i]\n    return result"}
{"instruction": "Write a SQL query to get the data of the third row in the table named \"table_name\".", "input": "", "output": "SELECT * FROM table_name LIMIT 3, 1"}
{"instruction": "Write a code in SQL to select the employee information from 'employee' table where the salary is greater than 2000 and is less than 3000.", "input": "", "output": "SELECT * FROM employee \nWHERE salary > 2000 AND salary < 3000;"}
{"instruction": "Construct a query using Mongoose that returns all documents that match a certain criteria.", "input": "Find all documents in the \"users\" collection where the \"city\" field is equal to \"Los Angeles\".", "output": "db.users.find({city: \"Los Angeles\"})"}
{"instruction": "Create a Java program to compute the distance between two points.", "input": "PointA = (2, 3)\nPointB = (4, 9)", "output": "public class DistanceCalculator {\n\n    public static double distanceCalculator(int x1, int y1, int x2, int y2) {\n        double distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n        return distance;\n    }\n}\n\nclass DistanceCalculatorTest {\n\n    public static void main(String[] args) {\n        double distance = DistanceCalculator.distanceCalculator(2, 3, 4, 9);\n        System.out.println(\"The distance between two points is \" + distance); \n    }\n\n}"}
{"instruction": "Select the correct method to find the length of a string in JavaScript.", "input": "", "output": "var myString = \"Hello World!\";\nvar stringLength = myString.length;"}
{"instruction": "You need to write a function to remove all the elements with a given value from a given array.", "input": "array1=[1, 1, 2, 3, 4, 5, 1]\nvalue=1", "output": "[2, 3, 4, 5]"}
{"instruction": "Edit the text below and print a new sentence using the same words.", "input": "The moon is bright and beautiful.", "output": "Beautiful and bright, the moon shines."}
{"instruction": "Join two dictionaries by adding the values with the same key.", "input": "d1 = {\"a\": 1, \"b\": 2, \"c\": 3}\nd2 = {\"a\": 10, \"d\": 20, \"e\": 30}", "output": "def join_dictionaries(d1, d2):\n    ''' \n    This function joins two dictionaries by adding their values with\n    the same key\n    '''\n    result = {}\n    for k1, v1 in d1.items():\n        result[k1] = v1\n    \n    for k2, v2 in d2.items():\n        if k2 in result.keys():\n            result[k2] += v2\n        else:\n            result[k2] = v2\n            \n    return result\n\nif __name__ == '__main__':\n    d1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    d2 = {\"a\": 10, \"d\": 20, \"e\": 30}\n    print(join_dictionaries(d1, d2))"}
{"instruction": "Construct a class that takes a string and capitalizes the first letter.", "input": "", "output": "class CapitalizedWord:\n    def __init__(self, word):\n        self.word = word\n    \n    def get_capitalized_word(self):\n        return self.word[0].upper() + self.word[1:]"}
{"instruction": "Write a method in Java that returns an array of the first N prime numbers.", "input": "n=10", "output": "public static int[] getFirstNPrimes(int n) {\n  int[] primes = new int[n];\n  int count = 0;\n  int num = 2;\n  \n  while (count < n) {\n    if (isPrime(num)) { \n      primes[count] = num;\n      count++;\n    }\n    num++;\n  }\n  return primes;\n}\n\n// Utility functon to check whether a numbmer is prime or not \nboolean isPrime(int n) {\n  for (int i = 2; i <= n / 2; i++) {\n    if (n % i == 0)\n      return false;\n  }\n  return true;\n}"}
{"instruction": "Create an array of nicknames for characters in the Lord of the Rings", "input": "Frodo - Hobbit;\nGandalf - Wizard;\nLegolas - Elf;", "output": "nicknames = {\n    'Frodo': 'Halfling',\n    'Gandalf': 'Grey Wizard',\n    'Legolas': 'Prince of Mirkwood'\n}"}
{"instruction": "Create a C++ program to sort an array using selection sort algorithm.", "input": "[2, 7, 4, 1, 5, 3]", "output": "#include <iostream>\nusing namespace std;\n\nvoid selectionSort(int arr[], int n)\n{\n    int i, j, min_idx;\n\n    for (i = 0; i < n-1; i++)\n    {\n        min_idx = i;\n        for (j = i+1; j < n; j++)\n           if (arr[j] < arr[min_idx])\n               min_idx = j;\n\n        swap(arr[min_idx], arr[i]);\n    }\n}\n \nint main()\n{\n    int arr[] = {2, 7, 4, 1, 5, 3};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    selectionSort(arr, n);\n    cout << \"Sorted array is \\n\";\n    for (int i = 0; i < n; i++)\n        cout << arr[i] << \" \";\n        \n    return 0;\n}"}
{"instruction": "Create a css class 'heading' with font size 16px", "input": "", "output": ".heading {\n    font-size: 16px;\n}"}
{"instruction": "Develop a Ruby method to compare two strings and return the number of matching characters.", "input": "\"cook\",\"book\"", "output": "def count_match_chars(str1, str2)\n  count = 0\n  str1.each_char.with_index do |char, index|\n    count += 1 if char == str2[index]\n  end\n  count\nend\n\nputs count_match_chars('cook', 'book') #2"}
{"instruction": "Create an Excel spreadsheet that compares the performance of an employee over two different months.", "input": "January data: Sales: $20,000, Hours worked: 200\nFebruary data: Sales: $25,000 Hours worked: 250", "output": "Create a Spreadsheet with the following columns: Month, Sales ($), Hours Worked.\nFill in the rows with the data given above."}
{"instruction": "Generate a list of all the divisors of a given number.", "input": "", "output": "def generateDivisors(n): \n    divisors = [] \n    for i in range(1, n + 1): \n        if n % i == 0: \n            divisors.append(i) \n              \n    return divisors"}
{"instruction": "Identify if a given array is a palindrome.", "input": "[1, 2, 3, 3, 2, 1]", "output": "true"}
{"instruction": "Construct a Django model field for storing a user's age.", "input": "", "output": "age = models.IntegerField()"}
{"instruction": "Given the following code, what should the output be when the function is called?", "input": "def add(x, y):\n    z = x + y\n    return z\n\nresult = add(2, 3)", "output": "The output should be 5 as the result of calling add(2,3) is z = 5."}
{"instruction": "Create a for loop in C++ to print out all the even numbers from 0 to a given number.", "input": "", "output": "for (int i = 0; i <= n; i+=2) {\n    cout << i << \" \";\n}"}
{"instruction": "Explain what is meant by the term \u2018machine learning\u2019.", "input": "", "output": "Machine learning is the process of teaching a machine to recognize patterns in data and make decisions based on those patterns. It involves feeding a machine large amounts of data, which it can then use to learn, develop and form predictions based on patterns it identifies."}
{"instruction": "Write a C++ program that calculates the mean and median of an array of integer numbers.", "input": "[1, 3, 5, 7, 9]", "output": "#include <iostream> \n#include <vector> \n#include <algorithm> \n\nusing namespace std;\n\nint main() {\n  vector<int> numbers = {1, 3, 5, 7, 9};\n  int sum = 0;\n  for (auto const& n: numbers)\n    sum += n;\n\n  double mean = sum/numbers.size();\n  double median;\n  if (numbers.size() % 2 == 0)\n    median = (numbers[numbers.size()/2] + numbers[numbers.size()/2 - 1])/2.0;\n  else\n    median = numbers[numbers.size()/2];\n\n  cout<<\"Mean: \"<<mean<<endl;\n  cout<<\"Median: \"<<median;\n\n  return 0;\n}"}
{"instruction": "Write an SQL query to display the first name and last name of all employees in the Employees table.", "input": "", "output": "SELECT first_name, last_name\nFROM Employees;"}
{"instruction": "Write a code in Go that will reverse all the words in a sentence.", "input": "sentence: \"GPT is a powerful tool\"", "output": "package main\n\nfunc reverseWords(sentence string) string {\n  words := strings.Split(sentence, \" \")\n\tvar reversedSentence string\n\tfor i:=len(words)-1; i>=0; i-- {\n\t\treversedSentence += words[i] + \" \"\n\t}\n\treturn strings.TrimSpace(reversedSentence)\n}"}
{"instruction": "Take two strings and a separator as inputs and join the two strings using the separator and output the resulting string.", "input": "str1=\"Hello\"\nstr2=\"World\"\nseparator=\"-\"", "output": "def join_strings(str1, str2, separator):\n    return str1 + separator + str2"}
{"instruction": "Create a Python script that find the number of occurrences of a specific word in a given sentence.", "input": "This is a sample sentence.", "output": "sentence_input = \"This is a sample sentence.\"\n\ndef count_keyword(sentence_input, keyword):\n    return sentence_input.lower().count(keyword.lower())\n\ncount = count_keyword(sentence_input, \"sentence\")\nprint(\"The word 'sentence' occurs \" + str(count) + \" times.\")"}
{"instruction": "Complete the following function to output a reversed string", "input": "", "output": "def reverse(s):\n    rev = \"\"\n \n    i = len(s)\n    while i > 0:\n        rev += s[ i - 1 ]\n        i = i - 1\n \n    return rev"}
{"instruction": "Create an if statement in Ruby that checks if a given number is a prime number.", "input": "", "output": "def is_prime?(number)\n  if number < 2\n    return false\n  else\n    (2...number).each do |i|\n      if number % i == 0\n        return false\n      end\n    end\n    true\n  end\nend"}
{"instruction": "Find the top 10 customers based on total purchase amount from the \"customers\" data table.", "input": "", "output": "SELECT TOP 10 c.id, c.name, SUM(d.amount) as total_purchase \nFROM customers c\nINNER JOIN details d ON c.id = d.customer_id\nGROUP BY c.id, c.name\nORDER BY total_purchase DESC;"}
{"instruction": "Write a SQL query that finds the average of a given table's \"Salary\" column.", "input": "", "output": "SELECT AVG(Salary) FROM Employees;"}
{"instruction": "Create an HTML form with radio buttons for selecting gender.", "input": "", "output": "<form>\n  <label>Gender:</label><br>\n  <input type=\"radio\" name=\"gender\" value=\"male\"> Male<br>\n  <input type=\"radio\" name=\"gender\" value=\"female\"> Female<br> \n</form>"}
{"instruction": "What is the difference between a for loop and a while loop in Java?", "input": "", "output": "The main difference between for and while loop is that for loop is used when we already know the number of times the loop should iterate, while a while loop is used when the number of iterations is not known in advance. Another difference is that for loop is more convenient for looping through arrays/collections of objects, while a while loop is used for performing more complex computations."}
{"instruction": "Describe in Python a custom exception for handling database connection errors.", "input": "", "output": "class DBConnectionError(Exception):\n  def __init__(self, message):\n    self.message = message\n    \n  def __str__(self):\n    return 'An Error Occured:\\n\\t' + self.message"}
{"instruction": "Write a method in Java to return a reversed version of a given string.", "input": "", "output": "public static String reverseString(String s) {\n  StringBuilder sb = new StringBuilder();\n  for (int i = s.length() - 1; i >= 0; i--) {\n    sb.append(s.charAt(i));\n  }\n  return sb.toString();\n}"}
{"instruction": "Using Java, access the value of the second dictionary key in \"myDict\".", "input": "myDict = {\"key1\": \"value1\", \"key2\": \"value2\", \"key3\": \"value3\"}", "output": "String value2 = myDict.get(\"key2\");"}
{"instruction": "Create an array of numbers that is a random combination of integers from 1 to 25", "input": "", "output": "[2, 4, 17, 19, 25, 8, 14, 1, 15, 23, 22, 5, 6, 16, 10, 12, 3, 18, 11, 20, 9, 13, 7, 24, 21]"}
{"instruction": "Write a script in JavaScript to iterate over a given array of objects and return all objects with the color green.", "input": "const arr = [{ color: 'blue', shape: 'square' }, { color: 'red', shape: 'triangle' }, { color: 'green', shape: 'circle' }]", "output": "const greenObjects = arr.filter(obj => obj.color === 'green');"}
{"instruction": "Create an identifier in Python that starts with an underscore followed by the letter 'a'.", "input": "", "output": "_a"}
{"instruction": "Write a SQL query that finds all the albums released before 1990.", "input": "Table name: Albums", "output": "SELECT * FROM Albums WHERE date_released < 1990;"}
{"instruction": "Convert this program from procedural to object-oriented.", "input": "def calculate_mortgage(principle, years, rate):\n    # calculation\n    return monthly_payment\n\ndef calculate_interest_rate(value):\n    # calculation\n    return interest_rate", "output": "class MortgageCalculator:\n    def __init__(self, principle, years, rate):\n        self.principle = principle\n        self.years = years\n        self.rate = rate\n    \n    def calculate_mortgage(self):\n        # calculation\n        return monthly_payment\n\n    def calculate_interest_rate(self, value):\n        # calculation\n        return interest_rate"}
{"instruction": "Create a C++ class for managing a generic dictionary, in which keys and values can be of any data type.", "input": "", "output": "template <typename K, typename V>\nclass Dictionary {\n    private:\n    std::map<K,V> m;\n     \n    public:\n    const V& get(const K& key) const {\n        return m[key];\n    }\n \n    void set(const K& key, const V& value) {\n        m[key] = value;\n    }\n};"}
{"instruction": "Come up with a design for a simple GUI-based web application that allows users to order food online.", "input": "", "output": "The design should include a navigation menu that allows users to search for and select food items, view the items in their cart, and checkout. The navigation menu should also have options to sign up, sign in, and view their order history that would only be visible when they are signed in. The checkout process should allow users to enter payment details and order confirmation."}
{"instruction": "Write a python function to detect if two lists contain the same items in different order.", "input": "", "output": "def compare_lists(list1, list2):\n    return sorted(list1) == sorted(list2)"}
{"instruction": "Assign 1 to all the elements of a 2D array that are divisible by 3.", "input": "arr = [[1,2,3],\n       [10,15,20],\n       [3, 8, 6]]", "output": "for row in range(len(arr)): \n    for col in range(len(arr[row])): \n        if arr[row][col] % 3 == 0: \n            arr[row][col] = 1\nprint(arr)"}
{"instruction": "Write a regex to validate a phone number with the format XXX-XXX-XXXX.", "input": "", "output": "^\\d{3}-\\d{3}-\\d{4}$"}
{"instruction": "Create a function that takes two numbers and returns their greatest common divisor in Python.", "input": "", "output": "\"\"\"\nCreate a function that takes two numbers and returns their greatest common divisor in Python.\n\"\"\"\n\ndef greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)\n\nif __name__ == '__main__':\n    print(greatest_common_divisor(20, 25))  # 5"}
{"instruction": "Use Ruby on Rails to generate a migration to add a column \"name\" to the table \"users\".", "input": "", "output": "class AddNameToUsers < ActiveRecord::Migration[6.0]\n  def change\n    add_column :users, :name, :string\n  end\nend"}
{"instruction": "Design a CSS page that displays Hello in two different fonts of red colour.", "input": "", "output": "<style>\n    h1 {\n        font-size: 30px;\n        color: red;\n    }\n    p {\n        font-size: 25px;\n        color: red;\n    }\n</style>\n\n<h1>Hello</h1>\n<p>Hello</p>"}
{"instruction": "Take an array of strings and a character and return an array containing only the strings containing the given character.", "input": "", "output": "def filter_by_character(str_arr, char):\n    filtered_arr = []\n    for string in str_arr:\n        if char in string:\n            filtered_arr.append(string)\n    return filtered_arr"}
{"instruction": "Compute the maximum subarray sum for the given array.", "input": "Array: [-2,1,-3,4,-1,2,1,-5,4]", "output": "def max_subarray_sum(arr): \n    max_so_far = 0 \n    max_ending_here = 0\n\n    for i in range(len(arr)): \n        max_ending_here += arr[i] \n\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here \n\n        if max_ending_here < 0: \n            max_ending_here = 0 \n    \n    return max_so_far\n\nprint(max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]))\n\nOutput:\n6"}
{"instruction": "Write a Python program to filter out all the elements greater than 5 in the given list.", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "myList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n result = list(filter(lambda x: x <= 5, myList))\n print(result)"}
{"instruction": "Write a command to retrieve the first n items from a list.", "input": "[10, 20, 30, 40, 50], n = 3", "output": "[10, 20, 30]"}
{"instruction": "Write a PHP function to calculate the students' average marks.", "input": "$marks = [40, 70, 60, 90];", "output": "<?php\n\nfunction calculateAverage($marks) {\n $sum = 0;\n for($i = 0; $i < count($marks); $i++) {\n  $sum += $marks[$i];\n }\n\n $average = $sum / count($marks);\n return $average;\n}\n\n?>"}
{"instruction": "Create a SQLite query to find the sum of the column \"price\" in a table called \"orders\".", "input": "", "output": "SELECT SUM(price) AS total_sum\nFROM orders;"}
{"instruction": "Create an event handler for a \"click\" that updates a text field.", "input": "", "output": "// define \"click\" parameter\n$(\"#element\").on(\"click\", function (click) {\n    // update text field\n    document.getElementById(\"text_field\").innerHTML = \"updated\";\n});"}
{"instruction": "What is an API?", "input": "", "output": "API stands for Application Programming Interface. It is a set of routines, protocols, and tools for building software applications. APIs specify how software components should interact and are used when programming graphical user interface (GUI) components. APIs are used for accessing web-based services, such as entering and retrieving data from a remote database."}
{"instruction": "Create a React component to display a greeting message.", "input": "", "output": "import React from 'react';\n\nfunction Greeting(props) {\n  return <h1>Hello, {props.name}!</h1>;\n}\n\nexport default Greeting;"}
{"instruction": "What is the time complexity of the most_common() function?", "input": "", "output": "The time complexity of the most_common() function is O(n)."}
{"instruction": "Using a loop, output all the even numbers up to the given number n.", "input": "n = 10;", "output": "for i in range(2,n+1,2):\n  print(i)\n\n// Output: 2,4,6,8,10"}
{"instruction": "Write an SQL query to find the second highest salary of an employee.", "input": "", "output": "SELECT MAX(Salary) \nFROM Employee \nWHERE Salary NOT IN (SELECT MAX(Salary) FROM Employee);"}
{"instruction": "Create a MongoDB query for finding a record in the collection that contains a specific value for a given field.", "input": "The collection is named 'books' and contains the fields 'title', 'author', and 'pub_date'. We would like to find a record where the title is \"Harry Potter and The Sorcerer's Stone\".", "output": "db.books.find({\"title\" : \"Harry Potter and The Sorcerer's Stone\"});"}
{"instruction": "Given two integers, implement a function in C to swap their values.", "input": "int a = 3\nint b = 5", "output": "void swap(int *a, int *b){\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nswap(&a, &b);"}
{"instruction": "Write a SQL query to list all the customers whose age is over 18.", "input": "", "output": "SELECT * \nFROM customers \nWHERE age > 18;"}
{"instruction": "Write a Python code to generate a random password of 12 characters containing a mix of numbers, alphabets, and special characters.", "input": "", "output": "password = DX$bf7uj3@q3"}
{"instruction": "Write an algorithm for sorting a given array of numbers.", "input": "array: [2, 5, 3, 4, 1]", "output": "function sort(array) { \n  for (let i = 0; i < array.length - 1; i++) { \n    for (let j = 0; j < array.length - i - 1; j++) { \n      if (array[j] > array[j+1]) { \n        let temp = array[j]; \n        array[j] = array[j+1]; \n        array[j+1] = temp; \n      } \n    } \n  } \n  return array; \n}"}
{"instruction": "Suggest a way of decoding a string encoded using Base64.", "input": "encoded_string = \"SGVsbG8gV29ybGQ=\"", "output": "import base64\n\ndef decodeBase64(encoded_string):\n    return base64.b64decode(encoded_string).decode('utf-8')\n\nprint(decodeBase64(encoded_string))\n# Output: Hello World"}
{"instruction": "Create a function to print out a numbered list of items from an array.", "input": "array = [\u2018apple\u2019, \u2018banana\u2019, \u2018orange\u2019]", "output": "def print_numbered_list(array):\n  \"\"\"Prints out a numbered list based on an array of items.\"\"\"\n  for i, item in enumerate(array, start=1):\n    print(f\"{i}. {item}\")"}
{"instruction": "Create a CSS class for an element with the size of 100px X 100px and a background color of yellow.", "input": "", "output": ".myElement {\n width: 100px;\n height: 100px;\n background-color: yellow;\n}"}
{"instruction": "Create a program for sorting a given array in O(n) time complexity.", "input": "", "output": "def sort_array(arr):\n    n = len(arr) \n    for i in range(n): \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n    return arr"}
{"instruction": "Concatenate the strings in the given list using Java.", "input": "list = [\"hello\", \"world\", \"!\"]", "output": "StringBuilder sb = new StringBuilder();\nfor (String str : list) {\n    sb.append(str);\n}\nString output = sb.toString();\nSystem.out.println(output); // prints \"hello world!\""}
{"instruction": "Generate a SQL query for finding the names of all employees in the company.", "input": "", "output": "SELECT name FROM Employee;"}
{"instruction": "Write a code snippet to find all the elements in a list that are greater than a specified number.", "input": "lst = [1, 5, 10, 15, 27]\nk = 10", "output": "# Initializing an empty list\nnew_lst = []\n\n# Iterating over the given list\nfor elem in lst:\n  # Appending elements that are greater than 10\n  if elem > k:\n    new_lst.append(elem)\n\n# Printing corresponding result \nprint(new_lst) # Output: [15, 27]"}
{"instruction": "Edit the given SQL query to make it efficient.", "input": "SELECT * FROM table1, table2 \nWHERE table1.id = table2.id", "output": "SELECT * FROM table1 \nINNER JOIN table2 \nON table1.id = table2.id\n\nThe suggested modification is to replace the two-table join with an inner join. This will be more efficient as it reduces the number of cartesian products which have to be computed."}
{"instruction": "Create a function that prints the multiplication table for a provided integer", "input": "x = 8", "output": "def print_multiplication_table(x):\n  for i in range(1, 11):\n    ans = i*x\n    print(f\"{i} x {x} = {ans}\")\n\nprint_multiplication_table(x)"}
{"instruction": "Write a function that given a positive number, returns the sum of all positive numbers from 1 to the given number.", "input": "number = 10", "output": "def sum_numbers(number):\n    # Initialize sum\n    total = 0\n    # Iterate through 1 to number\n    for i in range(1, number + 1):\n        total += i\n    return total\n\nsum_result = sum_numbers(10)\nprint('Total sum: {}'.format(sum_result))"}
{"instruction": "Make changes to the following code so it prints out the range from 0 to 9.", "input": "for i in range(10):\n    print(i)", "output": "for i in range(10):\n    print(i+1)"}
{"instruction": "Using the Java collections API, create a data structure such as a HashMap to store key-value pairs.", "input": "", "output": "import java.util.HashMap;\n\nHashMap<String, Integer> myMap = new HashMap<>();\n// adding key-value pairs to the HashMap\nmyMap.put(\"Key1\", 5);\nmyMap.put(\"Key2\", 8);\nmyMap.put(\"Key3\", 10);\n// retrieving values by keys\nint val1 = myMap.get(\"Key1\"); \nint val2 = myMap.get(\"Key2\"); \nint val3 = myMap.get(\"Key3\");\n// etc."}
{"instruction": "Design a Python function that computes the sum of two numbers.", "input": "", "output": "def sum_two_numbers(num1, num2):\n    \"\"\"\n    This function will take two numbers as inputs and return their sum.\n    \"\"\"\n    return num1 + num2"}
{"instruction": "How can you delete a row in an SQL database?", "input": "", "output": "You can delete a row in an SQL database using the DELETE statement. The syntax for this statement is DELETE FROM table_name WHERE condition;"}
{"instruction": "Write a function to traverse a dictionary recursively and print all the keys.", "input": "", "output": "def printAllKeys(dictionary): \n    if type(dictionary) == dict: \n        for key in dictionary: \n            print(key) \n            printAllKeys(dictionary[key])"}
{"instruction": "Convert this Ruby code to Python.", "input": "def add_two_numbers(a, b)\n  a + b \nend", "output": "def add_two_numbers(a, b):\n  return a + b"}
{"instruction": "Write a code to generate 1000 random numbers and print the mean of these random numbers.", "input": "", "output": "# Import the random module\nimport random\n\n# Generate 1000 random numbers \nrandom_numbers = [random.randint(1, 1000) for i in range(1000)]\n\n# Calculate mean of the random numbers\nmean = sum(random_numbers)/len(random_numbers)\n\n# Print mean of random numbers\nprint(\"The mean of 1000 random numbers is: \", mean)"}
{"instruction": "Write Python code to generate a random integer between 1 and 10,000 (inclusive).", "input": "", "output": "import random\n\nnum = random.randint(1, 10000)\nprint(\"Random integer between 1 and 10,000:\", num)"}
{"instruction": "Create a JavaScript expression that will iterate over an array of numbers and print out the square root of each number.", "input": "num_array = [1, 4, 9, 16]", "output": "num_array.forEach(num => {\n    console.log(Math.sqrt(num));\n});"}
{"instruction": "Write a JavaScript code snippet to test if a given variable is an array or not.", "input": "", "output": "if (Array.isArray(variable)) {\n  console.log('It is an array');\n} else {\n  console.log('It is not an array');\n}"}
{"instruction": "You need to reverse the following array using JavaScript.", "input": "[1,3,5,7]", "output": "function reverseArray(arr) {\n    let revArray = [];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        revArray.push(arr[i]);\n    }\n    return revArray;\n}"}
{"instruction": "Edit the following HTML code to add an attribute and its value", "input": "<div class=\"container\">\n    <h1>Welcome!</h1>\n</div>", "output": "<div class=\"container\" id=\"welcome\">\n    <h1>Welcome!</h1>\n</div>"}
{"instruction": "What is the highest peak in the world?", "input": "", "output": "The highest peak in the world is Mount Everest, which has a summit elevation of 8,848 meters (29,029 feet)."}
{"instruction": "Design a data structure to model the evolution of a population.", "input": "", "output": "\"\"\"\nModel the evolution of a population\n\"\"\"\n\nclass Population:\n    def __init__(self):\n        self.population = []\n        self.generation = 0\n\n    def add_member(self, member):\n        self.population.append(member)\n\n    def next_generation(self):\n        self.generation += 1\n        self.population = self.population.create_next_generation()\n\nclass Member:\n    def __init__(self, data):\n        self.data = data\n\n\n    def create_next_generation(self):\n        next_gen_data = []\n        # perform population evolution algorithm\n        # ...\n        return [Member(g) for g in next_gen_data]"}
{"instruction": "Find the length of the longest increasing subsequence in an array.", "input": "arr = [10, 22, 9, 33, 21, 50, 41, 60]", "output": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n\n    # L[i] stores the length of the Longest Increasing \n    # Subsequence ending with arr[i]\n    L = [1]*n\n  \n    # consider all the elements of the array in turn\n    for i in range(1, n):\n        for j in range(i):\n\n            # if the element is larger then the prev element\n            # update L[i] with the maximum of all such\n            # possible values of L[j] + 1\n            if arr[i] > arr[j]:\n                L[i] = max(L[i], L[j] + 1)\n  \n    # L[i] now stores the LIS ending with arr[i]\n    # find the maximum of all the stored values\n    longest_length = 0\n    for i in range(n):\n        longest_length = max(longest_length, L[i])\n    return longest_length\n\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))"}
{"instruction": "Suggest an algorithm in Python for sorting an array of integers from smallest to largest.", "input": "nums = [3, 7, 5, 6, 1]", "output": "def sortInts(nums): \n    # Traverse through all array elements \n    for i in range(len(nums)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(nums)-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if nums[j] > nums[j+1] : \n                nums[j], nums[j+1] = nums[j+1], nums[j] \n                \n    return nums"}
{"instruction": "Write a code to perform linear search in an array of integers.", "input": "", "output": "def linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"}
{"instruction": "Generate an HTML form element to input a password.", "input": "", "output": "<input type=\"password\" name=\"password\" />"}
{"instruction": "Read an HTML page and extract all the <h2> tags.", "input": "<html><h1>Heading 1</h1><h2>Heading 2</h2><h2>Heading 3</h2></html>", "output": "import bs4 \n\nhtml = \"<html><h1>Heading 1</h1><h2>Heading 2</h2><h2>Heading 3</h2></html>\" \n\nsoup = bs4.BeautifulSoup(html, 'html.parser') \n\nh2_list = soup.find_all('h2')\nprint(h2_list)"}
{"instruction": "Write a lambda expression that multiplies the argument by two.", "input": "", "output": "# construct a lambda that multiplies the argument by two\nfunc = lambda x : x * 2"}
{"instruction": "Write a JavaScript code that gets the URL of a web page.", "input": "", "output": "var url = window.location.href;"}
{"instruction": "Generate a Python code to convert list of strings to list of integers.", "input": "strings = ['23', '45', '7', '67']", "output": "def convert_to_ints(strings):\n    ints = []\n    for s in strings:\n        ints.append(int(s))\n    return ints"}
{"instruction": "Edit the following function to only accept lowercase parameters.", "input": "def greeting(name):\n    print('Hello, ' + name + '!')", "output": "def greeting(name):\n    name = name.lower()\n    print('Hello, ' + name + '!')"}
{"instruction": "Make a prediction using the following machine learning model in Python.", "input": "", "output": "svm_model = SVC()\nsvm_model.fit(X_train, y_train)\npredictions = svm_model.predict(X_test)"}
{"instruction": "Write an HTML code to add a link to a web page.", "input": "Link text: Visit our site\nLink URL: https://www.example.com/", "output": "<a href=\"https://www.example.com/\">Visit our site</a>"}
{"instruction": "Suppose you are given a array of 0s,1s and 2s . Write a program to sort the given input array.", "input": "", "output": "def sortArray(arr): \n      \n    # loop to run for every element in the array \n    for i in range(len(arr)): \n          \n        # loop to run for elements till the sorted part \n        for j in range(0, len(arr)-i-1): \n  \n            # If a element is found to be greater than its next element then swap them \n            if arr[j] == 2 and arr[j+1] in [0,1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n            elif arr[j] == 1 and arr[j+1] == 0: \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n                  \n    return arr"}
{"instruction": "Develop an algorithm to find the depth in a tree.", "input": "", "output": "def tree_depth(root): \n    if root is None: \n        return 0 ;  \n  \n    else :  \n        left_height = tree_depth(root.left) \n        right_height = tree_depth(root.right) \n  \n        if (left_height > right_height): \n            return left_height+1\n        else: \n            return right_height+1"}
{"instruction": "What is the maximum number of columns allowed in a MySQL table?", "input": "", "output": "The maximum number of columns allowed in a MySQL table is 4096."}
{"instruction": "Create a function to calculate the network's throughput given a data rate and a size of the packets.", "input": "Data Rate = 10 Mbps; Packet size = 1000 bits", "output": "def calculate_throughput(data_rate, packet_size):\n    return data_rate / (packet_size / 8)  # converting bits to bytes\n\nif __name__ == '__main__':\n    data_rate = 10 # Mbps\n    packet_size = 1000 # bits\n    throughput = calculate_throughput(data_rate, packet_size)\n    print(throughput) # 125000.0"}
{"instruction": "Construct a program to find the result of the following equation", "input": "(x-1)^2", "output": "def equation(x):\n    return (x-1)**2"}
{"instruction": "Find the latitude and longitude of an input address.", "input": "address = \"1600 Amphitheatre Parkway, Mountain View, CA\"", "output": "import geocoder\n\ng = geocoder.google(address)\n\nprint(\"Latitude: \" + str(g.latlng[0])) \nprint(\"Longitude: \" + str(g.latlng[1]))"}
{"instruction": "Design a class in Python that creates objects based on user input.", "input": "", "output": "class UserInput:\n    def __init__(self):\n        self.data = None\n\n    def get_data(self):\n        self.data = input(\"Enter something: \")\n        return self.data"}
{"instruction": "Create a SELECT query in MySQL to find the records in a given table that satisfy a certain condition.", "input": "Table Name: orders\nCondition: quantity > 20", "output": "SELECT * FROM orders WHERE quantity > 20;"}
{"instruction": "Identify the parts of speech of the words in the sentence.", "input": "The cat ran quickly across the street.", "output": "The: article\ncat: noun\nran: verb\nquickly: adverb\nacross: preposition\nthe: article\nstreet: noun"}
{"instruction": "Create a list comprehension for the following code.", "input": "number_list = []\nfor x in range(10):\n    if x % 2 == 0:\n        number_list.append(x)", "output": "number_list = [x for x in range(10) if x % 2 == 0]"}
{"instruction": "Generate a list of 20 strings containing random characters of length 10.", "input": "", "output": "['Kj9F7VAl1q', '28jVYbueph', 'f7VZRif5uP', '2jf5CHXyt7', '3qBtyKjDIY', 'hE5wrRmIP6', 'V7jQcfhIBz', 'UQy6gCwPa5', '6Ujpu7NfMk', 'Z6DFhBoK8e', 'DIFpjgrhT7', 'TzdGsvhRO2', '1Kv4RyZoF8', 'RKjUXviPca', 'yO2PCtEjx1', 'qchomMdP9X', '9ydNHCaTZX', 'TFrhYdgSjp', 'BYeH12I4th', '4XNgJfKCAd']"}
{"instruction": "Write a Python program to print all integer numbers from a given range.", "input": "from 1 to 10", "output": "for i in range(1, 11):\n    print(i)"}
{"instruction": "Explain why the following CSS element is not displaying correctly.", "input": "<div class=\"container\">\n  <div class=\"my-element\" style=\"position: absolute;></div>\n</div>", "output": "The \"my-element\" element is not displaying correctly because it is positioned absolutely, which removes it from the normal flow of the document. As a result, its containing \"container\" is not aware of the element's size and is unable to accurately position it. In order to fix this issue, the \"position\" value should be changed to \"relative\" or \"static\" to render the element correctly within its container."}
{"instruction": "Create a for loop in Python that traverse a list and prints out every second element", "input": "lst = [1,2,3,4,5]", "output": "for i in range(0, len(lst), 2):\n    print(lst[i])"}
{"instruction": "Return the string \"Hello world\" as a response from a web service written in Java.", "input": "", "output": "@GET\n@Path(\"/helloWorld\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String getHelloWorldString() {\n  return \"Hello world\";\n}"}
{"instruction": "Improve the following code by implementing a more efficient algorithm.", "input": "def FunctionA(arr):\n    output = []\n    for elem in arr:\n        if elem > 0 and not elem in output:\n            output.append(elem)\n    return output", "output": "def FunctionA(arr):\n    output = set()\n    for elem in arr:\n        if elem > 0:\n            output.add(elem)\n    return list(output)"}
{"instruction": "Manipulate a given list in Python where every element in the list has to be doubled.", "input": "my_list = [1, 2, 3, 4]", "output": "my_list = [2, 4, 6, 8]"}
{"instruction": "Create two lists, one in Python and one in JavaScript, with 10 numbers each.", "input": "", "output": "Python List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nJavaScript List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"instruction": "Write a JavaScript code snippet to round a number 3.7 to nearest integer.", "input": "", "output": "Math.round(3.7);"}
{"instruction": "What programming language did Microsoft use to create its Edge browser?", "input": "", "output": "Microsoft used their own programming language called ChakraCore to create the Edge browser. ChakraCore is a JavaScript engine which is optimized for Edge. It is based on the Chakra engine which was originally developed to power Microsoft's Internet Explorer browser."}
{"instruction": "Given a list, remove all elements that are divisible by 4.", "input": "list = [8, 5, 6, 8, 9, 3, 10]", "output": "def remove_elements_divisible_by_four(num_list):\n   modified_list = []\n   for num in num_list:\n      if num % 4 != 0:\n         modified_list.append(num)\n   return modified_list\n   \n# Driver code\nif __name__ == \"__main__\":\n   list = [8, 5, 6, 8, 9, 3, 10]\n   print(remove_elements_divisible_by_four(list))\nOutput:\n[5, 9, 3]"}
{"instruction": "Write a code snippet in C which calculates the mean of a list of numbers.", "input": "int nums[] = {2, 3, 4, 5, 6};", "output": "#include <stdio.h>\n\nint calcMean(int nums[], int size) {\n    int sum = 0;\n    for (int i=0; i<size; i++) {\n        sum += nums[i];\n    }\n    return sum/size;\n}\n\nint main() {\n    int nums[] = {2, 3, 4, 5, 6};\n    int size = sizeof(nums)/sizeof(nums[0]);\n\n    int mean = calcMean(nums, size);\n    printf(\"The mean of the numbers is %d.\", mean);\n    return 0;\n}"}
{"instruction": "Define a function that takes an array of strings and combines the strings into a single string.", "input": "array = [\"Hello\", \"World\"]", "output": "def combine_strings(strings_array):\n    output_string = \"\"\n    for string in strings_array:\n        output_string += string\n    \n    return output_string\n\ncombine_strings(array)"}
{"instruction": "Create an object in JavaScript to save the particular book detail.", "input": "Title: Lord of the Rings\nAuthor: J.R.R. Tolkien", "output": "let book = { \n    title: 'Lord of the Rings', \n    author: 'J.R.R. Tolkien'\n};"}
{"instruction": "Write a query to retrieve all rows from the Students table where the Grade is \"A\".", "input": "", "output": "SELECT * FROM Students WHERE Grade = 'A';"}
{"instruction": "Create an algorithm to generate a random password", "input": "", "output": "def generate_password(length):\n  password = \"\"\n  characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()\"\n  for i in range(length):\n    password += choice(characters)\n  return password\n\nprint(generate_password(10)) // output 5s@N#s9J@2"}
{"instruction": "Make the following code work in a multithreading environment.", "input": "x = 0\ndef incrementer():\n    #TODO", "output": "import threading\n\nx = 0\nlock = threading.Lock()\n\ndef incrementer():\n    global x\n    with lock:\n        x +=  1\n        return x"}
{"instruction": "Create a function that calculates the length of a linked list.", "input": "Linked List: 10 -> 20 -> 30 -> 40 -> 50", "output": "def list_length(head):\n    count = 0\n    while head is not None:\n        count += 1\n        head = head.next\n    return count"}
{"instruction": "Rewrite the following HTML code in valid XML syntax.", "input": "<html>\n  <head>\n    <title>My Page</title>\n  </head>", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<page>\n  <title>My Page</title>\n</page>"}
{"instruction": "Unpack a given list of tuples", "input": "tuples = [('John', 23), ('Adam', 45)]", "output": "def unpack_tuples(tuples):\n    names, ages = zip(*tuples)\n    return list(names), list(ages)\n\nif __name__ == '__main__':\n    names, ages = unpack_tuples(tuples)\n    print(names)\n    print(ages)"}
{"instruction": "Design a program to find the occurrence of a given character in a given string.", "input": "Given string: \"Hello World!\"\nCharacter to find: o", "output": "def occurance_count(str, char):\n    count = 0\n    for c in str:\n        if c == char:\n            count += 1\n    \n    return count"}
{"instruction": "Write a JavaScript function that accepts two parameters - a number and a string - and returns a sentence with both parameters combined.", "input": "num=10;\nstr=\"apples\"", "output": "function combine(num, str) {\n    return `There are ${num} ${str}!`;\n}"}
{"instruction": "Write a SQL statement to join table1 and table 2 on the \"name\" column.", "input": "", "output": "SELECT table1.name, table1.city, table2.email\nFROM table1\nINNER JOIN table2\nON table1.name=table2.name;"}
{"instruction": "Write a JavaScript code to create a timer that counts down from 10.", "input": "", "output": "let countDown = 10;\nlet interval = setInterval(() => {\n  countDown--;\n  if (countDown == 0) {\n    clearInterval(interval);\n  }\n}, 1000);"}
{"instruction": "Formulate an SQL query to make this table:", "input": "Table: books\n\nbook_id | book_title | book_edition\n------------------------", "output": "CREATE TABLE books (\n    book_id INTEGER PRIMARY KEY,\n    book_title VARCHAR(50),\n    book_edition VARCHAR(50)\n);"}
{"instruction": "You are given two arrays, A and B. Write a program to determine if B is a subset of A.", "input": "A = [1, 2, 3, 4, 5]\nB = [2, 3, 5]", "output": "def is_subset(A, B):\n    for i in B:\n        if i not in A:\n            return False\n    \n    return True"}
{"instruction": "Create a C++ program for grading system", "input": "", "output": "#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    double grade;\n\n    cout << \"Enter your test score (0-100): \";\n    cin >> grade;\n\n    if (grade >= 90 && grade <= 100)\n    {\n        cout << \"Grade: A\";\n    }\n    else if (grade >= 80 && grade <90)\n    {\n        cout << \"Grade: B\";\n    }\n    else if (grade >= 70 && grade <80)\n    {\n        cout << \"Grade: C\";\n    }\n    else if (grade >= 60 && grade <70)\n    {\n        cout << \"Grade: D\";\n    }\n    else if (grade >= 0 && grade <60)\n    {\n        cout << \"Grade: F\";\n    }\n\n    return 0;\n}"}
{"instruction": "Write a JavaScript program to randomly select items from an array.", "input": "const fruits = ['apple', 'banana', 'mango', 'cherry'];", "output": "function getRandomItem(arr) {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index]; \n}\n \nconst randomItem = getRandomItem(fruits);\nconsole.log(randomItem);"}
{"instruction": "Create a function that takes two parameters and returns an array with those two numbers in it.", "input": "", "output": "def create_array(param1, param2):\n    \"\"\"A function that takes two parameters and returns an array with those two numbers in it.\"\"\"\n    arr = [param1, param2]\n    return arr\n\n# Let's test it\narr = create_array(1, 5)\nprint(arr) # Output: [1, 5]"}
{"instruction": "Create a MySQL query to list out the customer IDs, first names, and last names of customers who live in the United States.", "input": "", "output": "SELECT customer_id, first_name, last_name\nFROM customers\nWHERE country = 'United States';"}
{"instruction": "Write a function in JavaScript that takes two strings as arguments and checks if the characters in the first string form a subsequence of the characters in the second string.", "input": "", "output": "function isSubsequence(str1, str2) {\n  let i = 0;\n  let j = 0;\n  while (i < str1.length && j < str2.length) {\n    if (str2[j] === str1[i]) {\n      i++;\n    }\n    j++;\n  }\n  return i === str1.length;\n}"}
{"instruction": "Construct a \"try catch\" statement in JavaScript which prints \"Value must be an integer\" if a variable x is not an integer.", "input": "let x = \"string\";", "output": "try {\n  if (typeof( x ) !== 'number') {\n    throw \"Value must be an integer\";\n  }\n}\ncatch(err) {\n  console.log(err);\n}"}
{"instruction": "Generate a random password consisting of alphanumeric characters and special characters.", "input": "", "output": "import string \nimport random \n  \ndef randomPassword(): \n    password_characters = string.ascii_letters +  string.digits + '!@#$%^&*()'\n    password = random.choice(string.ascii_lowercase) #Include atleast one lowercase\n    password += random.choice(string.ascii_uppercase) #Include atleast one uppercase\n    password += random.choice(string.digits) #Include atleast one number\n    password += random.choice(string.punctuation) #Include atleast one special character\n\n    for i in range(8):\n        password += random.choice(password_characters)\n\n    return password"}
{"instruction": "Create a function in Python that takes a string and prints the frequency table of all its characters.", "input": "string = \u201cHello world\"", "output": "def get_freq_table(string): \n    char_freq_dict = dict() \n    for char in string: \n        if char in char_freq_dict.keys(): \n            char_freq_dict[char] += 1\n        else: \n            char_freq_dict[char] = 1\n    print (\"Frequency table of given string is : \\n\",char_freq_dict) \n\nget_freq_table(string)"}
{"instruction": "Implement an algorithm to print the steps of the Tower of Hanoi problem.", "input": "", "output": "def hanoi(num_disks, from_peg, to_peg, aux_peg):\n    if num_disks == 1:\n        print(\"Move disk 1 from peg\", from_peg,\"to peg\", to_peg)\n        return\n\n    hanoi(num_disks-1, from_peg, aux_peg, to_peg)\n    print(\"Move disk\",num_disks,\"from peg\",from_peg,\"to peg\",to_peg)\n    hanoi(num_disks-1, aux_peg, to_peg, from_peg)"}
{"instruction": "Create a program to convert a string of ASCII characters to its equivalent decimal value", "input": "String : hello", "output": "def ascii_to_decimal(string):\n    decimal_value = 0\n    for c in string:\n        decimal_value += ord(c)\n    return decimal_value\n\nprint(ascii_to_decimal('hello')) # Output -> 104 101 108 108 111"}
{"instruction": "Create a Python program to validate an email address according to RFC5322 syntax.", "input": "", "output": "import re\ndef validate(email):\n    regex = r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if re.search(regex, email):\n        return True\n    else:\n        return False"}
{"instruction": "Repair the given HTML code to display a \u2018div\u2019 element centered on the page with a width of 400px.", "input": "<div style=\"width: 400px; margin: 0 auto;\"></div>", "output": "<div style=\"width: 400px; margin: 0 auto; text-align: center;\"></div>"}
{"instruction": "Create a dictionary of key-value pairs containing the names of five fruits and their corresponding colors.", "input": "", "output": "fruitsColors = {\n    'apple': 'red',\n    'banana': 'yellow',\n    'orange': 'orange',\n    'grape': 'purple',\n    'strawberry': 'red'\n}"}
{"instruction": "Convert the following code written in Java to C++.", "input": "String s = \"It's raining today\";", "output": "std::string s = \"It's raining today\";"}
{"instruction": "Write a C# method to check if a string contains a specific substring.", "input": "", "output": "public bool ContainsSubstring(string text, string substring) {\n    return text.Contains(substring);\n}"}
{"instruction": "Replace the following PHP code with an equivalent JavaScript code", "input": "$someNumber = 10;", "output": "let someNumber = 10;"}
{"instruction": "Generate a 5 rows by 4 columns matrix of random numbers between 0 and 10 in Python", "input": "", "output": "import random \n\nmatrix = [] \nfor i in range(5): \n    matrix.append([random.randint(0, 10) for j in range(4)]) \n\nprint(matrix)"}
{"instruction": "Given a list of numbers, write a function that returns the sum without using the built-in 'sum()' function.", "input": "arr = [3, 4, 2, 5, 9]", "output": "def add_nums(arr):\n    total = 0\n    for x in arr:\n        total += x\n    return total"}
{"instruction": "Write a PHP code snippet to display the current date in the format \"Month day, Year\".", "input": "", "output": "echo date('F j, Y');"}
{"instruction": "Design a CSS template for a website.", "input": "", "output": "* {\n  margin: 0; \n  padding: 0; \n  box-sizing: border-box; \n}\n\nbody {\n  font-family: Arial, sans-serif; \n  font-size: 14px;\n  line-height: 1.5;\n  background-color: #f5f5f5; \n}\n\nh1 { \n  font-size: 2em; \n  margin-bottom: 10px; \n} \n\nh2 { \n  font-size: 1.5em; \n  margin-bottom: 5px;\n}\n\na { \n  color: #2016B6; \n  text-decoration: none; \n  transition: all .3s ease; \n}"}
{"instruction": "Implement a class which stores a list of strings and provides a method to filter out the items containing an 'a' character.", "input": "", "output": "class StringList {\n    constructor(arr) {\n        this.list = arr;\n    }\n\n    filterA() {\n        return this.list.filter(val => !val.includes('a'))\n    }\n}"}
{"instruction": "Code a recursive solution for counting the number of characters in a given string.", "input": "example", "output": "def count_chars(string):\n    if len(string) == 0:\n        return 0\n    return 1 + count_chars(string[1:])"}
{"instruction": "Generate a valid RTL(Register Transfer Level) design in Verilog to implement the following Boolean function", "input": "F(A,B,C,D) = (A + !B + C + !D)'", "output": "module F(A,B,C,D,Z);\n    input A, B, C, D;\n    output Z;\n    reg Z;\n    always @ (A,B,C,D)\n        begin\n             Z = ~(A | ~B | C | ~D);\n        end\nendmodule"}
{"instruction": "Implement a function to extract the last two words from a string of words", "input": "", "output": "def get_last_two_words(string):\n    \"\"\"\n    Extract and return the last two words from a string of words\n    :param string: the input string\n    :return: the last two words\n    \"\"\"\n    words = string.split(\" \")\n    return words[-2:]"}
{"instruction": "Write a Java program to print out a triangle of stars.", "input": "3", "output": "*\n**\n***"}
{"instruction": "Create a function that identifies the type of a value", "input": "", "output": "def identify_value_type(val):\n    if type(val) is int:\n        return 'int'\n    elif type(val) is float:\n        return 'float'\n    elif type(val) is str:\n        return 'str'\n    elif type(val) is list:\n        return 'list'\n    elif type(val) is dict:\n        return 'dict'"}
{"instruction": "Create a HTML page which displays \"Hello, World!\" on the screen.", "input": "", "output": "<html>\n  <head>\n    <title>Hello, World!</title>\n  </head>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html>"}
{"instruction": "Write an algorithm in C that prints a string in reverse.", "input": "Hello", "output": "char str[] = \"Hello\";\nint len = strlen(str);\n\nfor (int i = len-1; i >= 0; i--) {\n  printf(\"%c\", str[i]);\n}"}
{"instruction": "Create a regex pattern for extracting emails from a text.", "input": "", "output": "([a-zA-Z0\u20139_.+-]+@[a-zA-Z0\u20139-]+\\.[a-zA-Z0\u20139-.]+)"}
{"instruction": "Return the number of elements in a dictionary.", "input": "myDict = {'a':1, 'b':2, 'c':3}", "output": "def count_dict_elements(myDict):\n    count = 0\n    for key in myDict:\n        count += 1\n    return count\n        \nelement_nums = count_dict_elements(myDict)"}
{"instruction": "Create a Python script to output the sum of the elements in a given 2-D array.", "input": "X = [[11, 18], [20, 1], [12, 16]]", "output": "def sum_elements(X):\n    sums = 0\n    for i in range(len(X)):\n        for j in range(len(X[i])):\n            sums+=X[i][j]\n    return sums\n\nprint(sum_elements(X))"}
{"instruction": "Explain a quick sort algorithm in 3 sentences.", "input": "", "output": "Quick sort is an efficient sorting algorithm that divide-and-conquer approach.  It picks an element as a pivot from the array and partitions the array around the pivot.  It recursively sorts the two sub-arrays created on either side of the pivot element."}
{"instruction": "Make a class called 'Car' that stores information about a car and contains a function called 'start' which when called, prints out \"Car has started\".", "input": "", "output": "class Car:\n    def __init__(self):\n        self.model = \"\"\n        self.year = 0\n    \n    def start(self):\n        print(\"Car has started\")"}
{"instruction": "Given a string of length N, create an HTML table with N rows and 4 columns.", "input": "string = \"Hello World\"", "output": "<table>\n  <tr>\n    <td>H</td>\n    <td>e</td>\n    <td>l</td>\n    <td>l</td>\n  </tr>\n  <tr>\n    <td>o</td>\n    <td>&nbsp;</td>\n    <td>W</td>\n    <td>o</td>\n  </tr>\n  <tr>\n    <td>r</td>\n    <td>l</td>\n    <td>d</td>\n    <td>&nbsp;</td>\n  </tr>\n</table>"}
{"instruction": "How do you convert a string to an integer in Python?", "input": "", "output": "In Python, strings can be converted to integers using the int() function. This function takes a string as its argument and returns an integer object. The int() function can also take optional parameters that allow for conversion from one base or radix, or from different types of numbers (e.g. octal, hexadecimal, binary)."}
{"instruction": "Create an assembly language program to find the sum of two numbers.", "input": "", "output": ".MODEL SMALL\n        .STACK 100H\n \n        .DATA\nNUM1  DB  12H \nNUM2  DB  17H \nRES   DB  ?\n \n        .CODE\nMAIN   PROC\n        MOV AX, @DATA\n        MOV DS, AX\n \n        MOV AL, NUM1  ; Move value of num1 in AL\n        MOV AH, 0     ; Clear AH\n                ADD AL, NUM2  ; Add num2 to AL\n        MOV RES, AL\n \n        MOV AH, 4CH   ; return to operating system\n        INT 21H\nMAIN   ENDP\n        END MAIN"}
{"instruction": "Design a while loop in C++ that prints every third number between 1 and 10.", "input": "", "output": "int count = 1;\nwhile (count <= 10) {\n if (count % 3 == 0) {\n cout << count << endl;\n }\n count++;\n}"}
{"instruction": "You have been given a list of numbers. Write a code to generate a new list of numbers containing only the even numbers from the original list.", "input": "numbers = [2, 3, 5, 6, 8, 9, 10]", "output": "def get_even_numbers(numbers):\n  even_numbers = []\n  for num in numbers:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  return even_numbers\n\nif __name__ == \"__main__\":\n  print(\"Even numbers from original list:\", get_even_numbers(numbers))"}
{"instruction": "Write a Bash script that checks if a given directory exists.", "input": "", "output": "if [ -d \"$1\" ]; then\n  echo \"The directory exists.\"\nelse\n  echo \"The directory does not exist.\"\nfi"}
{"instruction": "Make a HTML5 webpage with a simple form.", "input": "", "output": "<!DOCTYPE html> \n<html> \n    <head> \n        <title>Simple Form</title> \n    </head> \n    <body> \n        <form> \n            Name: <input type=\"text\" name=\"name\"/><br><br> \n            Email:  <input type=\"email\" name=\"email\"/><br><br> \n            <input type=\"submit\" value=\"Submit\"/> \n        </form> \n    </body> \n</html>"}
{"instruction": "Construct a for loop that calculates the sum of the numbers from 0 to n.", "input": "", "output": "n = 5\ntotal = 0\nfor i in range(n+1): \n    total += i\n   \nprint(total) # Output: 15"}
{"instruction": "Create a function to calculate the volume of the given 3D shape.", "input": "type: \"cube\"\nside: 6", "output": "def calculate_volume(shape, side):\n  if shape == \"cube\":\n    return side ** 3"}
{"instruction": "Create a for loop for copying an array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr_copy = []\nfor i in arr:\n    arr_copy.append(i)"}
{"instruction": "Generate a list comprehension that has the multiples of 3 between 0 and 30", "input": "", "output": "multiples_of_3 = [x for x in range(0, 31) if x % 3 == 0]"}
{"instruction": "Use for loop to print all numbers from 1 to 100 in separate lines.", "input": "", "output": "for i in range (1, 101):\n    print(i)"}
{"instruction": "Write a class constructor for a Unicorn class with name, color, and age as parameters.", "input": "", "output": "class Unicorn:\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age"}
{"instruction": "Output the longest consecutive character string in a given string.", "input": "", "output": "def longest_consecutive_str(s):\n    longest_str = \"\"\n    cur_str = \"\"\n\n    for char in s:\n        if not cur_str or char == cur_str[-1]:\n            cur_str += char\n        else:\n            if len(cur_str) > len(longest_str):\n                longest_str = cur_str\n            cur_str = char\n\n    if len(cur_str) > len(longest_str):\n            longest_str = cur_str\n\n    return longest_str"}
{"instruction": "Write a SQL query to find all employees over the age of 30.", "input": "", "output": "SELECT * \nFROM Employees \nWHERE age > 30;"}
{"instruction": "With given input string, create a program that returns a new string with the first character capitalized.", "input": "hello world", "output": "def capitalize(text):\n    return text[0].upper() + text[1:]"}
{"instruction": "Create a class named Dog with parameters name, age and breed.", "input": "", "output": "class Dog:\n    def __init__(self,name, age, breed):\n        self.name = name\n        self.age = age\n        self.breed =  breed"}
{"instruction": "Modify the following code to kill a thread after 10 seconds.", "input": "import threading \nfrom time import sleep\n  \ndef worker(): \n    try: \n        while True: \n            print(\"Thread\") \n            sleep(1) \n\nthreads = [] \nfor x in range(40): \n    t = threading.Thread(target=worker) \n    threads.append(t) \n    t.start()", "output": "import threading \nimport signal \nfrom time import sleep \n\ndef exitThread(signum, frame): \n    raise SystemExit \n\ndef worker(): \n    try: \n        signal.signal(signal.SIGALRM, exitThread) \n        signal.alarm(10) \n        while True: \n            print(\"Thread\")  \n            sleep(1) \n\nthreads = [] \nfor x in range(40): \n    t = threading.Thread(target=worker) \n    threads.append(t) \n    t.start()"}
{"instruction": "Calculate the maximum sum of a subarray of length k.", "input": "Array: [1, 3, 4, 5, 20, 32]\nK: 3", "output": "The maximum sum of a subarray of length 3 is 51 (20 + 5 +26)."}
{"instruction": "Replace the placeholder with actual API calls to execute the following code.", "input": "string search_term = \"coffee shop\"; \nlist results = API_call(search_term)\nprint(results)", "output": "string search_term = \"coffee shop\"; \nlist results = requests.get(\"https://api.example.com/search?term=\"+search_term).json()\nprint(results)"}
{"instruction": "Write a C++ program to create a binary search tree.", "input": "", "output": "#include <iostream>\n\nusing namespace std;\n\nstruct Node { \n int data; \n struct Node *left, *right; \n};\n\nstruct Node* newNode(int data) {\n struct Node* node = new Node; \n node->data = data; \n node->left = node->right = NULL; \n return node; \n} \n\nstruct Node* insert(struct Node* node, int data) { \n if (node == NULL) \n return newNode(data); \n\nif (data < node->data) \n node->left = insert(node->left, data); \nelse\n node->right = insert(node->right, data);\n\nreturn node; \n}"}
{"instruction": "What is the difference between sort() and sorted()?", "input": "", "output": "The sort() method sorts the elements of a given iterable in ascending order. It modifies the original list in place and does not return a value. The sorted() method on the other hand, returns an iterable sorted list without modifying the original sequence. It takes an optional 'key' argument to specify a function to be called on each list element prior to making comparisons."}
{"instruction": "Create a JavaScript function to take a string of numbers and convert it to an array of integers.", "input": "const inputString = '1 2 3 4 5'", "output": "function stringToArray(str) {\n    return str.split(' ').map(item => parseInt(item)); \n}\n\nstringToArray(inputString);"}
{"instruction": "Create a Swift program that reads in three values from the user and prints out the maximum value.", "input": "", "output": "import Foundation\n\nvar a = 0\nvar b = 0\nvar c = 0\n\nprint(\"Enter 3 values:\")\n\nif let aInput = readLine() {\n    if let aInt = Int(aInput) {\n        a = aInt\n    }\n}\n\nif let bInput = readLine() {\n    if let bInt = Int(bInput) {\n        b = bInt\n    }\n}\n\nif let cInput = readLine() {\n    if let cInt = Int(cInput) {\n        c = cInt\n    }\n}\n\nvar maximum = max(max(a, b), c)\nprint(\"The maximum value is: \\(maximum)\")"}
{"instruction": "Design a program to compare two sorted lists and returning list with the common elements.", "input": "list_one=[5, 10, 15, 20, 25]\nlist_two=[15, 17, 20, 22, 25, 27]", "output": "def compare_list(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n    return common_list"}
{"instruction": "Construct a regex expression that will check if a email is valid.", "input": "", "output": "^[A-Za-z0-9\\.\\'\\+\\-\\_]+(\\@)[A-Za-z0-9.-]+([\\.][a-zA-Z]{2,4})+$"}
{"instruction": "Write a JavaScript program to replace all the vowels in a given string with '*'.", "input": "", "output": "function replaceVowels(str) {\n  return str.replace(/[aeiou]/gi, '*');\n}"}
{"instruction": "Use a regex expression to find all the words that begin with a \"t\" and end with an \"e\" in the following sentence.", "input": "sentence = \"The dark night was quiet and still\"", "output": "import re\n\nsentence = \"The dark night was quiet and still\"\n\npattern = r\"\\bT\\w*e\\b\"\n\n# Find all the words that begin with a \"t\" and end with an \"e\"\nmatches = re.findall(pattern, sentence)\nprint(matches)\n\n# Output: ['The', 'night', 'quiet', 'still']"}
{"instruction": "Develop a Python function to calculate a Fibonacci number based on a given index.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n        \n    elif n==1: \n        return 0\n    \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)"}
{"instruction": "Write a CSS selector to select the second paragraph of a document.", "input": "", "output": "p:nth-of-type(2) {\n  // CSS code\n}"}
{"instruction": "Create a basic UI in HTML/CSS for a shopping cart website.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>Shopping Cart</title>\n <style>\n  body { margin: 0px; }\n  #container {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n  }\n  #header {\n    height: 100px;\n    background-color: #eee;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  #content {\n    flex: 1;\n    background-color: #ccc;\n  }\n  #footer {\n    height: 100px;\n    background-color: #eee;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n </style>\n</head>\n<body>\n <div id=\"container\">\n  <div id=\"header\">\n   <h1>Shopping Cart</h1>\n  </div>\n  <div id=\"content\">\n   <!-- Content here -->\n  </div>\n  <div id=\"footer\">\n   &copy; All rights reserved\n  </div>\n </div>\n</body>\n</html>"}
{"instruction": "Write a test case for a function that adds two numbers.", "input": "Function: addTwoNumbers (a, b)", "output": "@Test\npublic void testAddTwoNumbers(){\n    int a = 1;\n    int b = 2;\n    assertEquals(3, addTwoNumbers(a, b));\n}"}
{"instruction": "Convert the following JSON object to a .csv table.", "input": "{\n  \"name\": \"John Doe\",\n  \"age\": 35,\n  \"job\": \"Software Engineer\"\n}", "output": "name,age,job\nJohn Doe,35,Software Engineer"}
{"instruction": "How do you print the first parameter passed to a bash script?", "input": "", "output": "echo $1"}
{"instruction": "Assert that an array is not empty before adding items.", "input": "", "output": "if (array != null && array.length > 0) {\n    // add items to array\n}"}
{"instruction": "Design an algorithm in JavaScript that finds the most frequent element in an array.", "input": "", "output": "function mostFrequentElem(arr) {\n  let countMap = new Map();\n\n  for (let i = 0; i < arr.length; i++) {\n    if (!countMap.has(arr[i])) {\n      countMap.set(arr[i], 1);\n    } else {\n      let val = countMap.get(arr[i]);\n      countMap.set(arr[i], val + 1);\n    }\n  }\n  let maxCount = 1;\n  let maxElem;\n  for (let [key, val] of countMap.entries()) {\n    if (val > maxCount) {\n      maxCount = val;\n      maxElem = key;\n    }\n  }\n  return maxElem;\n}"}
{"instruction": "Insert the missing code in the function below to sort an array of strings:", "input": "arr = [\"hello\", \"apple\", \"cat\"]\n\ndef sort_str(arr):\n  # Insert code here", "output": "def sort_str(arr):\n  # Insert code here\n  arr.sort()\n  return arr"}
{"instruction": "Write a SQL query to find all customers who purchased more than 5 items from a specific store.", "input": "", "output": "SELECT customers.customer_id, customers.name FROM customers \n    INNER JOIN orders\n    ON orders.customer_id = customers.customer_id \n    WHERE orders.store_id = ? \n    GROUP BY customers.customer_id\n    HAVING COUNT(*) > 5;"}
{"instruction": "Generate a valid MySQL query to retrieve a column from a table", "input": "Table = Users, Column = Address", "output": "SELECT Address FROM Users;"}
{"instruction": "Write a Python code to print \"Hello World!\" on the console.", "input": "", "output": "print(\"Hello World!\")"}
{"instruction": "Can you build a linear regression model to predict the housing prices in the given dataset?", "input": "The dataset contains 15 columns with 3,000 records.", "output": "Yes, it is possible to build a linear regression model to predict the housing prices in the given dataset. You will have to split the dataset into a training and testing set and then use the training set to build a linear regression model. Once the model is built, use it to predict labels on the test set and then evaluate the model performance with relevant metrics."}
{"instruction": "Write a SQL query to list the unique office locations which are older than 5 years.", "input": "", "output": "SELECT DISTINCT location\nFROM office\nWHERE (CURRENT_DATE - date_established) > (5 YEARS)"}
{"instruction": "Create a Django model that includes a user's name, email address, and age.", "input": "", "output": "class UserModel(models.Model):\n    name = models.CharField(max_length=100)\n    address = models.CharField(max_length = 200)\n    age = models.IntegerField()"}
{"instruction": "Create an array of 5 increasing numbers starting from 10.", "input": "", "output": "var arr = [10, 11, 12, 13, 14];"}
{"instruction": "Write a SQL query to generate a report which display the total number of customers in each country.", "input": "", "output": "SELECT COUNT(*) AS Customer_Count, Country \nFROM Customers \nGROUP BY Country;"}
{"instruction": "Create a C program that sorts an array in either ascending or descending order, depending on the user\u2019s selection.", "input": "[2, 1, 4, 3]", "output": "#include <stdio.h>\n\n// Function to swap two elements\nvoid swap(int* a, int* b) {\n    int t = *a;\n    *a = *b;\n    *b = t;\n}\n\n// Bubble sort function \nvoid bubbleSort(int arr[], int n, int order) {     \n    int i, j; \n    for (i = 0; i < n-1; i++)              \n        for (j = 0; j < n-i-1; j++) \n            if (order == 0 && arr[j] > arr[j+1]) \n                swap(&arr[j], &arr[j+1]); \n            else if (order == 1 && arr[j] < arr[j+1])\n                swap(&arr[j], &arr[j+1]); \n}\n\n// Driver program\nint main() {\n    int arr[] = {2, 1, 4, 3}; \n    int n = sizeof(arr)/sizeof(arr[0]); \n    int order;\n    printf(\"Enter 0 for ascending order, 1 for descending: \\n\");\n    scanf(\"%d\", &order);\n    bubbleSort(arr, n, order);\n    printf(\"Sorted array: \\n\");\n    for (int i=0; i < n; i++)\n        printf(\"%d \", arr[i]);\n    return 0;\n}"}
{"instruction": "Write a React component to display a list of all the countries.", "input": "", "output": "import React from \"react\";\n\nconst CountryList = ({ countries }) => {\n  return (\n    <ul>\n      {countries.map(country => {\n        return <li>{country}</li>;\n      })}\n    </ul>\n  );\n};\n\nexport default CountryList;"}
{"instruction": "How would you add two matrices in C++?", "input": "", "output": "#include <iostream> \nusing namespace std; \n  \n// Dimensions of matrices \n#define M 3 \n#define N 3 \n  \n// Function to add two matrices \nvoid addMatrices(int A[][N], int B[][N], int C[][N]) \n{ \n    int i, j; \n    for (i = 0; i < M; i++) \n        for (j = 0; j < N; j++) \n            C[i][j] = A[i][j] + B[i][j]; \n}"}
{"instruction": "Write a different style of a given JavaScript code snippet.", "input": "function sum(a, b) {\n  return a + b;\n}", "output": "function addVals(x, y) {\n    return x + y;\n}"}
{"instruction": "Develop a program to encode and decode a given string.", "input": "Input a string s to be encoded.", "output": "def encode(s): \n    encoded_str = \"\" \n    for i in s: \n        encoded_str += str(ord(i)) \n  \n    return encoded_str \n  \ndef decode(s): \n    decoded_str = \"\" \n    for i in range(0, len(s), 2): \n        decoded_str += chr(int(s[i:i+2])) \n  \n    return decoded_str"}
{"instruction": "Create a class in Python to represent a car and include methods to set and get the car's color, model, and year.", "input": "", "output": "class Car:\n    def __init__(self, model, year, color):\n        self.model = model\n        self.year = year\n        self.color = color\n\n    def set_color(self, color):\n        self.color = color\n\n    def get_color(self):\n        return self.color\n\n    def set_model(self, model):\n        self.model = model\n\n    def get_model(self):\n        return self.model\n\n    def set_year(self, year):\n        self.year = year\n\n    def get_year(self):\n        return self.year"}
{"instruction": "Create a function for detecting changes in an array of numbers.", "input": "", "output": "def detect_changes(numbers):\n    results = []\n    for i in range(1, len(numbers)):\n        if numbers[i] != numbers[i-1]:\n            results.append((i, numbers[i]))\n    return results"}
{"instruction": "Convert the following string [\"12.1 10.2 6.3 5.4\"] into a list of floats.", "input": "\"12.1 10.2 6.3 5.4\"", "output": "list_floats = [float(x) for x in the_string.split()]\nprint(list_floats)"}
{"instruction": "Generate a code snippet to perform an element-wise multiplication of two NumPy arrays named A and B.", "input": "A = [1,2,3]\nB = [4,5,6]", "output": "import numpy as np\n \nA = np.array([1,2,3])\nB = np.array([4,5,6])\n \nC = np.multiply(A, B)\nprint(C)"}
{"instruction": "Generate the for loop in Java for iterating from 0 to the given number.", "input": "4", "output": "for (int i = 0; i < 4; i++) {\n   //code to be executed\n}"}
{"instruction": "Modify the following code so that it prints the Fibonacci numbers up to the given number", "input": "x = 10", "output": "def fibonacci(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n        return res"}
{"instruction": "Find the GCD of two integers.", "input": "a = 8, b = 12", "output": "def gcd(a, b): \n\n    # Base case \n    if a == 0:\n        return b \n      \n    return gcd(b % a, a) \n  \n# Driver code\na = 8\nb = 12\nprint(\"GCD of\",a,\"and\",b,\"is\", gcd(a, b))"}
{"instruction": "Write a SQL query to find the average credit score of users who are 18 years or younger.", "input": "", "output": "SELECT AVG(credit_score)\nFROM users\nWHERE age <= 18"}
{"instruction": "Separate odd numbers from an array and store them in a different array.", "input": "let array = [1,2,3,4,5,6,7,8,9]", "output": "const oddNumbers = (arr) => {\n    const odd = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 !== 0) {\n            odd.push(arr[i]);\n        }\n    }\n\n    return odd;\n};\n\nlet odds = oddNumbers(array);\nconsole.log(odds); // Output: [1, 3, 5, 7, 9]"}
{"instruction": "Implement a function in Java to find the frequency of a particular character in a given string.", "input": "", "output": "public static int getCharFrequency(String str, char c) \n{ \n   int count = 0; \n   for (int i = 0; i < str.length(); i++)  \n   { \n       if (str.charAt(i) == c) \n           count++; \n   } \n   return count; \n}"}
{"instruction": "Determine the output of the given Python code.", "input": "x = [1, 2, 3, 4, 5] \ny = x \ny[2] = 6", "output": "The output of the given Python code is [1, 2, 6, 4, 5]."}
{"instruction": "Decompose the following code into two different functions.", "input": "def calculateMinimumDifference(nums):\n    if len(nums) <= 1: return 0\n    min_diff = float('inf')\n    for x in range(1, len(nums)):\n        min_diff = min(min_diff, abs(nums[x] - nums[x-1]))\n    return min_diff", "output": "def calculate_diff(arr):\n    return abs(arr[0] - arr[1])\n\ndef calculate_minimum_difference(nums):\n    if len(nums) <= 1: return 0\n    min_diff = float('inf')\n    for x in range(1, len(nums)):\n        min_diff = min(min_diff, calculate_diff(nums[x-1:x+1]))\n    return min_diff"}
{"instruction": "Create a program in Python that calculates the average of numbers in a list.", "input": "[9, 5, 10, 12]", "output": "def average(numbers):\n    return sum(numbers) / len(numbers)\n\nprint(average([9, 5, 10, 12]))   # Output: 9.5"}
{"instruction": "Create an algorithm for finding the largest number in a list.", "input": "", "output": "def find_largest(nums):\n    largest = nums[0]\n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n    return largest"}
{"instruction": "Write an SQL query to select the names of all employees whose salary is between 40,000 and 50,000.", "input": "", "output": "SELECT name FROM employees WHERE salary BETWEEN 40000 AND 50000;"}
{"instruction": "Construct code to compute the average height from a list of heights.", "input": "heights = [170, 140, 160, 180, 160]", "output": "sum_heights = 0\nfor height in heights:\n    sum_heights += height\navg_height = sum_heights/len(heights)"}
{"instruction": "Design an algorithm in Python to detect anomalies in the given data.", "input": "Input a dataset containing two columns, temperature and pressure.", "output": "def detect_anomaly(data): \n    # Step 1: Calculate mean \n    mean_1 = np.mean(data['temperature']) \n    mean_2 = np.mean(data['pressure']) \n  \n    # Step 2: Calculate the standard deviation \n    sd_1 = np.std(data['temperature']) \n    sd_2 = np.std(data['pressure']) \n  \n    # Step 3: Calculate the threshold\n    cutoff = sd_1 * 3\n  \n    # Step 4: Apply threshold and mark anomalies \n    lower_limit_temperature = mean_1 - cutoff \n    upper_limit_temperature = mean_1 + cutoff \n  \n    lower_limit_pressure = mean_2 - cutoff \n    upper_limit_pressure = mean_2 + cutoff \n  \n    # Mark the anomalies by setting the value as 1 \n    data['anomaly'] = 0 \n    data.loc[data['temperature'] < lower_limit_temperature, 'anomaly'] = 1  \n    data.loc[data['temperature'] > upper_limit_temperature, 'anomaly'] = 1  \n    data.loc[data['pressure'] < lower_limit_pressure, 'anomaly'] = 1  \n    data.loc[data['pressure'] > upper_limit_pressure, 'anomaly'] = 1  \n  \n    # Return the dataframe \n    return data"}
{"instruction": "Construct a function to check if a string is a pangram.", "input": "", "output": "def is_pangram(s):\n    s = s.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in s:\n            return False\n    return True"}
{"instruction": "Write a SQL query to select the names of all the students from the table \"students\".", "input": "", "output": "SELECT name FROM students;"}
{"instruction": "Edit the following code to add a try-except block and print an error message on an exception.", "input": "arr = [1, 2, 3]\n\ni = 4\n\nprint(arr[i])", "output": "arr = [1, 2, 3]\n\ni = 4\n\ntry:\n    print(arr[i])\nexcept IndexError:\n    print(\"Index out of bounds. Please specify a valid index.\")"}
{"instruction": "Write the code to sort a dictionary by values in Python.", "input": "my_dict = {\n    \"a\": 10,\n    \"b\": 5,\n    \"c\": 15\n}", "output": "my_dict = {\n    \"a\": 10,\n    \"b\": 5,\n    \"c\": 15\n}\n\nsorted_dict = {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1])}\n\nprint(sorted_dict)\n#output: {\"b\": 5, \"a\": 10, \"c\": 15}"}
{"instruction": "Create a function to take two input strings and return the longest common substring.", "input": "Input 1: ababcd\nInput 2: abxyz", "output": "def longest_common_substring(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\n    return longest_substring"}
{"instruction": "Generate a unique key using the following string.", "input": "my_str = \"Hello World\"", "output": "import uuid \n \nkey = uuid.uuid5(uuid.NAMESPACE_DNS, my_str)"}
{"instruction": "Create a class in C++ called Point that represents a point in the two-dimensional space.", "input": "", "output": "class Point {\n  double x;\n  double y;\npublic:\n  Point(): x(0), y(0) { }\n  Point(double _x, double _y): x(_x), y(_y) { }\n  double getX() { return x; } \n  double getY() { return y; } \n};"}
{"instruction": "Generate an array of 20 random numbers between 0 and 10 (inclusive).", "input": "", "output": "import random \n  \narr = [] \nfor i in range(20): \n    arr.append(random.randint(0, 10))\n    \narr"}
{"instruction": "Parse the following string to obtain all the digits.", "input": "str1 = \"Price of the product is $128.\"", "output": "'128'"}
{"instruction": "Identify the division of numbers 10 and 5.", "input": "", "output": "The division of 10 and 5 is 2."}
{"instruction": "Write a SQL query to find all flights departing from a given location after a given date and time.", "input": "StartCity: NYC \nDate/Time: March 16, 2021 8:00 AM", "output": "SELECT flightno, startcity, starttime \nFROM flights \nWHERE startcity = 'NYC' AND starttime > '2021-03-16 08:00:00';"}
{"instruction": "Write a function that takes a given string and its length as input arguments and then prints the string reversely.", "input": "string = \"Hello world\"", "output": "def stringReverse(string, length): \n    for i in range(length - 1, -1, -1): \n        print(string[i], end=\"\") \n  \nstringReverse(\"Hello world\", 11)"}
{"instruction": "Create a JavaScript object to store user data. The data includes name, email, and age.", "input": "", "output": "let user = {\n    name: \"John Doe\",\n    email: \"john@example.com\",\n    age: 32\n};"}
{"instruction": "Write a function that takes a string and reverses the words.", "input": "text = \"Hello World!\"", "output": "def reverseWords(text):\n    return ' '.join(text.split()[::-1])\n\nreverseWords(text) # \"World! Hello\""}
{"instruction": "Edit the code so that it produces the desired output.", "input": "answer = n\nif answer % 2 == 0:\n    print('even')\nelse:\n    print('odd')\nOutput:\"", "output": "answer = n\nif answer % 2 == 0:\n    print('even')\nelif answer % 2 == 1:\n    print('odd')"}
{"instruction": "Use the provided knowledgebase to answer the following question: What is the capital of Costa Rica?", "input": "https://en.wikipedia.org/wiki/Costa_Rica", "output": "The capital of Costa Rica is San Jos\u00e9."}
{"instruction": "Write an SQL query to pick distinct elements from a table named 'students'.", "input": "", "output": "SELECT DISTINCT * FROM students;"}
{"instruction": "Create an HTML form to collect user information such as address and contact details.", "input": "", "output": "<form>\n  <label for=\"firstname\">First Name:</label>\n  <input type=\"text\" id=\"firstname\" name=\"firstname\" >\n  <br>\n  <label for=\"lastname\">Last Name:</label>\n  <input type=\"text\" id=\"lastname\" name=\"lastname\" >\n  <br>\n  <label for=\"address\">Address:</label>\n  <input type=\"text\" id=\"address\" name=\"address\" >\n  <br>\n  <label for=\"contact\">Contact:</label>\n  <input type=\"text\" id=\"contact\" name=\"contact\" >\n  <br>\n  <input type=\"submit\" value=\"Submit\" >\n</form>"}
{"instruction": "Take the following array of numbers and write a JavaScript program that sorts the array", "input": "[3, 4, 8, 9, 5, 6, 2]", "output": "function sortArray(arr) {\n    let len = arr.length;\n    for(let i = len-1; i>=0; i--){\n        for(let j = 1; j<=i; j++){\n            if(arr[j-1] > arr[j]){\n                let temp = arr[j-1];\n                arr[j-1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    return arr;\n}"}
{"instruction": "Implement a web scraper in Python to fetch all the URLs from a given website.", "input": "The website URL is https://www.example.com", "output": "import re\nimport requests\n\nurls = set()\n \ndef get_urls(url):\n    website = requests.get(url)\n    content = website.text\n    links = re.findall(r'<a .*?href=[\\'\"](.*?)[\\'\"].*?>', content)\n \n    for i in links:\n        if i.startswith(\"/\"):\n            base_url = url\n            i = base_url + i\n            if i in urls:\n                continue\n            urls.add(i)\n            get_urls(i)\n        elif url in i:\n            if i in urls:\n                continue\n            urls.add(i)\n            get_urls(i)\n \nif __name__ == \"__main__\":\n    get_urls(\"https://www.example.com\")\n    for i in urls:\n        print(i)"}
{"instruction": "Generate a correct C++ program that computes the square root of a given number.", "input": "float number = 3.14", "output": "float square_root(float number){\n    float low = 0;\n    float high = number;\n    float mid;\n    \n    while (low <= high){\n        mid = (low + high) / 2;\n        if (mid * mid == number){\n            return mid;\n        }\n        else if (mid * mid > number){\n            high = mid;\n        }\n        else {\n            low = mid;\n        }\n    }\n    return -1;\n}"}
{"instruction": "Write a code to calculate the maximum, minimum, and average of five numbers.", "input": "number_list = [2, 4, 6, 8, 10]", "output": "def get_max_min_avg(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\nmax_num, min_num, average = get_max_min_avg(number_list) \nprint(\"Maximum number is:\", max_num) \nprint(\"Minimum number is:\", min_num) \nprint(\"Average of the numbers is:\", average)"}
{"instruction": "How to create a dictionary of length four in Python?", "input": "", "output": "The simplest way to create a dictionary of length four in Python is by using the built-in dict() function. For example:\n\nmyDict = dict(key1 = \"value1\", key2 = \"value2\", key3 = \"value3\", key4 = \"value4\")"}
{"instruction": "Understand the parameters used in the following code and explain their purpose.", "input": "def doSomething(x, y, z): \n    pass", "output": "The parameters x, y and z are used in this function to represent arbitrary values. They can represent integers, floats, strings, lists, dictionaries, objects, etc. Depending on the specific implementation of this function, the parameters can take any meaning, representing any value. For example, it could be a function that performs an arithmetic operation, in which case x, y and z will represent the three numbers in the operation, or a function that processes a list, in which case x, y and z will represent the start index, end index and the list respectively."}
{"instruction": "Construct a code segment to find all unique characters in a given string.", "input": "String: Geeksforgeeks", "output": "def find_unique(string): \n    uniq_char = [] \n    for i in string: \n        if i not in uniq_char: \n            uniq_char.append(i) \n    return uniq_char \n\nprint(find_unique(\"Geeksforgeeks\"))"}
{"instruction": "Implement a class that stores values of all data types.", "input": "", "output": "class DataStorage {\n  constructor() {\n    this.storage = {};\n  }\n\n  setData(key, value) {\n    this.storage[key] = value;\n  }\n\n  getData(key) {\n    return this.storage[key];\n  }\n}"}
{"instruction": "Create a web page with a simple \"Hello World\" message.", "input": "", "output": "<html>\n  <head>\n    <title>Hello World</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n  </body>\n</html>"}
{"instruction": "Write a Python program to collect the data from the form below.", "input": "Name: John \nEmail: john@email.com \nPhone: (999)-999-9999", "output": "name = input(\"Name: \")\nemail = input(\"Email: \")\nphone = input(\"Phone: \")\n\ndata = {\n    \"name\": name,\n    \"email\": email,\n    \"phone\": phone\n}"}
{"instruction": "Convert this octal number to a binary number.", "input": "Octal number: 77", "output": "Binary number: 111111"}
{"instruction": "Write a SQL query for creating a table named \"users\" with columns for \"name\", \"email\" and \"age\".", "input": "", "output": "CREATE TABLE users(\n name VARCHAR(255) NOT NULL,\n email VARCHAR(255) NOT NULL,\n age INT NOT NULL\n);"}
{"instruction": "Write a function to find the index of the point that lies closest to the origin.", "input": "points = [[1,1],[-1,2],[3,-4]]", "output": "def closest_point(points):\n    min_dist = float('inf')\n    for i in range(len(points)):\n        dist = points[i][0]**2 + points[i][1]**2 \n        if dist < min_dist:\n            min_dist = dist\n            closest_index = i\n\n    return closest_index"}
{"instruction": "Parse this JSON data using JavaScript.", "input": "{\n  \"name\": \"John Smith\",\n  \"age\": 35,\n  \"location\": \"Online\"\n}", "output": "let data = {\n  \"name\": \"John Smith\",\n  \"age\": 35,\n  \"location\": \"Online\"\n};\n\nlet name = data.name;\nlet age = data.age;\nlet location = data.location;\n\nconsole.log(name); // Outputs: John Smith\nconsole.log(age); // Outputs: 35\nconsole.log(location); // Outputs: Online"}
{"instruction": "Compute the following expression in Java.", "input": "5 + 10 * 3", "output": "int result = 5 + (10 * 3); \nSystem.out.println(result); \n// Output: 35"}
{"instruction": "What is the largest prime factor of the number 885?", "input": "", "output": "The largest prime factor of 885 is 5."}
{"instruction": "Create a function to scale a number by the given factor.", "input": "factor = 0.5", "output": "def scale_value(x, factor):\n    '''This function will scale the given number by the given factor.'''\n    return x * factor"}
{"instruction": "Write a function to convert a 3 letter acronym to its full form.", "input": "Acronym: \"GDP\"", "output": "\"\"\"\nConvert a 3 letter acronym to its full form\n\"\"\"\n\ndef acronym_to_full_form(acronym):\n    acronyms = {\n        'GDP': 'Gross Domestic Product',\n        'CIA': 'Central Intelligence Agency',\n        'NASA': 'National Aeronautics and Space Administration'\n    }\n\n    return acronyms[acronym]\n\nif __name__ == '__main__':\n    acronym = \"GDP\"\n    print(acronym_to_full_form(acronym))"}
{"instruction": "Create a correlation heatmap in Python using a given dataset.", "input": "import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorr = data.corr()\n\nsns.heatmap(corr, \n        xticklabels=corr.columns,\n        yticklabels=corr.columns)\nplt.show()"}
{"instruction": "How would you use PostgreSQL to delete a row with a given ID from a table?", "input": "", "output": "DELETE FROM table_name WHERE id = <value>;"}
{"instruction": "Design an algorithm in Python for reversing a linked list.", "input": "", "output": "def reverse(head): \n    prev = None\n    curr = head \n    while(curr is not None): \n        next = curr.next\n        curr.next = prev \n        prev = curr \n        curr = next\n    head = prev \n    return head"}
{"instruction": "Write a loop to iterate through all elements in an array in JavaScript.", "input": "", "output": "for (let i = 0; i < array.length; i++) {\n   const element = array[i];\n   // perform operations on element\n}"}
{"instruction": "Edit the following sentence so that it becomes grammatically correct.", "input": "Sentence: I was leaving to work.", "output": "I was leaving for work."}
{"instruction": "Determine the returned value of the following function.", "input": "def my_fun(x):\n    if x > 5:\n         return x * 2\n    else:\n        return x * 3", "output": "If x = 6, the returned value is 12."}
{"instruction": "Generate a sequence of prime numbers between a given range using the Sieve of Eratosthenes algorithm.", "input": "", "output": "def sieve_of_eratosthenes(lower, upper):\n    # Create a list of prime numbers\n    prime_list = [True] * (upper + 1)\n    prime_list[0] = False\n    prime_list[1] = False\n\n    # Iterate over the list until the square root of the upper limit\n    for i in range(2, int(upper ** 0.5) + 1):\n        # If i is true, then it is prime\n        if prime_list[i]:\n            # Set all multiples of i to false\n            for j in range(i*i, upper + 1, i):\n                prime_list[j] = False\n\n    # Get the list of prime numbers between lower and upper\n    prime_nums = []\n    for i in range(lower, upper + 1):\n        if prime_list[i]:\n            prime_nums.append(i)\n\n    return prime_nums\n\nif __name__ == \"__main__\":\n    lower = 0\n    upper = 50\n    print(sieve_of_eratosthenes(lower, upper))"}
{"instruction": "Edit the following Java program to sort a given array.", "input": "int[] array={16, 5, 1, 8, 10};", "output": "public static void sortArray(int[] array) {\n    int temp;\n    for (int i = 0; i < array.length; i++) { \n        for (int j = i + 1; j < array.length; j++) {  \n            if (array[i] > array[j]) { \n                temp = array[i]; \n                array[i] = array[j]; \n                array[j] = temp; \n            } \n        } \n    }\n}"}
{"instruction": "Use SQL to add a new record to a table.", "input": "", "output": "INSERT INTO table (column1, column2, ...) \n  VALUES (value1, value2, ...);"}
{"instruction": "Write an HTML code snippet to create an unordered list with three list items.", "input": "", "output": "<ul>\n  <li>List item 1</li>\n  <li>List item 2</li>\n  <li>List item 3</li>\n</ul>"}
{"instruction": "Write a Python function to generate the powerset of a given list.", "input": "list = [2, 4, 6]", "output": "def generate_powerset(list):\n powerset = []\n for i in range(2**len(list)):\n  subset = [list[bit] for bit in range(len(list)) if is_bit_set(i, bit)]\n  powerset.append(subset)\n return powerset\n\ndef is_bit_set(num, bit):\n return (num & (1 << bit)) != 0"}
{"instruction": "Write a Java program to create a calculator using Switch statement.", "input": "", "output": "import java.util.Scanner;\n\npublic class Calculator {\n    public static void main(String[] args) { \n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Please enter two numbers: \");\n        int firstNumber = sc.nextInt();\n        int secondNumber = sc.nextInt();\n\n        System.out.println(\"Please enter an operator (+, -, *, /): \");\n        char operator = sc.next().charAt(0);\n\n        switch (operator) {\n            case '+':\n                System.out.println(firstNumber + secondNumber);\n                break;\n\n            case '-':\n                System.out.println(firstNumber - secondNumber);\n                break;\n\n            case '*':\n                System.out.println(firstNumber * secondNumber);\n                break;\n\n            case '/':\n                System.out.println(firstNumber / secondNumber);\n                break;\n\n            default:\n                System.out.println(\"Invalid operator!\");\n                break;\n        }\n    sc.close();\n    }\n}"}
{"instruction": "Create a user interface to display a chart showing the number of people of a certain gender and age group.", "input": "Sample JSON data to be used: \n\n[\n  {\n    \"name\": \"John\",\n    \"age\": 25,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 22,\n    \"gender\": \"female\"\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 28,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jill\",\n    \"age\": 24,\n    \"gender\": \"female\"\n  }\n]", "output": "import json\nimport plotly.graph_objs as go\n\ndef create_chart():\n    data = json.load('data.json')\n    males = 0 \n    females = 0\n    male_ages = [0] * 100\n    females_ages = [0] * 100\n\n    # count males/females and age group \n    for person in data:\n        if person['gender'] == 'male':\n            males += 1\n            age = int(person['age'])\n            male_ages[age] += 1\n        else:\n            females += 1\n            age = int(person['age'])\n            females_ages[age] += 1\n\n    # create data\n    data = [\n        go.Bar(\n            name='Males',\n            x=list(range(100)),\n            y=male_ages\n        ),\n        go.Bar(\n            name='Females',\n            x=list(range(100)),\n            y=females_ages\n        )\n    ]\n\n    # Create Layout\n    layout = go.Layout(\n        title='Number of People by Gender and Age Group',\n        yaxis=dict(title='Number of People'),\n        xaxis=dict(title='Age')\n    )\n\n    # Create Figure\n    figure = go.Figure(data=data, layout=layout)\n\n    # Plot and save the chart\n    figure.show()\n    figure.write_image('gender_age.png')\n\ncreate_chart()"}
{"instruction": "Create an in-place version of selection sort in Python.", "input": "arr = [5, 2, 4, 6, 8, 1]", "output": "def selection_sort(arr): \n\n    # Traverse through all array elements \n    for i in range(len(arr)): \n  \n        # Find the minimum element in remaining unsorted array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n                \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]"}
{"instruction": "edit the code so that it prints out the result", "input": "val = 5\nsum = 0\nsum = sum + val", "output": "val = 5\nsum = 0\nsum += val\nprint(sum) # prints 5"}
{"instruction": "Develop an HTML page which displays a user's profile information (name, age, phone number).", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User Profile</title>\n</head>\n<body>\n    <h1>User Profile</h1>\n    <p>Name: John Doe</p>\n    <p>Age: 24</p>\n    <p>Phone Number: 123-456-789</p>\n</body>\n</html>"}
{"instruction": "Given a list of integers, write a function that takes the list and returns only the odd numbers in the list.", "input": "", "output": "def extract_odd_numbers(numbers):\n    return [x for x in numbers if x % 2 != 0]"}
{"instruction": "From a given string, remove all the punctuations.", "input": "This is a string with puncutation, and it is not good.", "output": "This is a string with puncutation and it is not good"}
{"instruction": "Design a class to represent a car with member variables for the make, model, and year.", "input": "", "output": "class Car: \n  def __init__(self, make, model, year): \n    self.make = make\n    self.model = model\n    self.year = year"}
{"instruction": "Suggest a way to finish the following instruction.", "input": "Create a Java program to", "output": "Create a Java program to calculate the sum of all the elements in an array."}
{"instruction": "Sort a list of integers using quicksort", "input": "list = [4,2,1,5,3]", "output": "def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\nsorted_list = quicksort(list)"}
{"instruction": "Identify the most frequent word in a given sentence.", "input": "This is a beautiful summer day", "output": "The most frequent word in the sentence is \"a\"."}
{"instruction": "Write a CSS code snippet to change the font-size of all the headings to double the original size.", "input": "", "output": "h1, h2, h3, h4, h5, h6 {\n  font-size: 2em;\n}"}
{"instruction": "Write a SQL query to find the mean and median of all salaries of employees.", "input": "Table \"Employees\": \n\nName | Salary \n---- | ------ \nJohn | 20000  \nDavid| 32000  \nAnne | 15000  \nJane | 26000", "output": "SELECT AVG(Salary) as Mean,\nPERCENTILE_DISC(0.5) WITHIN GROUP(ORDER BY Salary) OVER() as Median\nFROM Employees"}
{"instruction": "How would you write a for loop to iterate over an array of integers in Bash?", "input": "", "output": "for i in $(seq 0 $((${#array[@]} - 1))); do \n  echo \"${array[$i]}\"\ndone"}
{"instruction": "Update the following code to fix a syntax error.", "input": "def add_two_number(a,b):\n    return a + b;", "output": "def add_two_numbers(a, b):\n    return a + b"}
{"instruction": "Write a bash script that can add two numbers.", "input": "", "output": "#!/bin/bash\n\nnumber1=2\nnumber2=2\n\nsum=$(($number1 + $number2))\n\necho \"The sum is: $sum\""}
{"instruction": "In Java, write a method that wraps a given string into a paragraph with each line no longer than the given number of characters.", "input": "", "output": "public static String wrapText(String text, int maxCharsPerLine) \n{ \n   // Create a StringBuilder for formulating the output \n   StringBuilder result = new StringBuilder(); \n  \n   // Break the given text into individual lines, each containing no more than maxCharsPerLine characters \n   String line = \"\"; \n   int index = 0; \n   while (index < text.length()) \n   { \n       while (index < text.length() && line.length() + text.charAt(index) <= maxCharsPerLine) { \n           line = line + text.charAt(index); \n           index++; \n       } \n  \n       result.append(line + \"\\n\"); \n  \n       // Reset line to empty \n       line = \"\"; \n   } \n  \n   return result.toString(); \n}"}
{"instruction": "Develop a program that offers the maximum value from a list of numbers.", "input": "[2, 10, 7, 15, 8, 11]", "output": "15"}
{"instruction": "Write a code to input an array and find the maximum and minimum element in it.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "def find_min_max(arr):\n    min_num = arr[0]\n    max_num = arr[0]\n    for num in arr:\n        if num < min_num:\n            min_num = num \n        if num > max_num:\n            max_num = num \n    return max_num, min_num\n\nmax_num, min_num = find_min_max(arr)\nprint('Max element is', max_num, 'and min element is', min_num)  # prints Max element is 6 and min element is 1"}
{"instruction": "Write a SQL query to list all the employees of a company.", "input": "", "output": "SELECT * FROM Employee;"}
{"instruction": "Generate a valid SQL query to delete all the records from \u2018Employee\u2019 Table", "input": "", "output": "DELETE FROM Employee;"}
{"instruction": "Create a blog post using React JS.", "input": "Blog Title: Why React is the Best Framework", "output": "import React from \"react\"; \nconst BlogPost = () => {\n return (\n  <div>\n   <h1>Why React is the Best Framework</h1>\n   <p>\n    React is one of the most popular JavaScript frameworks today and is used by many companies and developers. It boasts of its component-based architecture and powerful features that make web development easier and faster.\n   </p>\n   <p>\n    React provides developers with a component-based library that allows them to break down complex user interfaces into smaller and more manageable pieces, making it easier to develop and maintain websites. This component-based approach to web development also allows for code reuse, which makes it more efficient.\n   </p>\n   <p>\n    React is also known for its speed and performance, which makes it an ideal choice for high-performance web applications. With its virtual DOM, React allows developers to quickly update web pages by only rendering components that have changed, which significantly reduces page load time and boosts performance.\n   </p>\n   <p>\n    React's component-based library also provides developers with customizability, making it easy to develop websites with specific requirements. In addition, with its various tools and libraries, developers can easily integrate existing systems and APIs into their applications.\n   </p>\n   <p>\n    Overall, React is an ideal framework for web development, offering developers all the benefits of a component-based architecture and efficient development tools. It offers great speed, performance, and customizability, making it a great choice for any web development project.\n   </p>\n  </div>\n );\n};\n\nexport default BlogPost;"}
{"instruction": "Use the reduce() method to sum the values of an array of numbers in JavaScript.", "input": "const numbers = [1, 2, 3, 4, 5];", "output": "let sum = numbers.reduce((total, num) => total + num);\n\nconsole.log(sum); // 15"}
{"instruction": "Given the following list, create a Python dictionary having the ID as the key and the full name as the value.", "input": "my_list = [('John', '1'), ('Alice', '2'), ('Bob', '3')]", "output": "my_dict = dict(my_list)\nprint(my_dict)\n# Output: {'John': '1', 'Alice': '2', 'Bob': '3'}"}
{"instruction": "Write a Java program to display a pyramid with the given height.", "input": "height = 3", "output": "public class Pyramid \n{ \n\n    public static void printPyramid(int height) \n    { \n        int i, j; \n        for (i=0; i<height; i++) \n        { \n            for (j=0; j<=i; j++) \n            { \n                System.out.print(\"* \"); \n            } \n            System.out.println(); \n        } \n    } \n    public static void main(String args[]) \n    { \n        int height = 3; \n        printPyramid(height); \n    } \n}"}
{"instruction": "Write a function that takes an array of integers and multiplies them together.", "input": "arr = [3, 5, 4]", "output": "def multiplyArray(arr):\n    result = 1\n    for x in arr:\n        result = result * x\n    return result"}
{"instruction": "Generate 10 random integers between 12 and 25.", "input": "", "output": ""}
{"instruction": "Develop a SQL query to select customers with a processing time greater than 5 minutes.", "input": "Input: \nCustomers Table\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 cust_id\u2502name    \u2502 status \u2502processing_time\u2502 \n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021        \u2502 John   \u2502 active \u2502 3           \u2502 \n\u25022        \u2502 Peter  \u2502 inactive\u2502 7           \u2502 \n\u25023        \u2502 Rachel \u2502 active \u2502 2           \u2502 \n\u25024        \u2502 David  \u2502 active \u2502 10          \u2502 \n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "output": "SELECT * \nFROM Customers\nWHERE processing_time > 5;"}
{"instruction": "Update the following SQL table column with the values in another column.", "input": "Table A \n\nid | column_1 | column_2\n--------------------\n1  |        25|      NULL\n2  |        29|      NULL", "output": "UPDATE TableA\nSET column_2 = column_1\nWHERE column_2 IS NULL;"}
{"instruction": "Generate a general shopping list using Python.", "input": "", "output": "def generate_shopping_list():\n    list_items = ['Bread', 'Milk', 'Butter', 'Eggs', 'Cereal', 'Fruits', 'Veggies', 'Canned food', 'Frozen food', 'Cheese', 'Meat', 'Snacks', 'Coffee', 'Tea', 'Sugar', 'Salt', 'Herbs', 'Cooking oil', 'Detergent', 'Toilet paper']\n    return list_items"}
{"instruction": "Create a bash script that asks a user to type in their name and prints out \"Hello <name>\"", "input": "", "output": "#!/bin/bash\n\necho \"Please enter your name:\"\nread name\necho \"Hello $name!\""}
{"instruction": "Generate a function that takes an array of integers and rearranges the elements in a cyclical fashion, such that the element at index 0 comes last, the element at index 1 goes to the front, the element at index 2 is inserted after the element at the last index and so on.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def rearrange_array(arr):\n    output = []\n    for i in range(len(arr)):\n        idx = (i + 1) % len(arr)\n        output.append(arr[idx])\n    return output"}
{"instruction": "Create a HTML form with two input fields called 'name' and 'age'.", "input": "", "output": "<form>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" name=\"name\" id=\"name\">\n  <label for=\"age\">Age:</label>\n  <input type=\"number\" name=\"age\" id=\"age\">\n  <input type=\"submit\" value=\"Submit\">\n</form>"}
{"instruction": "Change the following program so that it prints the squares of numbers from 0 to 10.", "input": "for i in range(10):\n print(i)", "output": "for i in range(11):\n print(i*i)"}
{"instruction": "Write a Python function that takes a list of strings as an input and returns a new list with the strings sorted by length.", "input": "", "output": "def sort_by_length(lst):\n  return sorted(lst, key=len)"}
{"instruction": "Create an HTML and CSS layout to display a list of books with their author, title and description.", "input": "Book 1: Author - John, Title - The Catcher in the Rye, Description - \u201cThe Catcher in the Rye is a 1951 novel by J. D. Salinger.\u201d \nBook 2: Author - Jane, Title - Sense and Sensibility, Description - \u201cSense and Sensibility is a novel by Jane Austen, published in 1811.\u201d", "output": "<html>\n<head>\n<style>\n  .book-container{\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .book{\n\twidth: 300px;\n\tpadding: 10px;\n\tborder: 1px solid #ccc;\n\tmargin: 10px;\n\tbox-sizing : border-box;\n  }\n  .author {\n\t  font-weight: bold;\n  }\n  .title {\n\t  font-style: italic;\n  }\n  .description {\n\t  font-size: 12px;\n  }\n</style>\n</head>\n<body>\n  <div class=\"book-container\">\n    <div class=\"book\">\n      <p class=\"author\">Author: John</p>\n      <p class=\"title\">Title: The Catcher in the Rye</p>\n      <p class=\"description\">Description: \u201cThe Catcher in the Rye is a 1951 novel by J. D. Salinger.\u201d</p>\n    </div>\n    <div class=\"book\">\n      <p class=\"author\">Author: Jane</p>\n      <p class=\"title\">Title: Sense and Sensibility</p>\n      <p class=\"description\">Description: \u201cSense and Sensibility is a novel by Jane Austen, published in 1811.\u201d</p>\n    </div>\n  </div>\n</body>\n</html>"}
{"instruction": "Write a C++ program to print out a multiplication table up to 10x10.", "input": "", "output": "#include <iostream>\nusing namespace std; \n  \nint main() \n{ \n    cout << \"Multiplication Table from 1 to 10:\" << endl; \n  \n    for (int i = 1; i <= 10; i++) { \n        for (int j = 1; j <= 10; j++) { \n            cout << i << \"*\" << j << \" = \" << i * j << endl; \n        } \n        cout << endl; \n    } \n  \n    return 0; \n}"}
{"instruction": "Construct a for loop in Java to increment a counter from 0 to 10.", "input": "", "output": "for (int i = 0; i < 10; i++) { \n   System.out.println(i); \n}"}
{"instruction": "Using the given datasets and Scikit-Learn, develop a K Nearest Neighbors (KNN) classifier.", "input": "import pandas as pd\ndf = pd.read_csv(\"data.csv\")", "output": "from sklearn.neighbors import KNeighborsClassifier \nX = df.iloc[:,:-1].values \ny = df.iloc[:,-1].values \nknn = KNeighborsClassifier(n_neighbors=3) \nknn.fit(X, y)"}
{"instruction": "Write a C++ program to print a decimal number in reverse", "input": "", "output": "#include<iostream>\nusing namespace std;\n\nint main()\n{\n    int num = 54321;\n    int reversed = 0;\n    \n    while(num != 0) {\n        reversed = reversed * 10 + num % 10;\n        num /= 10;\n    }\n    cout << \"Reversed Number: \" << reversed << endl;\n    return 0;\n}"}
{"instruction": "Write a function to check if an integer is a multiple of another integer.", "input": "", "output": "def is_multiple_of(num, multiple):\n    if num % multiple == 0:\n        return True\n    return False"}
{"instruction": "Generate a cURL command to perform a GET request with given parameters", "input": "url: https://example.client.com/target,\narguments: foo='bar', baz='qux'", "output": "curl -X GET \"https://example.client.com/target?foo=bar&baz=qux\""}
{"instruction": "Generate a simple Flask route to handle a GET request.", "input": "", "output": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/myroute\", methods=[\"GET\"])\ndef myfunc():\n  # write code here\n\nif __name__ == '__main__':\n app.run()"}
{"instruction": "Write a Python program to shuffle the items of a given list in random order.", "input": "list_elements = [1, 2, 3, 4, 5]", "output": "from random import shuffle\n\ndef shuffle_list(list_elements):\n    shuffle(list_elements)\n    return list_elements"}
{"instruction": "In Python, write a code snippet to calculate the average of numbers in a list.", "input": "listOfNumbers = [2, 4, 6, 8]", "output": "def avg(listOfNumbers):\n    total = 0\n    for number in listOfNumbers:\n        total += number\n    return total / len(listOfNumbers)\n\nprint(avg(listOfNumbers))"}
{"instruction": "Create a program which takes an array of integers and an integer as input, and returns the index of the integer in the array.", "input": "array = [1, 2, 3, 4];\nnumber = 3;", "output": "def indexof(nums, target): \n    for i in range(len(nums)): \n        if nums[i] == target: \n            return i \n    return -1"}
{"instruction": "Generate a permutation of a given list of numbers.", "input": "", "output": "import itertools \n  \ndef perms(lst): \n  perm = itertools.permutations(lst) \n  for i in list(perm): \n    print(i)"}
{"instruction": "Write a script in JavaScript to parse an XML document.", "input": "", "output": "// To parse an XML document in JavaScript:\n// 1. Use the DOMParser to load the XML document into an XML Document object\n// 2. Use the getElementsByTagName method to obtain all the elements with a specific tag in the document\n// 3. Use the getElementsByTagNameNS method to obtain all the elements with a specific tag and namespace in the document\n// 4. Use the getAttribute method to obtain the attribute values of the desired elements\n// 5. Use the getElementsByClassName method to obtain all the elements with a specific class in the document  \n// 6. Parse the elements and create a custom object according to the returned XML."}
{"instruction": "Construct a C# class to output the prime numbers up to n.", "input": "", "output": "class PrimeNumber\n{\n    public static void Main()\n    {\n        Console.Write(\"Enter a number: \");\n        int n = int.Parse(Console.ReadLine());\n \n        for (int i = 2; i <= n; i++)\n        {\n            if (CheckPrime(i))\n            {\n                Console.Write(i + \" \");\n            }\n        }\n        Console.WriteLine();\n    }\n \n    public static bool CheckPrime(int numberToCheck)\n    {\n        int boundary = (int)Math.Floor(Math.Sqrt(numberToCheck));\n \n        if (numberToCheck == 1) return false;\n        if (numberToCheck == 2) return true;\n \n        for (int i = 2; i <= boundary; ++i)\n        {\n            if (numberToCheck % i == 0) return false;\n        }\n \n        return true;\n    }\n}"}
{"instruction": "Convert the following block of code into a more concise version using more appropriate looping mechanisms.", "input": "myList = [\"one\", \"two\", \"three\", \"four\"]\n\nnewList = []\nfor element in myList:\n    newList.append(element[0])", "output": "myList = [\"one\", \"two\", \"three\", \"four\"]\n\nnewList = [element[0] for element in myList]"}
{"instruction": "Develop a function to compute the cost of a route.", "input": "distance_matrix=[\n [ 0, 10, 15, 20 ], \n [ 10, 0, 35, 25 ], \n [ 15, 35, 0, 30 ], \n [ 20, 25, 30, 0 ]\n]\n\nroute = [0, 2, 3, 1]", "output": "def get_route_cost(distance_matrix,route):\n    cost = 0\n    for i in range(len(route)-1):\n        cost += distance_matrix[route[i]][route[i+1]]\n    return cost\n  \nroute_cost = get_route_cost(distance_matrix, route) \nprint (route_cost) \n# Output: 90"}
{"instruction": "Find the frequency of a given phrase in the text", "input": "text = \"This is a phrase that I want to find the frequency of\"\nphrase = \"phrase\"", "output": "def find_frequency(text, phrase):\n    fdist = nltk.FreqDist(text.lower().split())\n    return fdist[phrase]"}
{"instruction": "Create SQL to select data from the table that has a specific value in the 'name' field.", "input": "Table Name: Country\n\nField: Name\n\nValue: USA", "output": "SELECT * FROM Country WHERE Name = 'USA';"}
{"instruction": "Explain the benefits of using the OOP approach in programming.", "input": "", "output": "Using the Object-Oriented Programming (OOP) approach in programming offers a number of advantages such as increased code reusability, easier maintenance, data hiding, and better performance. OOP makes it easier to model real-world objects and their relationships, allowing developers to reduce complexity by breaking programs down into smaller parts. This makes it easier to identify, debug and modify code. Additionally, OOP promotes the development of extensible and reusable code, cutting down on the cost and time of development. Finally, OOP allows for better tracking of data and control over which elements outside the program can modify the data."}
{"instruction": "Define a function to merge two sorted arrays into a single sorted array.", "input": "arr1 = [1, 3, 5, 7]\narr2 = [2, 4, 8, 10]", "output": "def merge_arrays(arr1, arr2):\n    arr3 = arr1 + arr2 # Combine the arrays\n    arr3.sort() # Sort the combined array\n    return arr3 # Return the newly sorted array"}
{"instruction": "Write all the possible combinations for the strings, \"ABC\" and \"XYZ\".", "input": "", "output": "ABCXYZ, ABCXZY, ABYXZC, ABYZXC, ACBXYZ, ACBXZY, ACYXZB, ACYZXB, AXBZYC, AXBYCZ, AXYBCZ, AXYZBC, XABCYZ, XABCZY, XAYBZC, XAYCZB, XBACYZ, XBACZY, XBYACZ, XBYZAC, XYABCZ, XYAZBC."}
{"instruction": "Convert a string of characters to uppercase in JavaScript.", "input": "String: hello", "output": "let upperCaseString = 'hello'.toUpperCase();"}
{"instruction": "Write an Objective-C program to check if two strings are anagrams", "input": "", "output": "- (BOOL) isAnagram:(NSString *)string1 with:(NSString *)string2 {\n\n  NSUInteger length1 = [string1 length];\n  NSUInteger length2 = [string2 length];\n  if (length1 != length2) return NO;\n\n  NSUInteger count[256] = { 0 };\n  unichar char1, char2;\n\n  for(int i=0; i<length1; i++) {\n    char1 = [string1 characterAtIndex:i];\n    char2 = [string2 characterAtIndex:i];\n    count[char1]++;\n    count[char2]--;\n  }\n\n  for (int i=0; i<256; i++) {\n    if (count[i] != 0) return NO;\n  }\n  return YES;\n}"}
{"instruction": "How would you delete the element \"Apple\" from the following list?", "input": "[\"Pear\", \"Grape\", \"Apple\", \"Banana\", \"Mango\"]", "output": "fruit_list = [\"Pear\", \"Grape\", \"Apple\", \"Banana\", \"Mango\"]\nfruit_list.remove(\"Apple\")"}
{"instruction": "Create an array of size n filled with the string \"hello\".", "input": "", "output": "def fillWithHello(n):\n    arr = [] \n    for i in range(0, n): \n        arr.append(\"hello\") \n    return arr"}
{"instruction": "Construct an HTML table that contains the following headers: \"Year\", \"Make\", \"Model\".", "input": "", "output": "<html>\n  <table>\n    <thead>\n      <tr>\n        <th>Year</th>\n        <th>Make</th>\n        <th>Model</th>\n      </tr>\n    </thead>\n  </table>\n</html>"}
{"instruction": "Write a regular expression to validate a domain name.", "input": "", "output": "regex = r\"^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][a-zA-Z0-9-_]{1,61}[a-zA-Z0-9]))\\.([a-zA-Z]{2,6}|[a-zA-Z0-9-]{2,30}\\.[a-zA-Z]{2,3})$\""}
{"instruction": "Create a C++ program to concatenate two string variables.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "#include <iostream>\n#include <string>\n \nint main() {\n \n   std::string string1 = \"Hello\";\n   std::string string2 = \"World\";\n \n   std::string concatenation = string1 + \" \" + string2;\n \n   std::cout << concatenation;\n   return 0;\n}"}
{"instruction": "How would you determine if a given number is a prime number?", "input": "", "output": "A prime number is a number that is only divisible by 1 and itself. To check if a given number is a prime number, first use a loop to check all the numbers from 1 to the given number. If any of the numbers evenly divide the given number, then the number is not a prime. Otherwise, the number is a prime number."}
{"instruction": "Code a function in C that takes an integer array and its size as two arguments and returns the average of these numbers.", "input": "array = [1,2,3,4,5]\nsize = 5", "output": "double getAverage(int arr[], int size) \n{ \n    int i; \n    float avg; \n    float sum=0.0; \n  \n    for (i = 0; i < size; ++i) \n    { \n        sum += arr[i]; \n    } \n    avg = sum / size; \n  \n    return avg; \n}"}
{"instruction": "Create a SQL query to find the total revenue for services in the month of February.", "input": "", "output": "SELECT SUM(t.total)\nFROM orders o\nINNER JOIN order_items t ON o.order_id = t.order_id\nINNER JOIN products p ON t.product_id = p.product_id\nWHERE p.type = 'service' \n  AND MONTH(o.order_date) = 2\n  AND YEAR(o.order_date) = YEAR(CURDATE());"}
{"instruction": "Suggest an algorithm for finding the maximum element in an unordered array given in JavaScript.", "input": "let array = [9, 4, 15, 10, 6, 20];", "output": "// max is assign to 0 as a starting point\nlet max = 0;\n\nfor (let i=0; i < array.length; i++) {\n  // If the current value of i is greater than max, max will be updated\n  if (array[i] > max) { \n    max = array[i];\n  }\n}\n\nconsole.log(max); // Output: 20"}
{"instruction": "Implement the code in the input to the output", "input": "def do_something(data):\n    # TODO: Your code here\n    pass", "output": "def do_something(data):\n    # Your code here\n    result = 1\n    for num in data:\n        result *= num\n    return result"}
{"instruction": "Describe your approach to sorting a variety of data with a single sorting algorithm.", "input": "", "output": "My approach to sorting a variety of data would involve using a single sorting algorithm. Depending on the type of data, I would select the most appropriate sorting algorithm which would involve understanding the complexity of the data and the type of sorting required. Generally, I would use quick sort or merge sort as they are efficient and have good performance. However, if needed, I would be open to using insertion or bubble sort as well."}
{"instruction": "Create an algorithm in MATLAB for sorting an array of integers in ascending order.", "input": "arr = [8, 3, 5, 9, 4]", "output": "function sortedArr = sortAscend(arr)\nsortedArr = zeros(size(arr));\ncount = 0;\n\nwhile ~isempty(arr)\n    minimum = min(arr);\n    sortedArr(count+1) = minimum;\n    count = count + 1;\n    arr = arr(arr~=minimum);\nend"}
{"instruction": "Create a boolean condition to check if the value is a real number.", "input": "", "output": "typeof value == 'number' && isFinite(value)"}
{"instruction": "Create a Python function which takes a dictionary and prints the contents of the dictionary in a human readable format.", "input": "", "output": "def printDictionary(dictionary):\n    for key in dictionary.keys():\n        print(key, \":\", dictionary[key])"}
{"instruction": "Design a Ruby program to search through an array and find the first element that satisfies a given condition.", "input": "", "output": "def search_array(arr, condition)\n    arr.find { |item| condition.call(item) }\nend"}
{"instruction": "Write a code to check if a string contains only digits and output true or false.", "input": "string = \"1234567890\"", "output": "def is_digits(str):\n    \"\"\"Checks if a string contains only digits.\n    \n    Parameters:\n    str (str): string to be tested\n    \"\"\"\n    return str.isdigit()\n\nif __name__ == '__main__':\n    string = \"1234567890\"\n    print(is_digits(string))"}
{"instruction": "What is the purpose of a constructor in a class in Java?", "input": "", "output": "The purpose of a constructor in a class in Java is to initialize an object of that class. A constructor is a special kind of method that is used to create an object of its associated class. When an object of the class is created, the constructor is used to set the initial state of the object."}
{"instruction": "Design an SQL query for displaying the names and ages of all employees.", "input": "Employee table with the columns \"name\" and \"age\"", "output": "SELECT name, age FROM Employee;"}
{"instruction": "Write a while loop to print all numbers from 20 to 0.", "input": "", "output": "num = 20\n\nwhile num >= 0:\n    print(num)\n    num -= 1"}
{"instruction": "Write a Bash script to check if a given password matches the given regular expression.", "input": "Regular expression: ^[0-9][A-Z]+$\nPassword: 123ABC", "output": "#!/bin/bash\n\nif [[ \"$1\" =~ ^[0-9][A-Z]+$ ]]; then\n    echo \"Password matches the regular expression\"\nelse\n    echo \"Password does not match the regular expression\"\nfi"}
{"instruction": "Given a Python list, write the code to flatten it", "input": "l1=[1,2,3,[4,[5,6]]]", "output": "def flatten(nums):\n    flattened_list = []\n    for elem in nums:\n        if type(elem) == list:\n            flattened_list.extend(flatten(elem))\n        else:\n            flattened_list.append(elem)\n    return flattened_list\n\nflatten(l1)"}
{"instruction": "Interpret the following array of numbers consisting of 6 elements and divide it into 2 columns.", "input": "[1, 2, 3, 4, 5, 6]", "output": "arr = [1, 2, 3, 4, 5, 6]\n\nfirst_column = arr[:len(arr)//2]\nsecond_column = arr[len(arr)//2:]"}
{"instruction": "Retrieve the last character of a given string.", "input": "Programming", "output": "g"}
{"instruction": "Create a function to create a simple calculator for addition, subtraction, multiplication and division.", "input": "", "output": "def simple_calculator(action, a, b):\n    if action == \"add\":\n        return a + b\n    elif action == \"subtract\":\n        return a - b\n    elif action == \"multiply\":\n        return a * b\n    elif action == \"divide\":\n        return a / b\n    else:\n        return 0"}
{"instruction": "How do you create a new dataframe from existing two pandas dataframes?", "input": "", "output": "You can create a new dataframe by using the concat() or merge() functions of pandas.  With concat(), you can create a new dataframe by stacking the existing two dataframes on top/bottom of one another. With merge(), you can combine two dataframes by joining them on a key of your choice."}
{"instruction": "Calculate the sum of the following numbers using JavaScript.", "input": "[1, 4, 8, 10]", "output": "let sum = 0;\nfor(i = 0; i < arr.length; i++){\n  sum += arr[i];\n}\n\nconsole.log(sum); // Output: 23"}
{"instruction": "Select the Python data types which can store a sequence of items.", "input": "", "output": "Sequence data types in Python include lists, tuples and range objects."}
{"instruction": "How would you use an if-else statement to test whether a number is even or odd?", "input": "", "output": "def test_even_odd(num):\n  if num % 2 == 0:\n    print(\"The number is even\")\n  else:\n    print(\"The number is odd\")"}
{"instruction": "Write a Python program that prints all numbers from 1 to 100 that are divisible by both 5 and 7.", "input": "", "output": "for num in range(1, 101):\n    if (num%5==0) and (num%7==0):\n        print(num)"}
{"instruction": "Use the function \"randint()\" to generate a random number between 1 and 10 in Python.", "input": "", "output": "from random import randint\nrandom_num = randint(1,10)\nprint(random_num)"}
{"instruction": "Compute the total number of days in a given year.", "input": "", "output": "def get_total_days_in_year(year):\n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n        # leap year\n        return 366\n    else:\n        # non leap year\n        return 365"}
{"instruction": "Write a Python program that generates a random integer between 1 and 5 and prints it out.", "input": "", "output": "import random\n\nrandom_integer = random.randint(1, 5)\n\nprint(random_integer)"}
{"instruction": "Generate a css code block to create a white text shadow for a given HTML element", "input": "", "output": ".element {\n    text-shadow: 1px 0 white, 0 1px white, 1px 1px white, -1px 0 white, 0 -1px white, -1px -1px white;\n}"}
