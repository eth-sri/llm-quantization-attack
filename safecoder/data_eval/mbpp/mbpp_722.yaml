name: mbpp_722
language: py
prompt: "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as -\
  \ a dictionary with a student name as a key and a tuple of float (student_height,\
  \ student_weight) as a value, - minimal height, - minimal weight. Write a function\
  \ to filter students that have height and weight above the minimum.\n    Test examples:\n\
  \    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65),\
  \ 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega':\
  \ (6.2, 70)}\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell':\
  \ (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra\
  \ Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\n    assert filter_data({'Cierra\
  \ Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre\
  \ Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra\
  \ Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n    \"\"\"\n"
tests: "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65),\
  \ 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega':\
  \ (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9,\
  \ 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega':\
  \ (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2,\
  \ 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8,\
  \ 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry':\
  \ (6.0, 68),'Pierre Cox': (5.8, 66)}"
completions: []
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
