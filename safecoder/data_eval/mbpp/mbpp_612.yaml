name: mbpp_612
language: py
prompt: "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list\
  \ of lists, where each sublist has two elements, and returns a list of two lists\
  \ where the first list has the first element of each sublist and the second one\
  \ has the second.\n    Test examples:\n    assert merge([['x', 'y'], ['a', 'b'],\
  \ ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n    assert merge([[1, 2],\
  \ [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\n    assert merge([['x',\
  \ 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z',\
  \ 'c','o']]\n    \"\"\"\n"
tests: "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y',\
  \ 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2,\
  \ 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) ==\
  \ [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"
completions: []
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
