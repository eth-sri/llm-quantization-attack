name: mbpp_758
language: py
prompt: "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists\
  \ within a list. The function should return a dictionary where every list is converted\
  \ to a tuple and the value of such tuple is the number of its occurencies in the\
  \ original list.\n    Test examples:\n    assert unique_sublists([[1, 3], [5, 7],\
  \ [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17):\
  \ 1, (9, 11): 1}\n    assert unique_sublists([['green', 'orange'], ['black'], ['green',\
  \ 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n\
  \    assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10,\
  \ 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\n    assert unique_sublists([['john']])=={('john',):\
  \ 1}\n    \"\"\"\n"
tests: "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9,\
  \ 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green',\
  \ 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'):\
  \ 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60,\
  \ 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90,\
  \ 100, 200): 1}\nassert unique_sublists([['john']])=={('john',): 1}"
completions: []
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
