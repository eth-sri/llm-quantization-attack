name: mbpp_779
language: py
prompt: "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the\
  \ number of lists within a list. The function should return a dictionary, where\
  \ every list is turned to a tuple, and the value of the tuple is the number of its\
  \ occurrences.\n    Test examples:\n    assert unique_sublists([[1, 3], [5, 7],\
  \ [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17):\
  \ 1, (9, 11): 1}\n    assert unique_sublists([['green', 'orange'], ['black'], ['green',\
  \ 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n\
  \    assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4):\
  \ 1, (4, 5): 1, (6, 7): 1}\n    \"\"\"\n"
tests: "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9,\
  \ 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green',\
  \ 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'):\
  \ 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4,\
  \ 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"
completions: []
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
